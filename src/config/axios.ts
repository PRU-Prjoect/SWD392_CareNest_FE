// src/config/axios.ts
import axios, { AxiosError } from "axios";
import type { AxiosResponse, InternalAxiosRequestConfig } from "axios";
import { toast } from "react-toastify";

// ‚úÖ Global state management
let currentToken: string | null = null;
let logoutCallback: (() => void) | null = null;
let isLoggingOut = false; // ‚úÖ Prevent multiple logout calls

// ‚úÖ Export functions ƒë·ªÉ control t·ª´ b√™n ngo√†i
export const setLogoutCallback = (callback: () => void) => {
  logoutCallback = callback;
};
export const updateStateToken = (token: string | null) => {
  currentToken = token;
};

// ‚úÖ Get current token helper
export const getCurrentToken = (): string | null => {
  return currentToken || localStorage.getItem("authToken");
};

// ‚úÖ Create axios instance
const api = axios.create({
  baseURL: "https://carenest-api.lighttail.com/api/",
  timeout: 10000,
  headers: {
    "Content-Type": "application/json",
    Accept: "*/*", // ‚úÖ Match v·ªõi API requirements
  },
});

// ‚úÖ H√†m t·∫°o th√¥ng b√°o l·ªói ng∆∞·ªùi d√πng t·ª´ l·ªói k·ªπ thu·∫≠t
export const getUserFriendlyErrorMessage = (error: unknown): string => {
  // N·∫øu kh√¥ng c√≥ error object
  if (!error) {
    return "ƒê√£ x·∫£y ra l·ªói, vui l√≤ng th·ª≠ l·∫°i";
  }

  // Chuy·ªÉn ƒë·ªïi error sang d·∫°ng c√≥ th·ªÉ truy c·∫≠p thu·ªôc t√≠nh
  const err = error as {
    message?: string;
    code?: string;
    response?: {
      status?: number;
      data?: {
        message?: string;
      }
    }
  };

  // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p message t·ª´ backend c√≥ pattern c·ª• th·ªÉ
  const errorMessage = err.message || (err.response?.data?.message) || "";
  
  // X·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p l·ªói c·ª• th·ªÉ
  if (errorMessage.includes("entity changes") || errorMessage.includes("saving")) {
    return "Kh√¥ng th·ªÉ t·∫°o m·ª•c m·ªõi do tr√πng l·∫∑p d·ªØ li·ªáu. Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin.";
  }
  
  if (errorMessage.includes("password") && errorMessage.includes("incorrect")) {
    return "M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c";
  }

  if (errorMessage.includes("Email") && errorMessage.includes("already in use")) {
    return "Email n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng";
  }
  
  if (errorMessage.includes("validation")) {
    return "Th√¥ng tin kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i d·ªØ li·ªáu nh·∫≠p v√†o.";
  }

  if (errorMessage.includes("Permission denied") || errorMessage.includes("not authorized")) {
    return "B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y";
  }

  if (errorMessage.includes("not found") || errorMessage.includes("404")) {
    return "Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu y√™u c·∫ßu";
  }

  if (errorMessage.includes("timeout") || errorMessage.includes("timed out")) {
    return "K·∫øt n·ªëi m·∫°ng qu√° ch·∫≠m, vui l√≤ng th·ª≠ l·∫°i sau";
  }
  
  // X·ª≠ l√Ω status code t·ª´ response
  if (err.response) {
    switch (err.response.status) {
      case 400:
        return "Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i d·ªØ li·ªáu.";
      case 401:
        return "Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.";
      case 403:
        return "B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y.";
      case 404:
        return "Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu y√™u c·∫ßu.";
      case 409:
        return "D·ªØ li·ªáu ƒë√£ t·ªìn t·∫°i ho·∫∑c xung ƒë·ªôt.";
      case 422:
        return "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá.";
      case 429:
        return "Qu√° nhi·ªÅu y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i sau.";
      case 500:
      case 502:
      case 503:
      case 504:
        return "H·ªá th·ªëng ƒëang g·∫∑p s·ª± c·ªë. Vui l√≤ng th·ª≠ l·∫°i sau.";
    }
  }

  // X·ª≠ l√Ω c√°c l·ªói m·∫°ng
  if (err.code === "ECONNABORTED") {
    return "K·∫øt n·ªëi qu√° ch·∫≠m. Vui l√≤ng th·ª≠ l·∫°i sau.";
  }
  if (err.code === "ERR_NETWORK") {
    return "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.";
  }

  // Tr·∫£ v·ªÅ message m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c l·ªói
  return "ƒê√£ x·∫£y ra l·ªói, vui l√≤ng th·ª≠ l·∫°i";
};

// ‚úÖ Request interceptor - T·ª± ƒë·ªông th√™m token
const handleRequest = (config: InternalAxiosRequestConfig) => {
  const token = getCurrentToken();

  // ‚úÖ Ch·ªâ th√™m token n·∫øu c√≥
  if (token) {
    config.headers["Authorization"] = `Bearer ${token}`;
  }

  // ‚úÖ Debug logging
  console.log("üöÄ API Request:", {
    method: config.method?.toUpperCase(),
    url: config.url,
    hasToken: !!token,
    headers: config.headers["Authorization"] ? "Bearer ***" : "None",
  });

  return config;
};

// ‚úÖ Request error handler
const handleRequestError = (error: AxiosError) => {
  console.error("‚ùå Request Error:", {
    message: error.message,
    code: error.code,
    config: {
      method: error.config?.method,
      url: error.config?.url,
    },
  });

  // ‚úÖ Show user-friendly error
  toast.error("L·ªói k·∫øt n·ªëi. Vui l√≤ng th·ª≠ l·∫°i!");
  return Promise.reject(error);
};

// ‚úÖ Response success handler
const handleResponse = (response: AxiosResponse) => {
  console.log("‚úÖ API Response:", {
    status: response.status,
    statusText: response.statusText,
    url: response.config.url,
    method: response.config.method?.toUpperCase(),
  });

  return response;
};

// ‚úÖ Logout user helper
const logoutUser = () => {
  if (isLoggingOut) {
    console.warn("‚ö†Ô∏è Logout already in progress, skipping...");
    return;
  }

  isLoggingOut = true;
  console.log("üö™ Logging out user due to authentication error");

  // ‚úÖ Clear all auth data
  localStorage.removeItem("authToken");
  localStorage.removeItem("user");
  sessionStorage.removeItem("authToken");
  sessionStorage.removeItem("user");

  // ‚úÖ Update global state
  updateStateToken(null);

  // ‚úÖ Call logout callback if exists
  if (logoutCallback) {
    try {
      logoutCallback();
    } catch (error) {
      console.error("‚ùå Error in logout callback:", error);
    }
  }

  // ‚úÖ Show notification
  toast.error("Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!");

  // ‚úÖ Redirect to login after a short delay
  setTimeout(() => {
    window.location.href = "/login";
    isLoggingOut = false;
  }, 1000);
};

// ‚úÖ Response error handler
const handleResponseError = (error: AxiosError) => {
  const status = error.response?.status;
  const url = error.config?.url;
  const method = error.config?.method?.toUpperCase();

  console.error("‚ùå API Response Error:", {
    status,
    statusText: error.response?.statusText,
    method,
    url,
    message: error.message,
    data: error.response?.data,
  });

  // ‚úÖ Handle different error statuses
  switch (status) {
    case 401:
      console.warn("üîê Unauthorized access - logging out user");
      logoutUser();
      break;

    case 403:
      toast.error("B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y!");
      break;

    case 404:
      toast.error("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu y√™u c·∫ßu!");
      break;

    case 409:
      toast.error("D·ªØ li·ªáu ƒë√£ t·ªìn t·∫°i ho·∫∑c xung ƒë·ªôt!");
      break;

    case 422:
      toast.error("D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá!");
      break;

    case 429:
      toast.error("Qu√° nhi·ªÅu y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i sau!");
      break;

    case 500:
    case 502:
    case 503:
    case 504:
      toast.error("H·ªá th·ªëng ƒëang g·∫∑p s·ª± c·ªë. Vui l√≤ng th·ª≠ l·∫°i sau!");
      break;

    default:
      // ‚úÖ Handle network errors
      if (!error.response) {
        if (error.code === "ECONNABORTED") {
          toast.error("K·∫øt n·ªëi qu√° ch·∫≠m. Vui l√≤ng th·ª≠ l·∫°i sau.");
        } else if (error.code === "ERR_NETWORK") {
          toast.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng!");
        } else {
          toast.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß!");
        }
      } else {
        // S·ª≠ d·ª•ng h√†m getUserFriendlyErrorMessage ƒë·ªÉ hi·ªÉn th·ªã l·ªói th√¢n thi·ªán h∆°n
        toast.error(getUserFriendlyErrorMessage(error));
      }
      break;
  }

  console.error("Response error:", error);
  return Promise.reject(error);
};

// ‚úÖ Setup interceptors
api.interceptors.request.use(handleRequest, handleRequestError);
api.interceptors.response.use(handleResponse, handleResponseError);

// ‚úÖ Export utilities
export { logoutUser };
export default api;
