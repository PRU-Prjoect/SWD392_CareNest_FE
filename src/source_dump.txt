# TỔNG HỢP MÃ NGUỒN DỰ ÁN
# ==================================================
# Đường dẫn: D:\KÌ 7\SWD392_CareNest_FE\src
# Công nghệ phát hiện: javascript, nextjs, react, typescript
# ==================================================

## CẤU TRÚC THƯ MỤC
```
src/
├── assets/
│   ├── ZaloPay.jpg
│   ├── iconMomo.svg
│   ├── momoPay.jpg
│   ├── react.svg
│   ├── wallet-svgrepo-com.svg
│   └── zalopay-seeklogo.svg
├── components/
│   ├── common/
│   │   ├── ChartTab.tsx
│   │   ├── ComponentCard.tsx
│   │   ├── FilterBar.tsx
│   │   ├── GridShape.tsx
│   │   ├── PageBreadCrumb.tsx
│   │   ├── ScrollToTop.tsx
│   │   └── SearchBar.tsx
│   ├── form/
│   │   ├── form-elements/
│   │   │   ├── CheckboxComponents.tsx
│   │   │   ├── DefaultInputs.tsx
│   │   │   ├── DropZone.tsx
│   │   │   ├── FileInputExample.tsx
│   │   │   ├── InputGroup.tsx
│   │   │   ├── InputStates.tsx
│   │   │   ├── RadioButtons.tsx
│   │   │   ├── SelectInputs.tsx
│   │   │   ├── TextAreaInput.tsx
│   │   │   └── ToggleSwitch.tsx
│   │   ├── group-input/
│   │   │   └── PhoneInput.tsx
│   │   ├── input/
│   │   │   ├── Checkbox.tsx
│   │   │   ├── FileInput.tsx
│   │   │   ├── InputField.tsx
│   │   │   ├── Radio.tsx
│   │   │   ├── RadioSm.tsx
│   │   │   └── TextArea.tsx
│   │   ├── switch/
│   │   │   └── Switch.tsx
│   │   ├── Form.tsx
│   │   ├── Label.tsx
│   │   ├── MultiSelect.tsx
│   │   ├── Select.tsx
│   │   └── date-picker.tsx
│   ├── header/
│   │   ├── Header.tsx
│   │   ├── NotificationDropdown.tsx
│   │   └── UserDropdown.tsx
│   ├── icons/
│   │   ├── alert-hexa.svg
│   │   ├── alert.svg
│   │   ├── angle-down.svg
│   │   ├── angle-left.svg
│   │   ├── angle-right.svg
│   │   ├── angle-up.svg
│   │   ├── arrow-down.svg
│   │   ├── arrow-right.svg
│   │   ├── arrow-up.svg
│   │   ├── audio.svg
│   │   ├── bolt.svg
│   │   ├── box-cube.svg
│   │   ├── box-line.svg
│   │   ├── box.svg
│   │   ├── calendar.svg
│   │   ├── calender-line.svg
│   │   ├── chat.svg
│   │   ├── check-circle.svg
│   │   ├── check-line.svg
│   │   ├── chevron-down.svg
│   │   ├── chevron-left.svg
│   │   ├── chevron-up.svg
│   │   ├── close-line.svg
│   │   ├── close.svg
│   │   ├── copy.svg
│   │   ├── docs.svg
│   │   ├── dollar-line.svg
│   │   ├── download.svg
│   │   ├── envelope.svg
│   │   ├── eye-close.svg
│   │   ├── eye.svg
│   │   ├── file.svg
│   │   ├── folder.svg
│   │   ├── grid.svg
│   │   ├── group.svg
│   │   ├── horizontal-dots.svg
│   │   ├── index.ts
│   │   ├── info-error.svg
│   │   ├── info-hexa.svg
│   │   ├── info.svg
│   │   ├── list.svg
│   │   ├── lock.svg
│   │   ├── mail-line.svg
│   │   ├── moredot.svg
│   │   ├── page.svg
│   │   ├── paper-plane.svg
│   │   ├── pencil.svg
│   │   ├── pie-chart.svg
│   │   ├── plug-in.svg
│   │   ├── plus.svg
│   │   ├── shooting-star.svg
│   │   ├── table.svg
│   │   ├── task-icon.svg
│   │   ├── time.svg
│   │   ├── trash.svg
│   │   ├── user-circle.svg
│   │   ├── user-line.svg
│   │   └── videos.svg
│   ├── layout/
│   │   ├── BannerPage.tsx
│   │   ├── Footer.tsx
│   │   ├── NavHome.tsx
│   │   └── Navbar.tsx
│   ├── ui/
│   │   ├── Alert.tsx
│   │   ├── Avatar.tsx
│   │   ├── Badge.tsx
│   │   ├── Button.tsx
│   │   ├── Card.tsx
│   │   ├── Dropdown.tsx
│   │   ├── DropdownItem.tsx
│   │   ├── Icons.tsx
│   │   ├── Input.tsx
│   │   ├── Modal.tsx
│   │   ├── Pagination.tsx
│   │   ├── Spinner.tsx
│   │   └── Tabs.tsx
│   └── PageMeta.tsx
├── config/
│   └── axios.ts
├── context/
│   ├── SidebarContext.tsx
│   └── ThemeContext.tsx
├── data/
│   ├── listpackage.json
│   ├── project.json
│   └── tasks.json
├── hooks/
│   └── useAuth.ts
├── layout/
│   ├── AppHeader.tsx
│   ├── AppHeaderForAdmin.tsx
│   ├── AppHeaderForUser.tsx
│   ├── AppLayout.tsx
│   ├── AppLayoutForShopAdmin.tsx
│   ├── AppLayoutForUser.tsx
│   ├── AppSidebar.tsx
│   ├── AppSidebarForShopAdmin.tsx
│   ├── Backdrop.tsx
│   └── SidebarWidget.tsx
├── pages/
│   ├── Checkout/
│   │   └── index.tsx
│   ├── Dashboard/
│   │   ├── component/
│   │   │   ├── Wallet/
│   │   │   │   ├── walletHistory.tsx
│   │   │   │   └── walletModal.tsx
│   │   │   ├── DaskboardContent.tsx
│   │   │   ├── MainDashboard.tsx
│   │   │   ├── PomodoroForm.tsx
│   │   │   └── PomodoroTimer.tsx
│   │   ├── DashboardPage.tsx
│   │   ├── ServicePackage.tsx
│   │   ├── TaskManager.tsx
│   │   ├── TimeManagement.tsx
│   │   ├── Wallet.tsx
│   │   ├── employeeManagement.tsx
│   │   ├── index.tsx
│   │   └── taskReport.tsx
│   ├── Forms/
│   │   └── FormElements.tsx
│   ├── Home/
│   │   ├── components/
│   │   │   ├── HeroBanner.tsx
│   │   │   ├── HighestRating.tsx
│   │   │   ├── LatestServices.tsx
│   │   │   ├── MostBuy.tsx
│   │   │   ├── ServiceCard.tsx
│   │   │   └── ServiceCategories.tsx
│   │   ├── HomePage.tsx
│   │   └── index.tsx
│   ├── Login/
│   │   ├── components/
│   │   │   ├── AuthWrapper.tsx
│   │   │   ├── EnterOTPCode.tsx
│   │   │   ├── ForgotPassword.tsx
│   │   │   ├── LoginForm.tsx
│   │   │   └── SocialLogin.tsx
│   │   ├── hooks/
│   │   │   └── useLoginForm.ts
│   │   ├── utils/
│   │   │   └── loginValidation.ts
│   │   └── index.tsx
│   ├── NotFound/
│   │   └── index.tsx
│   ├── Profile/
│   │   └── index.tsx
│   ├── Register/
│   │   └── index.tsx
│   ├── RegisterShop/
│   │   └── index.tsx
│   ├── RegisterType/
│   │   └── index.tsx
│   ├── ServiceDetail/
│   │   ├── components/
│   │   │   ├── ServiceActions.tsx
│   │   │   ├── ServiceImages.tsx
│   │   │   └── ServiceInfo.tsx
│   │   └── ServiceDetail.tsx
│   ├── Services/
│   │   └── Service.tsx
│   ├── Settings/
│   │   └── index.tsx
│   ├── SignUp/
│   │   ├── components/
│   │   ├── hooks/
│   │   ├── utils/
│   │   └── SignUp.tsx
│   ├── Tables/
│   │   └── BasicTables.tsx
│   └── UiElements/
│       ├── Alerts.tsx
│       ├── Avatars.tsx
│       ├── Badges.tsx
│       └── Buttons.tsx
├── routes/
│   ├── index.tsx
│   ├── privateRoutes.ts
│   └── publicRoutes.ts
├── services/
│   ├── ProtectedRoute.tsx
│   └── authService.ts
├── store/
│   ├── slices/
│   │   └── authSlice.ts
│   └── store.ts
├── types/
│   ├── auth.ts
│   ├── services.ts
│   └── user.ts
├── utils/
├── App.css
├── App.tsx
├── index.css
├── main.tsx
├── svg.d.ts
└── vite-env.d.ts
```

## NỘI DUNG CÁC FILE

### App.tsx
```tsx
// src/App.tsx
import { useEffect } from "react";
import { useDispatch } from "react-redux";
import { AuthWrapper } from "./pages/Login/components/AuthWrapper";
import { restoreAuth } from "./store/slices/authSlice";
import type { AppDispatch } from "./store/store";
import AppRoutes from "./routes/index";

function App() {
  const dispatch = useDispatch<AppDispatch>();

  useEffect(() => {
    dispatch(restoreAuth());
  }, [dispatch]);

  return (
    <AuthWrapper>
      <AppRoutes />
    </AuthWrapper>
  );
}

export default App;

```

### main.tsx
```tsx
// src/main.tsx
import React from "react";
import ReactDOM from "react-dom/client";
import { Provider } from "react-redux";
import { BrowserRouter } from "react-router-dom";
import { ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { store } from "./store/store";
import { setLogoutCallback, updateStateToken } from "./config/axios"; // ✅ Đường dẫn đúng
import { logout } from "./store/slices/authSlice";
import App from "./App";
import "./index.css";

// ✅ Thiết lập callback cho axios interceptor
store.subscribe(() => {
  const state = store.getState();
  updateStateToken(state.auth.token);
});

setLogoutCallback(() => {
  store.dispatch(logout());
});

ReactDOM.createRoot(document.getElementById("root")!).render(
  <React.StrictMode>
    <Provider store={store}>
      <BrowserRouter>
        <App />
        <ToastContainer
          position="top-right"
          autoClose={3000}
          hideProgressBar={false}
          newestOnTop={false}
          closeOnClick
          rtl={false}
          pauseOnFocusLoss
          draggable
          pauseOnHover
          style={{ zIndex: 99999 }}
          toastStyle={{ zIndex: 99999 }}
        />
      </BrowserRouter>
    </Provider>
  </React.StrictMode>
);

```

### svg.d.ts
```ts
declare module "*.svg?react" {
  import React = require("react");
  export const ReactComponent: React.FC<React.SVGProps<SVGSVGElement>>;
  const src: string;
  export default src;
}

```

### vite-env.d.ts
```ts
/// <reference types="vite/client" />

```

### components\PageMeta.tsx
```tsx
import { HelmetProvider, Helmet } from "react-helmet-async";

const PageMeta = ({
  title,
  description,
}: {
  title: string;
  description: string;
}) => (
  <Helmet>
    <title>{title}</title>
    <meta name="description" content={description} />
  </Helmet>
);

export const AppWrapper = ({ children }: { children: React.ReactNode }) => (
  <HelmetProvider>{children}</HelmetProvider>
);

export default PageMeta;

```

### components\common\ChartTab.tsx
```tsx
import { useState } from "react";

const ChartTab: React.FC = () => {
  const [selected, setSelected] = useState<
    "optionOne" | "optionTwo" | "optionThree"
  >("optionOne");

  const getButtonClass = (option: "optionOne" | "optionTwo" | "optionThree") =>
    selected === option
      ? "shadow-theme-xs text-gray-900 dark:text-white bg-white dark:bg-gray-800"
      : "text-gray-500 dark:text-gray-400";

  return (
    <div className="flex items-center gap-0.5 rounded-lg bg-gray-100 p-0.5 dark:bg-gray-900">
      <button
        onClick={() => setSelected("optionOne")}
        className={`px-3 py-2 font-medium w-full rounded-md text-theme-sm hover:text-gray-900   dark:hover:text-white ${getButtonClass(
          "optionOne"
        )}`}
      >
        Monthly
      </button>

      <button
        onClick={() => setSelected("optionTwo")}
        className={`px-3 py-2 font-medium w-full rounded-md text-theme-sm hover:text-gray-900   dark:hover:text-white ${getButtonClass(
          "optionTwo"
        )}`}
      >
        Quarterly
      </button>

      <button
        onClick={() => setSelected("optionThree")}
        className={`px-3 py-2 font-medium w-full rounded-md text-theme-sm hover:text-gray-900   dark:hover:text-white ${getButtonClass(
          "optionThree"
        )}`}
      >
        Annually
      </button>
    </div>
  );
};

export default ChartTab;

```

### components\common\ComponentCard.tsx
```tsx
interface ComponentCardProps {
  title: string;
  children: React.ReactNode;
  className?: string; // Additional custom classes for styling
  desc?: string; // Description text
}

const ComponentCard: React.FC<ComponentCardProps> = ({
  title,
  children,
  className = "",
  desc = "",
}) => {
  return (
    <div
      className={`rounded-2xl border border-gray-200 bg-white dark:border-gray-800 dark:bg-white/[0.03] ${className}`}
    >
      {/* Card Header */}
      <div className="px-6 py-5">
        <h3 className="text-base font-medium text-gray-800 dark:text-white/90">
          {title}
        </h3>
        {desc && (
          <p className="mt-1 text-sm text-gray-500 dark:text-gray-400">
            {desc}
          </p>
        )}
      </div>

      {/* Card Body */}
      <div className="p-4 border-t border-gray-100 dark:border-gray-800 sm:p-6">
        <div className="space-y-6">{children}</div>
      </div>
    </div>
  );
};

export default ComponentCard;

```

### components\common\FilterBar.tsx
```tsx
// components/common/FilterBar.tsx
import React, { useState, useRef, useEffect } from "react";

interface FilterOption {
  value: string;
  label: string;
  icon?: React.ReactNode;
}

interface FilterConfig {
  name: string;
  label: string;
  placeholder: string;
  options: FilterOption[];
}

interface FilterBarProps {
  onFilter: (filters: Record<string, string>) => void;
}

const FilterBar: React.FC<FilterBarProps> = ({ onFilter }) => {
  const [activeFilters, setActiveFilters] = useState<Record<string, string>>(
    {}
  );
  const [openDropdown, setOpenDropdown] = useState<string | null>(null);
  const dropdownRefs = useRef<Record<string, HTMLDivElement | null>>({});

  // Cấu hình các filter
  const filterConfigs: FilterConfig[] = [
    {
      name: "location",
      label: "Địa điểm",
      placeholder: "Chọn địa điểm",
      options: [
        { value: "", label: "Tất cả địa điểm" },
        { value: "hanoi", label: "Hà Nội" },
        { value: "hcm", label: "TP. Hồ Chí Minh" },
        { value: "danang", label: "Đà Nẵng" },
        { value: "haiphong", label: "Hải Phòng" },
      ],
    },
    {
      name: "petType",
      label: "Loại thú",
      placeholder: "Chọn loại thú",
      options: [
        { value: "", label: "Tất cả loại thú" },
        { value: "dog", label: "🐕 Chó" },
        { value: "cat", label: "🐱 Mèo" },
        { value: "bird", label: "🐦 Chim" },
        { value: "fish", label: "🐠 Cá" },
        { value: "rabbit", label: "🐰 Thỏ" },
      ],
    },
    {
      name: "sortBy",
      label: "Sắp xếp",
      placeholder: "Sắp xếp theo",
      options: [
        { value: "newest", label: "Mới nhất" },
        { value: "price_asc", label: "Giá tăng dần" },
        { value: "price_desc", label: "Giá giảm dần" },
        { value: "rating", label: "Đánh giá cao nhất" },
        { value: "distance", label: "Khoảng cách gần nhất" },
      ],
    },
    {
      name: "priceRange",
      label: "Khoảng giá",
      placeholder: "Chọn khoảng giá",
      options: [
        { value: "", label: "Tất cả giá" },
        { value: "0-100", label: "Dưới 100k" },
        { value: "100-300", label: "100k - 300k" },
        { value: "300-500", label: "300k - 500k" },
        { value: "500-1000", label: "500k - 1tr" },
        { value: "1000+", label: "Trên 1tr" },
      ],
    },
  ];

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (
        openDropdown &&
        dropdownRefs.current[openDropdown] &&
        !dropdownRefs.current[openDropdown]?.contains(event.target as Node)
      ) {
        setOpenDropdown(null);
      }
    };

    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [openDropdown]);

  const toggleDropdown = (filterName: string) => {
    setOpenDropdown((prev) => (prev === filterName ? null : filterName));
  };

  const selectOption = (filterName: string, value: string) => {
    const newFilters = {
      ...activeFilters,
      [filterName]: value,
    };
    setActiveFilters(newFilters);
    setOpenDropdown(null);
    onFilter(newFilters);
  };

  const getSelectedLabel = (config: FilterConfig) => {
    if (!activeFilters[config.name]) return config.placeholder;
    const selectedOption = config.options.find(
      (opt) => opt.value === activeFilters[config.name]
    );
    return selectedOption ? selectedOption.label : config.placeholder;
  };

  const clearAllFilters = () => {
    setActiveFilters({});
    onFilter({});
  };

  const hasActiveFilters = Object.values(activeFilters).some(
    (value) => value !== ""
  );

  return (
    <div className="py-4">
      <div className="flex flex-wrap items-center gap-3">
        {filterConfigs.map((config) => (
          <div
            key={config.name}
            className="relative"
            ref={(el) => {
              dropdownRefs.current[config.name] = el;
            }}
          >
            <button
              onClick={() => toggleDropdown(config.name)}
              className={`
                flex items-center gap-2 px-4 py-2 bg-white rounded-lg border 
                hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-white/50
                transition-all duration-200 min-w-[160px] justify-between
                ${
                  activeFilters[config.name]
                    ? "border-orange-300 bg-orange-50"
                    : "border-gray-200"
                }
              `}
            >
              <span
                className={`text-sm ${
                  activeFilters[config.name]
                    ? "text-gray-900 font-medium"
                    : "text-gray-600"
                }`}
              >
                {getSelectedLabel(config)}
              </span>
              <svg
                className={`w-4 h-4 text-gray-400 transition-transform duration-200 ${
                  openDropdown === config.name ? "rotate-180" : ""
                }`}
                fill="currentColor"
                viewBox="0 0 20 20"
              >
                <path
                  fillRule="evenodd"
                  d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                  clipRule="evenodd"
                />
              </svg>
            </button>

            {openDropdown === config.name && (
              <div className="absolute z-50 w-full mt-1 bg-white border border-gray-200 rounded-lg shadow-lg max-h-60 overflow-auto">
                {config.options.map((option) => (
                  <button
                    key={option.value}
                    className="w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-gray-100 flex items-center gap-2"
                    onClick={() => selectOption(config.name, option.value)}
                  >
                    {option.icon && <span>{option.icon}</span>}
                    <span>{option.label}</span>
                  </button>
                ))}
              </div>
            )}
          </div>
        ))}

        {hasActiveFilters && (
          <button
            onClick={clearAllFilters}
            className="flex items-center gap-2 px-4 py-2 text-sm text-white bg-orange-500 hover:bg-orange-600 rounded-lg transition-colors duration-200"
          >
            <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
              <path
                fillRule="evenodd"
                d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
                clipRule="evenodd"
              />
            </svg>
            Xóa bộ lọc
          </button>
        )}
      </div>
    </div>
  );
};

export default FilterBar;

```

### components\common\GridShape.tsx
```tsx
export default function GridShape() {
  return (
    <>
      <div className="absolute right-0 top-0 -z-1 w-full max-w-[250px] xl:max-w-[450px]">
        <img src="/images/shape/grid-01.svg" alt="grid" />
      </div>
      <div className="absolute bottom-0 left-0 -z-1 w-full max-w-[250px] rotate-180 xl:max-w-[450px]">
        <img src="/images/shape/grid-01.svg" alt="grid" />
      </div>
    </>
  );
}

```

### components\common\PageBreadCrumb.tsx
```tsx
import { Link } from "react-router-dom";

interface BreadcrumbProps {
  pageTitle: string;
}

const PageBreadcrumb: React.FC<BreadcrumbProps> = ({ pageTitle }) => {
  return (
    <div className="flex flex-wrap items-center justify-between gap-3 mb-6">
      <h2
        className="text-xl font-semibold text-gray-800 dark:text-white/90"
        x-text="pageName"
      >
        {pageTitle}
      </h2>
      <nav>
        <ol className="flex items-center gap-1.5">
          <li>
            <Link
              className="inline-flex items-center gap-1.5 text-sm text-gray-500 dark:text-gray-400"
              to="/"
            >
              Home
              <svg
                className="stroke-current"
                width="17"
                height="16"
                viewBox="0 0 17 16"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M6.0765 12.667L10.2432 8.50033L6.0765 4.33366"
                  stroke=""
                  strokeWidth="1.2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                />
              </svg>
            </Link>
          </li>
          <li className="text-sm text-gray-800 dark:text-white/90">
            {pageTitle}
          </li>
        </ol>
      </nav>
    </div>
  );
};

export default PageBreadcrumb;

```

### components\common\ScrollToTop.tsx
```tsx
import { useEffect } from "react";
import { useLocation } from "react-router";

export function ScrollToTop() {
  const { pathname } = useLocation();

  useEffect(() => {
    window.scrollTo({
      top: 0,
      left: 0,
      behavior: "smooth",
    });
  }, [pathname]);

  return null;
}

```

### components\common\SearchBar.tsx
```tsx
import React, { useState, useRef, useEffect } from "react";
import { useNavigate } from "react-router-dom";

export interface SearchField {
  name: string;
  label: string;
  placeholder: string;
  type: "text" | "select" | "date";
  options?: {
    value: string;
    label: string;
    icon?: React.ReactNode;
  }[];
  width?: string;
}

interface SearchBarProps {
  fields: SearchField[];
  onSearch: (values: Record<string, string>) => void;
  buttonLabel?: string;
}

const SearchBar: React.FC<SearchBarProps> = ({
  fields,
  onSearch,
  buttonLabel = "Tìm kiếm",
}) => {
  const [values, setValues] = React.useState<Record<string, string>>({});
  const [openDropdown, setOpenDropdown] = useState<string | null>(null);
  const dropdownRefs = useRef<Record<string, HTMLDivElement | null>>({});
  const navigate = useNavigate();

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (
        openDropdown &&
        dropdownRefs.current[openDropdown] &&
        !dropdownRefs.current[openDropdown]?.contains(event.target as Node)
      ) {
        setOpenDropdown(null);
      }
    };

    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [openDropdown]);

  const handleChange = (name: string, value: string) => {
    setValues((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    navigate("/services");
    onSearch(values);
  };

  const toggleDropdown = (name: string) => {
    setOpenDropdown((prev) => (prev === name ? null : name));
  };

  const selectOption = (name: string, value: string) => {
    handleChange(name, value);
    setOpenDropdown(null);
  };

  const getSelectedLabel = (field: SearchField) => {
    if (!values[field.name]) return field.placeholder;
    const selectedOption = field.options?.find(
      (opt) => opt.value === values[field.name]
    );
    return selectedOption ? selectedOption.label : field.placeholder;
  };

  const setDropdownRef = (name: string, element: HTMLDivElement | null) => {
    dropdownRefs.current[name] = element;
  };

  return (
    <form onSubmit={handleSubmit} className="mb-6">
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5 gap-3 items-end">
        {/* Giảm gap từ gap-4 xuống gap-3 */}
        {fields.map((field) => (
          <div key={field.name} className="flex flex-col space-y-1">
            {/* Giảm space-y từ space-y-2 xuống space-y-1 */}
            <label
              htmlFor={field.name}
              className="block text-xs font-medium text-white leading-tight"
              // Giảm text từ text-sm xuống text-xs
            >
              {field.label}
            </label>
            {field.type === "select" ? (
              <div
                className="relative"
                ref={(el) => setDropdownRef(field.name, el)}
              >
                <div
                  className="w-full px-3 py-2 min-h-[36px] border border-white bg-white text-gray-900 rounded-md flex items-center justify-between cursor-pointer hover:bg-gray-50 transition-colors duration-200 text-sm"
                  // Giảm padding từ px-4 py-3 xuống px-3 py-2, min-h từ 44px xuống 36px, thêm text-sm
                  onClick={() => toggleDropdown(field.name)}
                >
                  <span
                    className={
                      values[field.name] ? "text-gray-900" : "text-gray-500"
                    }
                  >
                    {getSelectedLabel(field)}
                  </span>
                  <svg
                    className={`w-4 h-4 text-gray-400 transition-transform duration-200 ${
                      openDropdown === field.name ? "rotate-180" : ""
                    }`}
                    // Giảm kích thước icon từ w-5 h-5 xuống w-4 h-4
                    fill="currentColor"
                    viewBox="0 0 20 20"
                  >
                    <path
                      fillRule="evenodd"
                      d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                      clipRule="evenodd"
                    />
                  </svg>
                </div>
                {openDropdown === field.name && (
                  <div className="absolute z-50 w-full mt-1 bg-white border border-gray-200 rounded-md shadow-lg max-h-48 overflow-auto">
                    {/* Giảm max-h từ max-h-60 xuống max-h-48 */}
                    <div
                      className="px-3 py-1.5 text-gray-500 cursor-pointer hover:bg-gray-100 transition-colors duration-150 text-sm"
                      // Giảm padding từ px-4 py-2 xuống px-3 py-1.5, thêm text-sm
                      onClick={() => selectOption(field.name, "")}
                    >
                      {field.placeholder}
                    </div>
                    {field.options?.map((option) => (
                      <div
                        key={option.value}
                        className="px-3 py-1.5 cursor-pointer hover:bg-gray-100 flex items-center text-gray-900 transition-colors duration-150 text-sm"
                        // Giảm padding từ px-4 py-2 xuống px-3 py-1.5, thêm text-sm
                        onClick={() => selectOption(field.name, option.value)}
                      >
                        {option.icon && (
                          <span className="mr-2 text-sm">{option.icon}</span>
                          // Thêm text-sm cho icon
                        )}
                        <span>{option.label}</span>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            ) : field.type === "date" ? (
              <input
                id={field.name}
                type="date"
                name={field.name}
                className="w-full px-3 py-2 min-h-[36px] bg-white text-gray-900 border border-white rounded-md focus:outline-none focus:ring-2 focus:ring-white focus:border-white transition-all duration-200 text-sm"
                // Giảm padding từ px-4 py-3 xuống px-3 py-2, min-h từ 44px xuống 36px, thêm text-sm
                value={values[field.name] || ""}
                onChange={(e) => handleChange(field.name, e.target.value)}
              />
            ) : (
              <input
                id={field.name}
                type="text"
                name={field.name}
                placeholder={field.placeholder}
                className="w-full px-3 py-2 min-h-[36px] bg-white text-gray-900 border border-white rounded-md focus:outline-none focus:ring-2 focus:ring-white focus:border-white placeholder:text-gray-500 transition-all duration-200 text-sm"
                // Giảm padding từ px-4 py-3 xuống px-3 py-2, min-h từ 44px xuống 36px, thêm text-sm
                value={values[field.name] || ""}
                onChange={(e) => handleChange(field.name, e.target.value)}
              />
            )}
          </div>
        ))}
        {/* Button container */}
        <div className="flex flex-col space-y-1">
          {/* Giảm space-y từ space-y-2 xuống space-y-1 */}
          <div className="text-xs font-medium text-transparent leading-tight select-none">
            {/* Giảm text từ text-sm xuống text-xs */}
            &nbsp;
          </div>
          <button
            type="submit"
            className="flex items-center justify-center gap-2 px-4 py-2 min-h-[36px] bg-white text-[#2A9D8F] font-semibold rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-white/50 active:bg-gray-100 transition-all duration-200 whitespace-nowrap shadow-sm hover:shadow-md text-sm"
          >
            {buttonLabel}
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="w-5 h-5"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path d="M3 4a1 1 0 011-1h16a1 1 0 01.8 1.6L15 12.5V19a1 1 0 01-1.447.894l-4-2A1 1 0 019 17v-4.5L3.2 5.6A1 1 0 013 4z" />
            </svg>
          </button>
        </div>
      </div>
    </form>
  );
};

export default SearchBar;

```

### components\form\date-picker.tsx
```tsx
// import { useEffect } from "react";
// import flatpickr from "flatpickr";
// import "flatpickr/dist/flatpickr.css";
// import Label from "./Label";
// import { CalenderIcon } from "@/components";
// import Hook = flatpickr.Options.Hook;
// import DateOption = flatpickr.Options.DateOption;

// type PropsType = {
//   id: string;
//   mode?: "single" | "multiple" | "range" | "time";
//   onChange?: Hook | Hook[];
//   defaultDate?: DateOption;
//   label?: string;
//   placeholder?: string;
// };

// export default function DatePicker({
//   id,
//   mode,
//   onChange,
//   label,
//   defaultDate,
//   placeholder,
// }: PropsType) {
//   useEffect(() => {
//     const flatPickr = flatpickr(`#${id}`, {
//       mode: mode || "single",
//       static: true,
//       monthSelectorType: "static",
//       dateFormat: "Y-m-d",
//       defaultDate,
//       onChange,
//     });

//     return () => {
//       if (!Array.isArray(flatPickr)) {
//         flatPickr.destroy();
//       }
//     };
//   }, [mode, onChange, id, defaultDate]);

//   return (
//     <div>
//       {label && <Label htmlFor={id}>{label}</Label>}

//       <div className="relative">
//         <input
//           id={id}
//           placeholder={placeholder}
//           className="h-11 w-full rounded-lg border appearance-none px-4 py-2.5 text-sm shadow-theme-xs placeholder:text-gray-400 focus:outline-hidden focus:ring-3  dark:bg-gray-900 dark:text-white/90 dark:placeholder:text-white/30  bg-transparent text-gray-800 border-gray-300 focus:border-brand-300 focus:ring-brand-500/20 dark:border-gray-700  dark:focus:border-brand-800"
//         />

//         <span className="absolute text-gray-500 -translate-y-1/2 pointer-events-none right-3 top-1/2 dark:text-gray-400">
//           <CalenderIcon className="size-6" />
//         </span>
//       </div>
//     </div>
//   );
// }

```

### components\form\Form.tsx
```tsx
import type { FC, FormEvent, ReactNode } from "react";

interface FormProps {
  onSubmit: (event: FormEvent<HTMLFormElement>) => void;
  children: ReactNode;
  className?: string;
}

const Form: FC<FormProps> = ({ onSubmit, children, className }) => {
  return (
    <form
      onSubmit={(event) => {
        event.preventDefault(); // Prevent default form submission
        onSubmit(event);
      }}
      className={` ${className}`} // Default spacing between form fields
    >
      {children}
    </form>
  );
};

export default Form;

```

### components\form\Label.tsx
```tsx
import { type FC, type ReactNode } from "react";
import { twMerge } from "tailwind-merge";
import { clsx } from "clsx";

interface LabelProps {
  children: ReactNode;
  htmlFor?: string;
  className?: string;
}

const Label: FC<LabelProps> = ({ children, htmlFor, className }) => {
  return (
    <label
      htmlFor={htmlFor}
      className={twMerge(
        clsx("block text-sm font-medium text-gray-700", className)
      )}
    >
      {children}
    </label>
  );
};

export default Label;

```

### components\form\MultiSelect.tsx
```tsx
import type React from "react";
import { useState } from "react";

interface Option {
  value: string;
  text: string;
}

interface MultiSelectProps {
  label: string;
  options: Option[];
  defaultSelected?: string[];
  onChange?: (selected: string[]) => void;
  disabled?: boolean;
}

const MultiSelect: React.FC<MultiSelectProps> = ({
  label,
  options,
  defaultSelected = [],
  onChange,
  disabled = false,
}) => {
  const [selectedOptions, setSelectedOptions] =
    useState<string[]>(defaultSelected);
  const [isOpen, setIsOpen] = useState(false);

  const toggleDropdown = () => {
    if (!disabled) setIsOpen((prev) => !prev);
  };

  const handleSelect = (optionValue: string) => {
    const newSelectedOptions = selectedOptions.includes(optionValue)
      ? selectedOptions.filter((value) => value !== optionValue)
      : [...selectedOptions, optionValue];

    setSelectedOptions(newSelectedOptions);
    onChange?.(newSelectedOptions);
  };

  const removeOption = (value: string) => {
    const newSelectedOptions = selectedOptions.filter((opt) => opt !== value);
    setSelectedOptions(newSelectedOptions);
    onChange?.(newSelectedOptions);
  };

  const selectedValuesText = selectedOptions.map(
    (value) => options.find((option) => option.value === value)?.text || ""
  );

  return (
    <div className="w-full">
      <label className="mb-1.5 block text-sm font-medium text-gray-700 dark:text-gray-400">
        {label}
      </label>

      <div className="relative z-20 inline-block w-full">
        <div className="relative flex flex-col items-center">
          <div onClick={toggleDropdown} className="w-full">
            <div className="mb-2 flex h-11 rounded-lg border border-gray-300 py-1.5 pl-3 pr-3 shadow-theme-xs outline-hidden transition focus:border-brand-300 focus:shadow-focus-ring dark:border-gray-700 dark:bg-gray-900 dark:focus:border-brand-300">
              <div className="flex flex-wrap flex-auto gap-2">
                {selectedValuesText.length > 0 ? (
                  selectedValuesText.map((text, index) => (
                    <div
                      key={index}
                      className="group flex items-center justify-center rounded-full border-[0.7px] border-transparent bg-gray-100 py-1 pl-2.5 pr-2 text-sm text-gray-800 hover:border-gray-200 dark:bg-gray-800 dark:text-white/90 dark:hover:border-gray-800"
                    >
                      <span className="flex-initial max-w-full">{text}</span>
                      <div className="flex flex-row-reverse flex-auto">
                        <div
                          onClick={(e) => {
                            e.stopPropagation();
                            removeOption(selectedOptions[index]);
                          }}
                          className="pl-2 text-gray-500 cursor-pointer group-hover:text-gray-400 dark:text-gray-400"
                        >
                          <svg
                            className="fill-current"
                            role="button"
                            width="14"
                            height="14"
                            viewBox="0 0 14 14"
                            xmlns="http://www.w3.org/2000/svg"
                          >
                            <path
                              fillRule="evenodd"
                              clipRule="evenodd"
                              d="M3.40717 4.46881C3.11428 4.17591 3.11428 3.70104 3.40717 3.40815C3.70006 3.11525 4.17494 3.11525 4.46783 3.40815L6.99943 5.93975L9.53095 3.40822C9.82385 3.11533 10.2987 3.11533 10.5916 3.40822C10.8845 3.70112 10.8845 4.17599 10.5916 4.46888L8.06009 7.00041L10.5916 9.53193C10.8845 9.82482 10.8845 10.2997 10.5916 10.5926C10.2987 10.8855 9.82385 10.8855 9.53095 10.5926L6.99943 8.06107L4.46783 10.5927C4.17494 10.8856 3.70006 10.8856 3.40717 10.5927C3.11428 10.2998 3.11428 9.8249 3.40717 9.53201L5.93877 7.00041L3.40717 4.46881Z"
                            />
                          </svg>
                        </div>
                      </div>
                    </div>
                  ))
                ) : (
                  <input
                    placeholder="Select option"
                    className="w-full h-full p-1 pr-2 text-sm bg-transparent border-0 outline-hidden appearance-none placeholder:text-gray-800 focus:border-0 focus:outline-hidden focus:ring-0 dark:placeholder:text-white/90"
                    readOnly
                    value="Select option"
                  />
                )}
              </div>
              <div className="flex items-center py-1 pl-1 pr-1 w-7">
                <button
                  type="button"
                  onClick={toggleDropdown}
                  className="w-5 h-5 text-gray-700 outline-hidden cursor-pointer focus:outline-hidden dark:text-gray-400"
                >
                  <svg
                    className={`stroke-current ${isOpen ? "rotate-180" : ""}`}
                    width="20"
                    height="20"
                    viewBox="0 0 20 20"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M4.79175 7.39551L10.0001 12.6038L15.2084 7.39551"
                      stroke="currentColor"
                      strokeWidth="1.5"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                    />
                  </svg>
                </button>
              </div>
            </div>
          </div>

          {isOpen && (
            <div
              className="absolute left-0 z-40 w-full overflow-y-auto bg-white rounded-lg shadow-sm top-full max-h-select dark:bg-gray-900"
              onClick={(e) => e.stopPropagation()}
            >
              <div className="flex flex-col">
                {options.map((option, index) => (
                  <div
                    key={index}
                    className={`hover:bg-primary/5 w-full cursor-pointer rounded-t border-b border-gray-200 dark:border-gray-800`}
                    onClick={() => handleSelect(option.value)}
                  >
                    <div
                      className={`relative flex w-full items-center p-2 pl-2 ${
                        selectedOptions.includes(option.value)
                          ? "bg-primary/10"
                          : ""
                      }`}
                    >
                      <div className="mx-2 leading-6 text-gray-800 dark:text-white/90">
                        {option.text}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default MultiSelect;

```

### components\form\Select.tsx
```tsx
import { useState } from "react";

interface Option {
  value: string;
  label: string;
}

interface SelectProps {
  options: Option[];
  placeholder?: string;
  onChange: (value: string) => void;
  className?: string;
  defaultValue?: string;
}

const Select: React.FC<SelectProps> = ({
  options,
  placeholder = "Select an option",
  onChange,
  className = "",
  defaultValue = "",
}) => {
  // Manage the selected value
  const [selectedValue, setSelectedValue] = useState<string>(defaultValue);

  const handleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const value = e.target.value;
    setSelectedValue(value);
    onChange(value); // Trigger parent handler
  };

  return (
    <select
      className={`h-11 w-full appearance-none rounded-lg border border-gray-300 bg-transparent px-4 py-2.5 pr-11 text-sm shadow-theme-xs placeholder:text-gray-400 focus:border-brand-300 focus:outline-hidden focus:ring-3 focus:ring-brand-500/10 dark:border-gray-700 dark:bg-gray-900 dark:text-white/90 dark:placeholder:text-white/30 dark:focus:border-brand-800 ${
        selectedValue
          ? "text-gray-800 dark:text-white/90"
          : "text-gray-400 dark:text-gray-400"
      } ${className}`}
      value={selectedValue}
      onChange={handleChange}
    >
      {/* Placeholder option */}
      <option
        value=""
        disabled
        className="text-gray-700 dark:bg-gray-900 dark:text-gray-400"
      >
        {placeholder}
      </option>
      {/* Map over options */}
      {options.map((option) => (
        <option
          key={option.value}
          value={option.value}
          className="text-gray-700 dark:bg-gray-900 dark:text-gray-400"
        >
          {option.label}
        </option>
      ))}
    </select>
  );
};

export default Select;

```

### components\form\form-elements\CheckboxComponents.tsx
```tsx
import { useState } from "react";
import ComponentCard from "@/components/ui/Card";
import Checkbox from "../input/Checkbox";

export default function CheckboxComponents() {
  const [isChecked, setIsChecked] = useState(false);
  const [isCheckedTwo, setIsCheckedTwo] = useState(true);
  const [isCheckedDisabled, setIsCheckedDisabled] = useState(false);
  return (
    <ComponentCard title="Checkbox">
      <div className="flex items-center gap-4">
        <div className="flex items-center gap-3">
          <Checkbox checked={isChecked} onChange={setIsChecked} />
          <span className="block text-sm font-medium text-gray-700 dark:text-gray-400">
            Default
          </span>
        </div>
        <div className="flex items-center gap-3">
          <Checkbox
            checked={isCheckedTwo}
            onChange={setIsCheckedTwo}
            label="Checked"
          />
        </div>
        <div className="flex items-center gap-3">
          <Checkbox
            checked={isCheckedDisabled}
            onChange={setIsCheckedDisabled}
            disabled
            label="Disabled"
          />
        </div>
      </div>
    </ComponentCard>
  );
}

```

### components\form\form-elements\DefaultInputs.tsx
```tsx
import React from "react";
import ComponentCard from "@/components/ui/Card";
import flatpickr from "flatpickr";
import "flatpickr/dist/flatpickr.min.css";

const DefaultInputs: React.FC = () => {
  const handleDateChange = (dates: Date[], currentDateString: string) => {
    console.log(dates, currentDateString);
  };

  return (
    <ComponentCard
      title="Default Inputs"
      desc="Input components with various styles"
    >
      <div className="space-y-4">
        {/* Date Picker Example */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Date Picker
          </label>
          <input
            type="text"
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="Select date"
            ref={(input) => {
              if (input) {
                flatpickr(input, {
                  onChange: handleDateChange,
                  dateFormat: "Y-m-d",
                });
              }
            }}
          />
        </div>
      </div>
    </ComponentCard>
  );
};

export default DefaultInputs;

```

### components\form\form-elements\DropZone.tsx
```tsx
import React, { useState } from "react";
import ComponentCard from "@/components/ui/Card";
import { useDropzone } from "react-dropzone";

interface FileWithPreview extends File {
  preview: string;
}

const DropZone: React.FC = () => {
  const [files, setFiles] = useState<FileWithPreview[]>([]);

  const { getRootProps, getInputProps } = useDropzone({
    accept: {
      "image/*": [],
    },
    onDrop: (acceptedFiles: File[]) => {
      setFiles(
        acceptedFiles.map((file) =>
          Object.assign(file, {
            preview: URL.createObjectURL(file),
          })
        )
      );
    },
  });

  const thumbs = files.map((file) => (
    <div
      key={file.name}
      className="inline-flex rounded-md border border-gray-200 mb-2 mr-2 w-24 h-24 p-1"
    >
      <div className="flex min-w-0 overflow-hidden">
        <img
          src={file.preview}
          className="block w-auto h-full"
          onLoad={() => {
            URL.revokeObjectURL(file.preview);
          }}
          alt="Preview"
        />
      </div>
    </div>
  ));

  React.useEffect(() => {
    return () => files.forEach((file) => URL.revokeObjectURL(file.preview));
  }, [files]);

  return (
    <ComponentCard title="Drop Zone" desc="Drag and drop file upload">
      <div>
        <div
          {...getRootProps({
            className:
              "dropzone border-2 border-dashed border-gray-300 rounded-lg p-6 text-center cursor-pointer hover:border-gray-400",
          })}
        >
          <input {...getInputProps()} />
          <p>Drag 'n' drop some files here, or click to select files</p>
        </div>
        <aside className="flex flex-wrap mt-4">{thumbs}</aside>
      </div>
    </ComponentCard>
  );
};

export default DropZone;

```

### components\form\form-elements\FileInputExample.tsx
```tsx
import ComponentCard from "@/components/ui/Card";
import FileInput from "../input/FileInput";
import Label from "../Label";

export default function FileInputExample() {
  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      console.log("Selected file:", file.name);
    }
  };

  return (
    <ComponentCard title="File Input">
      <div>
        <Label>Upload file</Label>
        <FileInput onChange={handleFileChange} className="custom-class" />
      </div>
    </ComponentCard>
  );
}

```

### components\form\form-elements\InputGroup.tsx
```tsx
import ComponentCard from "@/components/ui/Card";
import Label from "../Label";
import Input from "../input/InputField";
import { EnvelopeIcon } from "@/components/icons/";
import PhoneInput from "../group-input/PhoneInput";

export default function InputGroup() {
  const countries = [
    { code: "US", label: "+1" },
    { code: "GB", label: "+44" },
    { code: "CA", label: "+1" },
    { code: "AU", label: "+61" },
  ];
  const handlePhoneNumberChange = (phoneNumber: string) => {
    console.log("Updated phone number:", phoneNumber);
  };
  return (
    <ComponentCard title="Input Group">
      <div className="space-y-6">
        <div>
          <Label>Email</Label>
          <div className="relative">
            <Input
              placeholder="info@gmail.com"
              type="text"
              className="pl-[62px]"
            />
            <span className="absolute left-0 top-1/2 -translate-y-1/2 border-r border-gray-200 px-3.5 py-3 text-gray-500 dark:border-gray-800 dark:text-gray-400">
              <EnvelopeIcon className="size-6" />
            </span>
          </div>
        </div>
        <div>
          <Label>Phone</Label>
          <PhoneInput
            selectPosition="start"
            countries={countries}
            placeholder="+1 (555) 000-0000"
            onChange={handlePhoneNumberChange}
          />
        </div>{" "}
        <div>
          <Label>Phone</Label>
          <PhoneInput
            selectPosition="end"
            countries={countries}
            placeholder="+1 (555) 000-0000"
            onChange={handlePhoneNumberChange}
          />
        </div>
      </div>
    </ComponentCard>
  );
}

```

### components\form\form-elements\InputStates.tsx
```tsx
import { useState } from "react";
import ComponentCard from "@/components/ui/Card";
import Input from "../input/InputField";
import Label from "../Label";
export default function InputStates() {
  const [email, setEmail] = useState("");
  const [emailTwo, setEmailTwo] = useState("");
  const [error, setError] = useState(false);

  // Simulate a validation check
  const validateEmail = (value: string) => {
    const isValidEmail =
      /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test(value);
    setError(!isValidEmail);
    return isValidEmail;
  };

  const handleEmailChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setEmail(value);
    validateEmail(value);
  };
  const handleEmailTwoChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setEmailTwo(value);
    validateEmail(value);
  };
  return (
    <ComponentCard
      title="Input States"
      desc="Validation styles for error, success and disabled states on form controls."
    >
      <div className="space-y-5 sm:space-y-6">
        {/* Error Input */}
        <div>
          <Label>Email</Label>
          <Input
            type="email"
            value={email}
            error={error}
            onChange={handleEmailChange}
            placeholder="Enter your email"
            hint={error ? "This is an invalid email address." : ""}
          />
        </div>

        {/* Success Input */}
        <div>
          <Label>Email</Label>
          <Input
            type="email"
            value={emailTwo}
            success={!error}
            onChange={handleEmailTwoChange}
            placeholder="Enter your email"
            hint={!error ? "This is an success message." : ""}
          />
        </div>

        {/* Disabled Input */}
        <div>
          <Label>Email</Label>
          <Input
            type="text"
            value="disabled@example.com"
            disabled={true}
            placeholder="Disabled email"
          />
        </div>
      </div>
    </ComponentCard>
  );
}

```

### components\form\form-elements\RadioButtons.tsx
```tsx
import { useState } from "react";
import ComponentCard from "@/components/ui/Card";
import Radio from "../input/Radio";

export default function RadioButtons() {
  const [selectedValue, setSelectedValue] = useState<string>("option2");

  const handleRadioChange = (value: string) => {
    setSelectedValue(value);
  };
  return (
    <ComponentCard title="Radio Buttons">
      <div className="flex flex-wrap items-center gap-8">
        <Radio
          id="radio1"
          name="group1"
          value="option1"
          checked={selectedValue === "option1"}
          onChange={handleRadioChange}
          label="Default"
        />
        <Radio
          id="radio2"
          name="group1"
          value="option2"
          checked={selectedValue === "option2"}
          onChange={handleRadioChange}
          label="Selected"
        />
        <Radio
          id="radio3"
          name="group1"
          value="option3"
          checked={selectedValue === "option3"}
          onChange={handleRadioChange}
          label="Disabled"
          disabled={true}
        />
      </div>
    </ComponentCard>
  );
}

```

### components\form\form-elements\SelectInputs.tsx
```tsx
import { useState } from "react";
import ComponentCard from "@/components/ui/Card";
import Label from "../Label";
import Select from "../Select";
import MultiSelect from "../MultiSelect";

export default function SelectInputs() {
  const options = [
    { value: "marketing", label: "Marketing" },
    { value: "template", label: "Template" },
    { value: "development", label: "Development" },
  ];
  const handleSelectChange = (value: string) => {
    console.log("Selected value:", value);
  };
  const [selectedValues, setSelectedValues] = useState<string[]>([]);

  const multiOptions = [
    { value: "1", text: "Option 1", selected: false },
    { value: "2", text: "Option 2", selected: false },
    { value: "3", text: "Option 3", selected: false },
    { value: "4", text: "Option 4", selected: false },
    { value: "5", text: "Option 5", selected: false },
  ];
  return (
    <ComponentCard title="Select Inputs">
      <div className="space-y-6">
        <div>
          <Label>Select Input</Label>
          <Select
            options={options}
            placeholder="Select Option"
            onChange={handleSelectChange}
            className="dark:bg-dark-900"
          />
        </div>
        <div>
          <MultiSelect
            label="Multiple Select Options"
            options={multiOptions}
            defaultSelected={["1", "3"]}
            onChange={(values) => setSelectedValues(values)}
          />
          <p className="sr-only">
            Selected Values: {selectedValues.join(", ")}
          </p>
        </div>
      </div>
    </ComponentCard>
  );
}

```

### components\form\form-elements\TextAreaInput.tsx
```tsx
import { useState } from "react";
import ComponentCard from "@/components/ui/Card";
import TextArea from "../input/TextArea";
import Label from "../Label";

export default function TextAreaInput() {
  const [message, setMessage] = useState("");
  const [messageTwo, setMessageTwo] = useState("");
  return (
    <ComponentCard title="Textarea input field">
      <div className="space-y-6">
        {/* Default TextArea */}
        <div>
          <Label>Description</Label>
          <TextArea
            value={message}
            onChange={(value) => setMessage(value)}
            rows={6}
          />
        </div>

        {/* Disabled TextArea */}
        <div>
          <Label>Description</Label>
          <TextArea rows={6} disabled />
        </div>

        {/* Error TextArea */}
        <div>
          <Label>Description</Label>
          <TextArea
            rows={6}
            value={messageTwo}
            error
            onChange={(value) => setMessageTwo(value)}
            hint="Please enter a valid message."
          />
        </div>
      </div>
    </ComponentCard>
  );
}

```

### components\form\form-elements\ToggleSwitch.tsx
```tsx
import ComponentCard from "@/components/ui/Card";
import Switch from "../switch/Switch";

export default function ToggleSwitch() {
  const handleSwitchChange = (checked: boolean) => {
    console.log("Switch is now:", checked ? "ON" : "OFF");
  };
  return (
    <ComponentCard title="Toggle switch input">
      <div className="flex gap-4">
        <Switch
          label="Default"
          defaultChecked={true}
          onChange={handleSwitchChange}
        />
        <Switch
          label="Checked"
          defaultChecked={true}
          onChange={handleSwitchChange}
        />
        <Switch label="Disabled" disabled={true} />
      </div>{" "}
      <div className="flex gap-4">
        <Switch
          label="Default"
          defaultChecked={true}
          onChange={handleSwitchChange}
          color="gray"
        />
        <Switch
          label="Checked"
          defaultChecked={true}
          onChange={handleSwitchChange}
          color="gray"
        />
        <Switch label="Disabled" disabled={true} color="gray" />
      </div>
    </ComponentCard>
  );
}

```

### components\form\group-input\PhoneInput.tsx
```tsx
import { useState } from "react";

interface CountryCode {
  code: string;
  label: string;
}

interface PhoneInputProps {
  countries: CountryCode[];
  placeholder?: string;
  onChange?: (phoneNumber: string) => void;
  selectPosition?: "start" | "end"; // New prop for dropdown position
}

const PhoneInput: React.FC<PhoneInputProps> = ({
  countries,
  placeholder = "+1 (555) 000-0000",
  onChange,
  selectPosition = "start", // Default position is 'start'
}) => {
  const [selectedCountry, setSelectedCountry] = useState<string>("US");
  const [phoneNumber, setPhoneNumber] = useState<string>("+1");

  const countryCodes: Record<string, string> = countries.reduce(
    (acc, { code, label }) => ({ ...acc, [code]: label }),
    {}
  );

  const handleCountryChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const newCountry = e.target.value;
    setSelectedCountry(newCountry);
    setPhoneNumber(countryCodes[newCountry]);
    if (onChange) {
      onChange(countryCodes[newCountry]);
    }
  };

  const handlePhoneNumberChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newPhoneNumber = e.target.value;
    setPhoneNumber(newPhoneNumber);
    if (onChange) {
      onChange(newPhoneNumber);
    }
  };

  return (
    <div className="relative flex">
      {/* Dropdown position: Start */}
      {selectPosition === "start" && (
        <div className="absolute">
          <select
            value={selectedCountry}
            onChange={handleCountryChange}
            className="appearance-none bg-none rounded-l-lg border-0 border-r border-gray-200 bg-transparent py-3 pl-3.5 pr-8 leading-tight text-gray-700 focus:border-brand-300 focus:outline-hidden focus:ring-3 focus:ring-brand-500/10 dark:border-gray-800 dark:text-gray-400"
          >
            {countries.map((country) => (
              <option
                key={country.code}
                value={country.code}
                className="text-gray-700 dark:bg-gray-900 dark:text-gray-400"
              >
                {country.code}
              </option>
            ))}
          </select>
          <div className="absolute inset-y-0 flex items-center text-gray-700 pointer-events-none bg-none right-3 dark:text-gray-400">
            <svg
              className="stroke-current"
              width="20"
              height="20"
              viewBox="0 0 20 20"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M4.79175 7.396L10.0001 12.6043L15.2084 7.396"
                stroke="currentColor"
                strokeWidth="1.5"
                strokeLinecap="round"
                strokeLinejoin="round"
              />
            </svg>
          </div>
        </div>
      )}

      {/* Input field */}
      <input
        type="tel"
        value={phoneNumber}
        onChange={handlePhoneNumberChange}
        placeholder={placeholder}
        className={`dark:bg-dark-900 h-11 w-full ${
          selectPosition === "start" ? "pl-[84px]" : "pr-[84px]"
        } rounded-lg border border-gray-300 bg-transparent py-3 px-4 text-sm text-gray-800 shadow-theme-xs placeholder:text-gray-400 focus:border-brand-300 focus:outline-hidden focus:ring-3 focus:ring-brand-500/10 dark:border-gray-700 dark:bg-gray-900 dark:text-white/90 dark:placeholder:text-white/30 dark:focus:border-brand-800`}
      />

      {/* Dropdown position: End */}
      {selectPosition === "end" && (
        <div className="absolute right-0">
          <select
            value={selectedCountry}
            onChange={handleCountryChange}
            className="appearance-none bg-none rounded-r-lg border-0 border-l border-gray-200 bg-transparent py-3 pl-3.5 pr-8 leading-tight text-gray-700 focus:border-brand-300 focus:outline-hidden focus:ring-3 focus:ring-brand-500/10 dark:border-gray-800 dark:text-gray-400"
          >
            {countries.map((country) => (
              <option
                key={country.code}
                value={country.code}
                className="text-gray-700 dark:bg-gray-900 dark:text-gray-400"
              >
                {country.code}
              </option>
            ))}
          </select>
          <div className="absolute inset-y-0 flex items-center text-gray-700 pointer-events-none right-3 dark:text-gray-400">
            <svg
              className="stroke-current"
              width="20"
              height="20"
              viewBox="0 0 20 20"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M4.79175 7.396L10.0001 12.6043L15.2084 7.396"
                stroke="currentColor"
                strokeWidth="1.5"
                strokeLinecap="round"
                strokeLinejoin="round"
              />
            </svg>
          </div>
        </div>
      )}
    </div>
  );
};

export default PhoneInput;

```

### components\form\input\Checkbox.tsx
```tsx
import type React from "react";

interface CheckboxProps {
  label?: string;
  checked: boolean;
  className?: string;
  id?: string;
  onChange: (checked: boolean) => void;
  disabled?: boolean;
}

const Checkbox: React.FC<CheckboxProps> = ({
  label,
  checked,
  id,
  onChange,
  className = "",
  disabled = false,
}) => {
  return (
    <label
      className={`flex items-center space-x-3 group cursor-pointer ${
        disabled ? "cursor-not-allowed opacity-60" : ""
      }`}
    >
      <div className="relative w-5 h-5">
        <input
          id={id}
          type="checkbox"
          className={`w-5 h-5 appearance-none cursor-pointer dark:border-gray-700 border border-gray-300 checked:border-transparent rounded-md checked:bg-brand-500 disabled:opacity-60 
          ${className}`}
          checked={checked}
          onChange={(e) => onChange(e.target.checked)}
          disabled={disabled}
        />
        {checked && (
          <svg
            className="absolute transform -translate-x-1/2 -translate-y-1/2 pointer-events-none top-1/2 left-1/2"
            xmlns="http://www.w3.org/2000/svg"
            width="14"
            height="14"
            viewBox="0 0 14 14"
            fill="none"
          >
            <path
              d="M11.6666 3.5L5.24992 9.91667L2.33325 7"
              stroke="white"
              strokeWidth="1.94437"
              strokeLinecap="round"
              strokeLinejoin="round"
            />
          </svg>
        )}
        {disabled && (
          <svg
            className="absolute transform -translate-x-1/2 -translate-y-1/2 pointer-events-none top-1/2 left-1/2"
            xmlns="http://www.w3.org/2000/svg"
            width="14"
            height="14"
            viewBox="0 0 14 14"
            fill="none"
          >
            <path
              d="M11.6666 3.5L5.24992 9.91667L2.33325 7"
              stroke="#E4E7EC"
              strokeWidth="2.33333"
              strokeLinecap="round"
              strokeLinejoin="round"
            />
          </svg>
        )}
      </div>
      {label && (
        <span className="text-sm font-medium text-gray-800 dark:text-gray-200">
          {label}
        </span>
      )}
    </label>
  );
};

export default Checkbox;

```

### components\form\input\FileInput.tsx
```tsx
import type { FC } from "react";

interface FileInputProps {
  className?: string;
  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;
}

const FileInput: FC<FileInputProps> = ({ className, onChange }) => {
  return (
    <input
      type="file"
      className={`focus:border-ring-brand-300 h-11 w-full overflow-hidden rounded-lg border border-gray-300 bg-transparent text-sm text-gray-500 shadow-theme-xs transition-colors file:mr-5 file:border-collapse file:cursor-pointer file:rounded-l-lg file:border-0 file:border-r file:border-solid file:border-gray-200 file:bg-gray-50 file:py-3 file:pl-3.5 file:pr-3 file:text-sm file:text-gray-700 placeholder:text-gray-400 hover:file:bg-gray-100 focus:outline-hidden focus:file:ring-brand-300 dark:border-gray-700 dark:bg-gray-900 dark:text-gray-400 dark:text-white/90 dark:file:border-gray-800 dark:file:bg-white/[0.03] dark:file:text-gray-400 dark:placeholder:text-gray-400 ${className}`}
      onChange={onChange}
    />
  );
};

export default FileInput;

```

### components\form\input\InputField.tsx
```tsx
import type React from "react";
import type { FC } from "react";

interface InputProps {
  type?: "text" | "number" | "email" | "password" | "date" | "time" | string;
  id?: string;
  name?: string;
  placeholder?: string;
  value?: string | number;
  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;
  className?: string;
  min?: string;
  max?: string;
  step?: number;
  disabled?: boolean;
  success?: boolean;
  error?: boolean;
  hint?: string;
}

const Input: FC<InputProps> = ({
  type = "text",
  id,
  name,
  placeholder,
  value,
  onChange,
  className = "",
  min,
  max,
  step,
  disabled = false,
  success = false,
  error = false,
  hint,
}) => {
  let inputClasses = ` h-11 w-full rounded-lg border appearance-none px-4 py-2.5 text-sm shadow-theme-xs placeholder:text-gray-400 focus:outline-hidden focus:ring-3  dark:bg-gray-900 dark:text-white/90 dark:placeholder:text-white/30 ${className}`;

  if (disabled) {
    inputClasses += ` text-gray-500 border-gray-300 opacity-40 bg-gray-100 cursor-not-allowed dark:bg-gray-800 dark:text-gray-400 dark:border-gray-700 opacity-40`;
  } else if (error) {
    inputClasses += `  border-error-500 focus:border-error-300 focus:ring-error-500/20 dark:text-error-400 dark:border-error-500 dark:focus:border-error-800`;
  } else if (success) {
    inputClasses += `  border-success-500 focus:border-success-300 focus:ring-success-500/20 dark:text-success-400 dark:border-success-500 dark:focus:border-success-800`;
  } else {
    inputClasses += ` bg-transparent text-gray-800 border-gray-300 focus:border-brand-300 focus:ring-brand-500/20 dark:border-gray-700 dark:text-white/90  dark:focus:border-brand-800`;
  }

  return (
    <div className="relative">
      <input
        type={type}
        id={id}
        name={name}
        placeholder={placeholder}
        value={value}
        onChange={onChange}
        min={min}
        max={max}
        step={step}
        disabled={disabled}
        className={inputClasses}
      />

      {hint && (
        <p
          className={`mt-1.5 text-xs ${
            error
              ? "text-error-500"
              : success
              ? "text-success-500"
              : "text-gray-500"
          }`}
        >
          {hint}
        </p>
      )}
    </div>
  );
};

export default Input;

```

### components\form\input\Radio.tsx
```tsx
interface RadioProps {
  id: string; // Unique ID for the radio button
  name: string; // Radio group name
  value: string; // Value of the radio button
  checked: boolean; // Whether the radio button is checked
  label: string; // Label for the radio button
  onChange: (value: string) => void; // Handler for value change
  className?: string; // Optional additional classes
  disabled?: boolean; // Optional disabled state for the radio button
}

const Radio: React.FC<RadioProps> = ({
  id,
  name,
  value,
  checked,
  label,
  onChange,
  className = "",
  disabled = false,
}) => {
  return (
    <label
      htmlFor={id}
      className={`relative flex cursor-pointer  select-none items-center gap-3 text-sm font-medium ${
        disabled
          ? "text-gray-300 dark:text-gray-600 cursor-not-allowed"
          : "text-gray-700 dark:text-gray-400"
      } ${className}`}
    >
      <input
        id={id}
        name={name}
        type="radio"
        value={value}
        checked={checked}
        onChange={() => !disabled && onChange(value)} // Prevent onChange when disabled
        className="sr-only"
        disabled={disabled} // Disable input
      />
      <span
        className={`flex h-5 w-5 items-center justify-center rounded-full border-[1.25px] ${
          checked
            ? "border-brand-500 bg-brand-500"
            : "bg-transparent border-gray-300 dark:border-gray-700"
        } ${
          disabled
            ? "bg-gray-100 dark:bg-gray-700 border-gray-200 dark:border-gray-700"
            : ""
        }`}
      >
        <span
          className={`h-2 w-2 rounded-full bg-white ${
            checked ? "block" : "hidden"
          }`}
        ></span>
      </span>
      {label}
    </label>
  );
};

export default Radio;

```

### components\form\input\RadioSm.tsx
```tsx
interface RadioProps {
  id: string; // Unique ID for the radio button
  name: string; // Group name for the radio button
  value: string; // Value of the radio button
  checked: boolean; // Whether the radio button is checked
  label: string; // Label text for the radio button
  onChange: (value: string) => void; // Handler for when the radio button is toggled
  className?: string; // Optional custom classes for styling
}

const RadioSm: React.FC<RadioProps> = ({
  id,
  name,
  value,
  checked,
  label,
  onChange,
  className = "",
}) => {
  return (
    <label
      htmlFor={id}
      className={`flex cursor-pointer select-none items-center text-sm text-gray-500 dark:text-gray-400 ${className}`}
    >
      <span className="relative">
        {/* Hidden Input */}
        <input
          type="radio"
          id={id}
          name={name}
          value={value}
          checked={checked}
          onChange={() => onChange(value)}
          className="sr-only"
        />
        {/* Styled Radio Circle */}
        <span
          className={`mr-2 flex h-4 w-4 items-center justify-center rounded-full border ${
            checked
              ? "border-brand-500 bg-brand-500"
              : "bg-transparent border-gray-300 dark:border-gray-700"
          }`}
        >
          {/* Inner Dot */}
          <span
            className={`h-1.5 w-1.5 rounded-full ${
              checked ? "bg-white" : "bg-white dark:bg-[#1e2636]"
            }`}
          ></span>
        </span>
      </span>
      {label}
    </label>
  );
};

export default RadioSm;

```

### components\form\input\TextArea.tsx
```tsx
import React from "react";

interface TextareaProps {
  placeholder?: string; // Placeholder text
  rows?: number; // Number of rows
  value?: string; // Current value
  onChange?: (value: string) => void; // Change handler
  className?: string; // Additional CSS classes
  disabled?: boolean; // Disabled state
  error?: boolean; // Error state
  hint?: string; // Hint text to display
}

const TextArea: React.FC<TextareaProps> = ({
  placeholder = "Enter your message", // Default placeholder
  rows = 3, // Default number of rows
  value = "", // Default value
  onChange, // Callback for changes
  className = "", // Additional custom styles
  disabled = false, // Disabled state
  error = false, // Error state
  hint = "", // Default hint text
}) => {
  const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    if (onChange) {
      onChange(e.target.value);
    }
  };

  let textareaClasses = `w-full rounded-lg border px-4 py-2.5 text-sm shadow-theme-xs focus:outline-hidden ${className} `;

  if (disabled) {
    textareaClasses += ` bg-gray-100 opacity-50 text-gray-500 border-gray-300 cursor-not-allowed opacity40 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-700`;
  } else if (error) {
    textareaClasses += ` bg-transparent  border-gray-300 focus:border-error-300 focus:ring-3 focus:ring-error-500/10 dark:border-gray-700 dark:bg-gray-900 dark:text-white/90 dark:focus:border-error-800`;
  } else {
    textareaClasses += ` bg-transparent text-gray-900 dark:text-gray-300 text-gray-900 border-gray-300 focus:border-brand-300 focus:ring-3 focus:ring-brand-500/10 dark:border-gray-700 dark:bg-gray-900 dark:text-white/90 dark:focus:border-brand-800`;
  }

  return (
    <div className="relative">
      <textarea
        placeholder={placeholder}
        rows={rows}
        value={value}
        onChange={handleChange}
        disabled={disabled}
        className={textareaClasses}
      />
      {hint && (
        <p
          className={`mt-2 text-sm ${
            error ? "text-error-500" : "text-gray-500 dark:text-gray-400"
          }`}
        >
          {hint}
        </p>
      )}
    </div>
  );
};

export default TextArea;

```

### components\form\switch\Switch.tsx
```tsx
import { useState } from "react";

interface SwitchProps {
  label: string;
  defaultChecked?: boolean;
  disabled?: boolean;
  onChange?: (checked: boolean) => void;
  color?: "blue" | "gray"; // Added prop to toggle color theme
}

const Switch: React.FC<SwitchProps> = ({
  label,
  defaultChecked = false,
  disabled = false,
  onChange,
  color = "blue", // Default to blue color
}) => {
  const [isChecked, setIsChecked] = useState(defaultChecked);

  const handleToggle = () => {
    if (disabled) return;
    const newCheckedState = !isChecked;
    setIsChecked(newCheckedState);
    if (onChange) {
      onChange(newCheckedState);
    }
  };

  const switchColors =
    color === "blue"
      ? {
          background: isChecked
            ? "bg-brand-500 "
            : "bg-gray-200 dark:bg-white/10", // Blue version
          knob: isChecked
            ? "translate-x-full bg-white"
            : "translate-x-0 bg-white",
        }
      : {
          background: isChecked
            ? "bg-gray-800 dark:bg-white/10"
            : "bg-gray-200 dark:bg-white/10", // Gray version
          knob: isChecked
            ? "translate-x-full bg-white"
            : "translate-x-0 bg-white",
        };

  return (
    <label
      className={`flex cursor-pointer select-none items-center gap-3 text-sm font-medium ${
        disabled ? "text-gray-400" : "text-gray-700 dark:text-gray-400"
      }`}
      onClick={handleToggle} // Toggle when the label itself is clicked
    >
      <div className="relative">
        <div
          className={`block transition duration-150 ease-linear h-6 w-11 rounded-full ${
            disabled
              ? "bg-gray-100 pointer-events-none dark:bg-gray-800"
              : switchColors.background
          }`}
        ></div>
        <div
          className={`absolute left-0.5 top-0.5 h-5 w-5 rounded-full shadow-theme-sm duration-150 ease-linear transform ${switchColors.knob}`}
        ></div>
      </div>
      {label}
    </label>
  );
};

export default Switch;

```

### components\header\Header.tsx
```tsx
import { useState } from "react";
import NotificationDropdown from "./NotificationDropdown";
import UserDropdown from "./UserDropdown";
import { Link } from "react-router-dom";

// Define the interface for the props
interface HeaderProps {
  onClick?: () => void; // Optional function that takes no arguments and returns void
  onToggle: () => void;
}
const Header: React.FC<HeaderProps> = ({ onClick, onToggle }) => {
  const [isApplicationMenuOpen, setApplicationMenuOpen] = useState(false);

  const toggleApplicationMenu = () => {
    setApplicationMenuOpen(!isApplicationMenuOpen);
  };

  return (
    <header className="sticky top-0 flex w-full bg-white/80 backdrop-blur-md border-gray-200/50 z-50 dark:border-gray-800/50 dark:bg-gray-900/80 lg:border-b transition-all duration-300">
      {" "}
      <div className="flex flex-col items-center justify-between grow lg:flex-row lg:px-6">
        <div className="flex items-center justify-between w-full gap-2 px-3 py-3 border-b border-gray-200/50 dark:border-gray-800/50 sm:gap-4 lg:justify-normal lg:border-b-0 lg:px-0 lg:py-4">
          <button
            className="block w-10 h-10 text-gray-500 lg:hidden dark:text-gray-400"
            onClick={onToggle}
          >
            {/* Hamburger Icon */}
            <svg
              className={`block`}
              width="16"
              height="12"
              viewBox="0 0 16 12"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                fillRule="evenodd"
                clipRule="evenodd"
                d="M0.583252 1C0.583252 0.585788 0.919038 0.25 1.33325 0.25H14.6666C15.0808 0.25 15.4166 0.585786 15.4166 1C15.4166 1.41421 15.0808 1.75 14.6666 1.75L1.33325 1.75C0.919038 1.75 0.583252 1.41422 0.583252 1ZM0.583252 11C0.583252 10.5858 0.919038 10.25 1.33325 10.25L14.6666 10.25C15.0808 10.25 15.4166 10.5858 15.4166 11C15.4166 11.4142 15.0808 11.75 14.6666 11.75L1.33325 11.75C0.919038 11.75 0.583252 11.4142 0.583252 11ZM1.33325 5.25C0.919038 5.25 0.583252 5.58579 0.583252 6C0.583252 6.41421 0.919038 6.75 1.33325 6.75L7.99992 6.75C8.41413 6.75 8.74992 6.41421 8.74992 6C8.74992 5.58579 8.41413 5.25 7.99992 5.25L1.33325 5.25Z"
                fill="currentColor"
              />
            </svg>
            <svg
              className="hidden"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                fillRule="evenodd"
                clipRule="evenodd"
                d="M6.21967 7.28131C5.92678 6.98841 5.92678 6.51354 6.21967 6.22065C6.51256 5.92775 6.98744 5.92775 7.28033 6.22065L11.999 10.9393L16.7176 6.22078C17.0105 5.92789 17.4854 5.92788 17.7782 6.22078C18.0711 6.51367 18.0711 6.98855 17.7782 7.28144L13.0597 12L17.7782 16.7186C18.0711 17.0115 18.0711 17.4863 17.7782 17.7792C17.4854 18.0721 17.0105 18.0721 16.7176 17.7792L11.999 13.0607L7.28033 17.7794C6.98744 18.0722 6.51256 18.0722 6.21967 17.7794C5.92678 17.4865 5.92678 17.0116 6.21967 16.7187L10.9384 12L6.21967 7.28131Z"
                fill="currentColor"
              />
            </svg>
            {/* Cross Icon */}
          </button>
          <button
            onClick={onClick}
            className="items-center justify-center hidden w-10 h-10 text-gray-500 border-gray-200 rounded-lg z-99999 dark:border-gray-800 lg:flex dark:text-gray-400 lg:h-11 lg:w-11 lg:border"
          >
            <svg
              className="hidden fill-current lg:block"
              width="16"
              height="12"
              viewBox="0 0 16 12"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                fillRule="evenodd"
                clipRule="evenodd"
                d="M0.583252 1C0.583252 0.585788 0.919038 0.25 1.33325 0.25H14.6666C15.0808 0.25 15.4166 0.585786 15.4166 1C15.4166 1.41421 15.0808 1.75 14.6666 1.75L1.33325 1.75C0.919038 1.75 0.583252 1.41422 0.583252 1ZM0.583252 11C0.583252 10.5858 0.919038 10.25 1.33325 10.25L14.6666 10.25C15.0808 10.25 15.4166 10.5858 15.4166 11C15.4166 11.4142 15.0808 11.75 14.6666 11.75L1.33325 11.75C0.919038 11.75 0.583252 11.4142 0.583252 11ZM1.33325 5.25C0.919038 5.25 0.583252 5.58579 0.583252 6C0.583252 6.41421 0.919038 6.75 1.33325 6.75L7.99992 6.75C8.41413 6.75 8.74992 6.41421 8.74992 6C8.74992 5.58579 8.41413 5.25 7.99992 5.25L1.33325 5.25Z"
                fill=""
              />
            </svg>
          </button>

          <Link to="/" className="lg:hidden">
            <img
              className="dark:hidden"
              src="/public/image/ranbowlogo.png"
              alt="Logo"
            />
            <img
              className="hidden dark:block"
              src="/public/image/Xanh_dương_pastel_Cầu_vồng_Chương_trình_Đọc_viết_Logo-removebg-preview 1.png"
              alt="Logo"
            />
          </Link>

          <button
            onClick={toggleApplicationMenu}
            className="flex items-center justify-center w-10 h-10 text-gray-700 rounded-lg z-99999 hover:bg-gray-100 dark:text-gray-400 dark:hover:bg-gray-800 lg:hidden"
          >
            <svg
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                fillRule="evenodd"
                clipRule="evenodd"
                d="M5.99902 10.4951C6.82745 10.4951 7.49902 11.1667 7.49902 11.9951V12.0051C7.49902 12.8335 6.82745 13.5051 5.99902 13.5051C5.1706 13.5051 4.49902 12.8335 4.49902 12.0051V11.9951C4.49902 11.1667 5.1706 10.4951 5.99902 10.4951ZM17.999 10.4951C18.8275 10.4951 19.499 11.1667 19.499 11.9951V12.0051C19.499 12.8335 18.8275 13.5051 17.999 13.5051C17.1706 13.5051 16.499 12.8335 16.499 12.0051V11.9951C16.499 11.1667 17.1706 10.4951 17.999 10.4951ZM13.499 11.9951C13.499 11.1667 12.8275 10.4951 11.999 10.4951C11.1706 10.4951 10.499 11.1667 10.499 11.9951V12.0051C10.499 12.8335 11.1706 13.5051 11.999 13.5051C12.8275 13.5051 13.499 12.8335 13.499 12.0051V11.9951Z"
                fill="currentColor"
              />
            </svg>
          </button>

          <div className="hidden lg:block">
            <form action="https://formbold.com/s/unique_form_id" method="POST">
              <div className="relative">
                <button className="absolute -translate-y-1/2 left-4 top-1/2">
                  <svg
                    className="fill-gray-500 dark:fill-gray-400"
                    width="20"
                    height="20"
                    viewBox="0 0 20 20"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      fillRule="evenodd"
                      clipRule="evenodd"
                      d="M3.04175 9.37363C3.04175 5.87693 5.87711 3.04199 9.37508 3.04199C12.8731 3.04199 15.7084 5.87693 15.7084 9.37363C15.7084 12.8703 12.8731 15.7053 9.37508 15.7053C5.87711 15.7053 3.04175 12.8703 3.04175 9.37363ZM9.37508 1.54199C5.04902 1.54199 1.54175 5.04817 1.54175 9.37363C1.54175 13.6991 5.04902 17.2053 9.37508 17.2053C11.2674 17.2053 13.003 16.5344 14.357 15.4176L17.177 18.238C17.4699 18.5309 17.9448 18.5309 18.2377 18.238C18.5306 17.9451 18.5306 17.4703 18.2377 17.1774L15.418 14.3573C16.5365 13.0033 17.2084 11.2669 17.2084 9.37363C17.2084 5.04817 13.7011 1.54199 9.37508 1.54199Z"
                      fill=""
                    />
                  </svg>
                </button>
                <input
                  type="text"
                  placeholder="Search or type command..."
                  className="dark:bg-dark-900 h-11 w-full rounded-lg border border-gray-200 bg-transparent py-2.5 pl-12 pr-14 text-sm text-gray-800 shadow-theme-xs placeholder:text-gray-400 focus:border-brand-300 focus:outline-hidden focus:ring-3 focus:ring-brand-500/10 dark:border-gray-800 dark:bg-gray-900 dark:bg-white/[0.03] dark:text-white/90 dark:placeholder:text-white/30 dark:focus:border-brand-800 xl:w-[430px]"
                />

                <button className="absolute right-2.5 top-1/2 inline-flex -translate-y-1/2 items-center gap-0.5 rounded-lg border border-gray-200 bg-gray-50 px-[7px] py-[4.5px] text-xs -tracking-[0.2px] text-gray-500 dark:border-gray-800 dark:bg-white/[0.03] dark:text-gray-400">
                  <span> ⌘ </span>
                  <span> K </span>
                </button>
              </div>
            </form>
          </div>
        </div>
        <div
          className={`${
            isApplicationMenuOpen ? "flex" : "hidden"
          } items-center justify-between w-full gap-4 px-5 py-4 lg:flex shadow-theme-md lg:justify-end lg:px-0 lg:shadow-none`}
        >
          <div className="flex items-center gap-2 2xsm:gap-3">
            \ <NotificationDropdown />
            {/* <!-- Notification Menu Area --> */}
          </div>
          {/* <!-- User Area --> */}
          <UserDropdown />
        </div>
      </div>
    </header>
  );
};

export default Header;

```

### components\header\NotificationDropdown.tsx
```tsx
import { useState } from "react";
import { Dropdown } from "../ui/Dropdown";
import { DropdownItem } from "@/components/ui/DropdownItem";
import { Link } from "react-router-dom";

export default function NotificationDropdown() {
  const [isOpen, setIsOpen] = useState(false);
  const [notifying, setNotifying] = useState(true);

  function toggleDropdown() {
    setIsOpen(!isOpen);
  }

  function closeDropdown() {
    setIsOpen(false);
  }

  const handleClick = () => {
    toggleDropdown();
    setNotifying(false);
  };
  return (
    <div className="relative">
      <button
        className="relative flex items-center justify-center text-gray-500 transition-colors bg-white border border-gray-200 rounded-full dropdown-toggle hover:text-gray-700 h-11 w-11 hover:bg-gray-100 dark:border-gray-800 dark:bg-gray-900 dark:text-gray-400 dark:hover:bg-gray-800 dark:hover:text-white"
        onClick={handleClick}
      >
        <span
          className={`absolute right-0 top-0.5 z-10 h-2 w-2 rounded-full bg-orange-400 ${
            !notifying ? "hidden" : "flex"
          }`}
        >
          <span className="absolute inline-flex w-full h-full bg-orange-400 rounded-full opacity-75 animate-ping"></span>
        </span>
        <svg
          className="fill-current"
          width="20"
          height="20"
          viewBox="0 0 20 20"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            fillRule="evenodd"
            clipRule="evenodd"
            d="M10.75 2.29248C10.75 1.87827 10.4143 1.54248 10 1.54248C9.58583 1.54248 9.25004 1.87827 9.25004 2.29248V2.83613C6.08266 3.20733 3.62504 5.9004 3.62504 9.16748V14.4591H3.33337C2.91916 14.4591 2.58337 14.7949 2.58337 15.2091C2.58337 15.6234 2.91916 15.9591 3.33337 15.9591H4.37504H15.625H16.6667C17.0809 15.9591 17.4167 15.6234 17.4167 15.2091C17.4167 14.7949 17.0809 14.4591 16.6667 14.4591H16.375V9.16748C16.375 5.9004 13.9174 3.20733 10.75 2.83613V2.29248ZM14.875 14.4591V9.16748C14.875 6.47509 12.6924 4.29248 10 4.29248C7.30765 4.29248 5.12504 6.47509 5.12504 9.16748V14.4591H14.875ZM8.00004 17.7085C8.00004 18.1228 8.33583 18.4585 8.75004 18.4585H11.25C11.6643 18.4585 12 18.1228 12 17.7085C12 17.2943 11.6643 16.9585 11.25 16.9585H8.75004C8.33583 16.9585 8.00004 17.2943 8.00004 17.7085Z"
            fill="currentColor"
          />
        </svg>
      </button>
      <Dropdown
        isOpen={isOpen}
        onClose={closeDropdown}
        className="absolute -right-[240px] mt-[17px] flex h-[480px] w-[350px] flex-col rounded-2xl border border-gray-200 bg-white p-3 shadow-theme-lg dark:border-gray-800 dark:bg-gray-dark sm:w-[361px] lg:right-0"
      >
        <div className="flex items-center justify-between pb-3 mb-3 border-b border-gray-100 dark:border-gray-700">
          <h5 className="text-lg font-semibold text-gray-800 dark:text-gray-200">
            Notification
          </h5>
          <button
            onClick={toggleDropdown}
            className="text-gray-500 transition dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200"
          >
            <svg
              className="fill-current"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                fillRule="evenodd"
                clipRule="evenodd"
                d="M6.21967 7.28131C5.92678 6.98841 5.92678 6.51354 6.21967 6.22065C6.51256 5.92775 6.98744 5.92775 7.28033 6.22065L11.999 10.9393L16.7176 6.22078C17.0105 5.92789 17.4854 5.92788 17.7782 6.22078C18.0711 6.51367 18.0711 6.98855 17.7782 7.28144L13.0597 12L17.7782 16.7186C18.0711 17.0115 18.0711 17.4863 17.7782 17.7792C17.4854 18.0721 17.0105 18.0721 16.7176 17.7792L11.999 13.0607L7.28033 17.7794C6.98744 18.0722 6.51256 18.0722 6.21967 17.7794C5.92678 17.4865 5.92678 17.0116 6.21967 16.7187L10.9384 12L6.21967 7.28131Z"
                fill="currentColor"
              />
            </svg>
          </button>
        </div>
        <ul className="flex flex-col h-auto overflow-y-auto custom-scrollbar">
          {/* Example notification items */}
          <li>
            <DropdownItem
              onItemClick={closeDropdown}
              className="flex gap-3 rounded-lg border-b border-gray-100 p-3 px-4.5 py-3 hover:bg-gray-100 dark:border-gray-800 dark:hover:bg-white/5"
            >
              <span className="relative block w-full h-10 rounded-full z-1 max-w-10">
                <img
                  width={40}
                  height={40}
                  src="/image/avatar1.jpg"
                  alt="User"
                  className="w-full overflow-hidden rounded-full"
                />
                <span className="absolute bottom-0 right-0 z-10 h-2.5 w-full max-w-2.5 rounded-full border-[1.5px] border-white bg-success-500 dark:border-gray-900"></span>
              </span>

              <span className="block">
                <span className="mb-1.5 block  text-theme-sm text-gray-500 dark:text-gray-400 space-x-1">
                  <span className="font-medium text-gray-800 dark:text-white/90">
                    Terry Franci
                  </span>
                  <span> requests permission to change</span>
                  <span className="font-medium text-gray-800 dark:text-white/90">
                    Project - Nganter App
                  </span>
                </span>

                <span className="flex items-center gap-2 text-gray-500 text-theme-xs dark:text-gray-400">
                  <span>Project</span>
                  <span className="w-1 h-1 bg-gray-400 rounded-full"></span>
                  <span>5 min ago</span>
                </span>
              </span>
            </DropdownItem>
          </li>

          <li>
            <DropdownItem
              onItemClick={closeDropdown}
              className="flex gap-3 rounded-lg border-b border-gray-100 p-3 px-4.5 py-3 hover:bg-gray-100 dark:border-gray-800 dark:hover:bg-white/5"
            >
              <span className="relative block w-full h-10 rounded-full z-1 max-w-10">
                <img
                  width={40}
                  height={40}
                  src="/image/avatar4.jpg"
                  alt="User"
                  className="w-full overflow-hidden rounded-full"
                />
                <span className="absolute bottom-0 right-0 z-10 h-2.5 w-full max-w-2.5 rounded-full border-[1.5px] border-white bg-success-500 dark:border-gray-900"></span>
              </span>

              <span className="block">
                <span className="mb-1.5 block space-x-1 text-theme-sm text-gray-500 dark:text-gray-400">
                  <span className="font-medium text-gray-800 dark:text-white/90">
                    Alena Franci
                  </span>
                  <span>requests permission to change</span>
                  <span className="font-medium text-gray-800 dark:text-white/90">
                    Project - Nganter App
                  </span>
                </span>

                <span className="flex items-center gap-2 text-gray-500 text-theme-xs dark:text-gray-400">
                  <span>Project</span>
                  <span className="w-1 h-1 bg-gray-400 rounded-full"></span>
                  <span>8 min ago</span>
                </span>
              </span>
            </DropdownItem>
          </li>

          <li>
            <DropdownItem
              onItemClick={closeDropdown}
              className="flex gap-3 rounded-lg border-b border-gray-100 p-3 px-4.5 py-3 hover:bg-gray-100 dark:border-gray-800 dark:hover:bg-white/5"
            >
              <span className="relative block w-full h-10 rounded-full z-1 max-w-10">
                <img
                  width={40}
                  height={40}
                  src="/image/avatar2.jpg"
                  alt="User"
                  className="w-full overflow-hidden rounded-full"
                />
                <span className="absolute bottom-0 right-0 z-10 h-2.5 w-full max-w-2.5 rounded-full border-[1.5px] border-white bg-success-500 dark:border-gray-900"></span>
              </span>

              <span className="block">
                <span className="mb-1.5 block space-x-1 text-theme-sm text-gray-500 dark:text-gray-400">
                  <span className="font-medium text-gray-800 dark:text-white/90">
                    Jocelyn Kenter
                  </span>
                  <span> requests permission to change</span>
                  <span className="font-medium text-gray-800 dark:text-white/90">
                    Project - Nganter App
                  </span>
                </span>

                <span className="flex items-center gap-2 text-gray-500 text-theme-xs dark:text-gray-400">
                  <span>Project</span>
                  <span className="w-1 h-1 bg-gray-400 rounded-full"></span>
                  <span>15 min ago</span>
                </span>
              </span>
            </DropdownItem>
          </li>

          <li>
            <DropdownItem
              onItemClick={closeDropdown}
              className="flex gap-3 rounded-lg border-b border-gray-100 p-3 px-4.5 py-3 hover:bg-gray-100 dark:border-gray-800 dark:hover:bg-white/5"
              to="/"
            >
              <span className="relative block w-full h-10 rounded-full z-1 max-w-10">
                <img
                  width={40}
                  height={40}
                  src="image/avatar.jpg"
                  alt="User"
                  className="w-full overflow-hidden rounded-full"
                />
                <span className="absolute bottom-0 right-0 z-10 h-2.5 w-full max-w-2.5 rounded-full border-[1.5px] border-white bg-error-500 dark:border-gray-900"></span>
              </span>

              <span className="block">
                <span className="mb-1.5 space-x-1 block text-theme-sm text-gray-500 dark:text-gray-400">
                  <span className="font-medium text-gray-800 dark:text-white/90">
                    Brandon Philips
                  </span>
                  <span>requests permission to change</span>
                  <span className="font-medium text-gray-800 dark:text-white/90">
                    Project - Nganter App
                  </span>
                </span>

                <span className="flex items-center gap-2 text-gray-500 text-theme-xs dark:text-gray-400">
                  <span>Project</span>
                  <span className="w-1 h-1 bg-gray-400 rounded-full"></span>
                  <span>1 hr ago</span>
                </span>
              </span>
            </DropdownItem>
          </li>

          <li>
            <DropdownItem
              className="flex gap-3 rounded-lg border-b border-gray-100 p-3 px-4.5 py-3 hover:bg-gray-100 dark:border-gray-800 dark:hover:bg-white/5"
              onItemClick={closeDropdown}
            >
              <span className="relative block w-full h-10 rounded-full z-1 max-w-10">
                <img
                  width={40}
                  height={40}
                  src="/image/avatar1.jpg"
                  alt="User"
                  className="w-full overflow-hidden rounded-full"
                />
                <span className="absolute bottom-0 right-0 z-10 h-2.5 w-full max-w-2.5 rounded-full border-[1.5px] border-white bg-success-500 dark:border-gray-900"></span>
              </span>

              <span className="block">
                <span className="mb-1.5 block space-x-1 text-theme-sm text-gray-500 dark:text-gray-400">
                  <span className="font-medium text-gray-800 dark:text-white/90">
                    Terry Franci
                  </span>
                  <span> requests permission to change</span>
                  <span className="font-medium text-gray-800 dark:text-white/90">
                    Project - Nganter App
                  </span>
                </span>

                <span className="flex items-center gap-2 text-gray-500 text-theme-xs dark:text-gray-400">
                  <span>Project</span>
                  <span className="w-1 h-1 bg-gray-400 rounded-full"></span>
                  <span>5 min ago</span>
                </span>
              </span>
            </DropdownItem>
          </li>

          <li>
            <DropdownItem
              onItemClick={closeDropdown}
              className="flex gap-3 rounded-lg border-b border-gray-100 p-3 px-4.5 py-3 hover:bg-gray-100 dark:border-gray-800 dark:hover:bg-white/5"
            >
              <span className="relative block w-full h-10 rounded-full z-1 max-w-10">
                <img
                  width={40}
                  height={40}
                  src="/images/user/user-03.jpg"
                  alt="User"
                  className="w-full overflow-hidden rounded-full"
                />
                <span className="absolute bottom-0 right-0 z-10 h-2.5 w-full max-w-2.5 rounded-full border-[1.5px] border-white bg-success-500 dark:border-gray-900"></span>
              </span>

              <span className="block">
                <span className="mb-1.5 block space-x-1 text-theme-sm text-gray-500 dark:text-gray-400">
                  <span className="font-medium text-gray-800 dark:text-white/90">
                    Alena Franci
                  </span>
                  <span> requests permission to change</span>
                  <span className="font-medium text-gray-800 dark:text-white/90">
                    Project - Nganter App
                  </span>
                </span>

                <span className="flex items-center gap-2 text-gray-500 text-theme-xs dark:text-gray-400">
                  <span>Project</span>
                  <span className="w-1 h-1 bg-gray-400 rounded-full"></span>
                  <span>8 min ago</span>
                </span>
              </span>
            </DropdownItem>
          </li>

          <li>
            <DropdownItem
              onItemClick={closeDropdown}
              className="flex gap-3 rounded-lg border-b border-gray-100 p-3 px-4.5 py-3 hover:bg-gray-100 dark:border-gray-800 dark:hover:bg-white/5"
            >
              <span className="relative block w-full h-10 rounded-full z-1 max-w-10">
                <img
                  width={40}
                  height={40}
                  src="/images/user/user-04.jpg"
                  alt="User"
                  className="w-full overflow-hidden rounded-full"
                />
                <span className="absolute bottom-0 right-0 z-10 h-2.5 w-full max-w-2.5 rounded-full border-[1.5px] border-white bg-success-500 dark:border-gray-900"></span>
              </span>

              <span className="block">
                <span className="mb-1.5 block  space-x-1 text-theme-sm text-gray-500 dark:text-gray-400">
                  <span className="font-medium text-gray-800 dark:text-white/90">
                    Jocelyn Kenter
                  </span>
                  <span> requests permission to change</span>
                  <span className="font-medium text-gray-800 dark:text-white/90">
                    Project - Nganter App
                  </span>
                </span>

                <span className="flex items-center gap-2 text-gray-500 text-theme-xs dark:text-gray-400">
                  <span>Project</span>
                  <span className="w-1 h-1 bg-gray-400 rounded-full"></span>
                  <span>15 min ago</span>
                </span>
              </span>
            </DropdownItem>
          </li>

          <li>
            <DropdownItem
              onItemClick={closeDropdown}
              className="flex gap-3 rounded-lg border-b border-gray-100 p-3 px-4.5 py-3 hover:bg-gray-100 dark:border-gray-800 dark:hover:bg-white/5"
            >
              <span className="relative block w-full h-10 rounded-full z-1 max-w-10">
                <img
                  width={40}
                  height={40}
                  src="/images/user/user-05.jpg"
                  alt="User"
                  className="overflow-hidden rounded-full"
                />
                <span className="absolute bottom-0 right-0 z-10 h-2.5 w-full max-w-2.5 rounded-full border-[1.5px] border-white bg-error-500 dark:border-gray-900"></span>
              </span>

              <span className="block">
                <span className="mb-1.5 block space-x-1 text-theme-sm text-gray-500 dark:text-gray-400">
                  <span className="font-medium text-gray-800 dark:text-white/90">
                    Brandon Philips
                  </span>
                  <span>requests permission to change</span>
                  <span className="font-medium text-gray-800 dark:text-white/90">
                    Project - Nganter App
                  </span>
                </span>

                <span className="flex items-center gap-2 text-gray-500 text-theme-xs dark:text-gray-400">
                  <span>Project</span>
                  <span className="w-1 h-1 bg-gray-400 rounded-full"></span>
                  <span>1 hr ago</span>
                </span>
              </span>
            </DropdownItem>
          </li>
          {/* Add more items as needed */}
        </ul>
        <Link
          to="/"
          className="block px-4 py-2 mt-3 text-sm font-medium text-center text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-100 dark:border-gray-700 dark:bg-gray-800 dark:text-gray-400 dark:hover:bg-gray-700"
        >
          View All Notifications
        </Link>
      </Dropdown>
    </div>
  );
}

```

### components\header\UserDropdown.tsx
```tsx
import { useState } from "react";
import { DropdownItem } from "@/components/ui/DropdownItem";
import { Dropdown } from "@/components/ui/Dropdown";
import { Link, useNavigate } from "react-router-dom";
import { useDispatch } from "react-redux";
import { logout } from "@/store/slices/authSlice";

export default function UserDropdown() {
  const [isOpen, setIsOpen] = useState(false);
  const dispatch = useDispatch();
  const navigate = useNavigate();

  function toggleDropdown() {
    setIsOpen(!isOpen);
  }

  function closeDropdown() {
    setIsOpen(false);
  }

  const handleLogout = () => {
    dispatch(logout());
    navigate("/login");
    closeDropdown();
  };
  return (
    <div className="relative">
      <button
        onClick={toggleDropdown}
        className="flex items-center text-gray-700 dropdown-toggle dark:text-gray-400"
      >
        <span className="mr-3 overflow-hidden rounded-full h-11 w-11">
          <img
            src="https://i.pinimg.com/736x/74/8d/12/748d12be165d3a74b07cb0870e34550d.jpg"
            alt="User"
          />
        </span>

        <span className="block mr-1 font-medium text-theme-sm">Musharof</span>
        <svg
          className={`stroke-gray-500 dark:stroke-gray-400 transition-transform duration-200 ${
            isOpen ? "rotate-180" : ""
          }`}
          width="18"
          height="20"
          viewBox="0 0 18 20"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M4.3125 8.65625L9 13.3437L13.6875 8.65625"
            stroke="currentColor"
            strokeWidth="1.5"
            strokeLinecap="round"
            strokeLinejoin="round"
          />
        </svg>
      </button>

      <Dropdown
        isOpen={isOpen}
        onClose={closeDropdown}
        className="absolute right-0 mt-[17px] flex w-[260px] flex-col rounded-2xl border border-gray-200 bg-white p-3 shadow-theme-lg dark:border-gray-800 dark:bg-gray-dark"
      >
        <div>
          <span className="block font-medium text-gray-700 text-theme-sm dark:text-gray-400">
            Musharof Chowdhury
          </span>
          <span className="mt-0.5 block text-theme-xs text-gray-500 dark:text-gray-400">
            randomuser@pimjo.com
          </span>
        </div>

        <ul className="flex flex-col gap-1 pt-4 pb-3 border-b border-gray-200 dark:border-gray-800">
          <li>
            <DropdownItem
              onItemClick={closeDropdown}
              tag="a"
              to="/profile"
              className="flex items-center gap-3 px-3 py-2 font-medium text-gray-700 rounded-lg group text-theme-sm hover:bg-gray-100 hover:text-gray-700 dark:text-gray-400 dark:hover:bg-white/5 dark:hover:text-gray-300"
            >
              <svg
                className="fill-gray-500 group-hover:fill-gray-700 dark:fill-gray-400 dark:group-hover:fill-gray-300"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  fillRule="evenodd"
                  clipRule="evenodd"
                  d="M12 3.5C7.30558 3.5 3.5 7.30558 3.5 12C3.5 14.1526 4.3002 16.1184 5.61936 17.616C6.17279 15.3096 8.24852 13.5955 10.7246 13.5955H13.2746C15.7509 13.5955 17.8268 15.31 18.38 17.6167C19.6996 16.119 20.5 14.153 20.5 12C20.5 7.30558 16.6944 3.5 12 3.5ZM17.0246 18.8566V18.8455C17.0246 16.7744 15.3457 15.0955 13.2746 15.0955H10.7246C8.65354 15.0955 6.97461 16.7744 6.97461 18.8455V18.856C8.38223 19.8895 10.1198 20.5 12 20.5C13.8798 20.5 15.6171 19.8898 17.0246 18.8566ZM2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12ZM11.9991 7.25C10.8847 7.25 9.98126 8.15342 9.98126 9.26784C9.98126 10.3823 10.8847 11.2857 11.9991 11.2857C13.1135 11.2857 14.0169 10.3823 14.0169 9.26784C14.0169 8.15342 13.1135 7.25 11.9991 7.25ZM8.48126 9.26784C8.48126 7.32499 10.0563 5.75 11.9991 5.75C13.9419 5.75 15.5169 7.32499 15.5169 9.26784C15.5169 11.2107 13.9419 12.7857 11.9991 12.7857C10.0563 12.7857 8.48126 11.2107 8.48126 9.26784Z"
                  fill=""
                />
              </svg>
              Edit profile
            </DropdownItem>
          </li>
          <li>
            <DropdownItem
              onItemClick={closeDropdown}
              tag="a"
              to="/profile"
              className="flex items-center gap-3 px-3 py-2 font-medium text-gray-700 rounded-lg group text-theme-sm hover:bg-gray-100 hover:text-gray-700 dark:text-gray-400 dark:hover:bg-white/5 dark:hover:text-gray-300"
            >
              <svg
                className="fill-gray-500 group-hover:fill-gray-700 dark:fill-gray-400 dark:group-hover:fill-gray-300"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  fillRule="evenodd"
                  clipRule="evenodd"
                  d="M10.4858 3.5L13.5182 3.5C13.9233 3.5 14.2518 3.82851 14.2518 4.23377C14.2518 5.9529 16.1129 7.02795 17.602 6.1682C17.9528 5.96567 18.4014 6.08586 18.6039 6.43667L20.1203 9.0631C20.3229 9.41407 20.2027 9.86286 19.8517 10.0655C18.3625 10.9253 18.3625 13.0747 19.8517 13.9345C20.2026 14.1372 20.3229 14.5859 20.1203 14.9369L18.6039 17.5634C18.4013 17.9142 17.9528 18.0344 17.602 17.8318C16.1129 16.9721 14.2518 18.0471 14.2518 19.7663C14.2518 20.1715 13.9233 20.5 13.5182 20.5H10.4858C10.0804 20.5 9.75182 20.1714 9.75182 19.766C9.75182 18.0461 7.88983 16.9717 6.40067 17.8314C6.04945 18.0342 5.60037 17.9139 5.39767 17.5628L3.88167 14.937C3.67903 14.586 3.79928 14.1372 4.15026 13.9346C5.63949 13.0748 5.63946 10.9253 4.15025 10.0655C3.79926 9.86282 3.67901 9.41401 3.88165 9.06303L5.39764 6.43725C5.60034 6.08617 6.04943 5.96581 6.40065 6.16858C7.88982 7.02836 9.75182 5.9539 9.75182 4.23399C9.75182 3.82862 10.0804 3.5 10.4858 3.5ZM13.5182 2L10.4858 2C9.25201 2 8.25182 3.00019 8.25182 4.23399C8.25182 4.79884 7.64013 5.15215 7.15065 4.86955C6.08213 4.25263 4.71559 4.61859 4.0986 5.68725L2.58261 8.31303C1.96575 9.38146 2.33183 10.7477 3.40025 11.3645C3.88948 11.647 3.88947 12.3531 3.40026 12.6355C2.33184 13.2524 1.96578 14.6186 2.58263 15.687L4.09863 18.3128C4.71562 19.3814 6.08215 19.7474 7.15067 19.1305C7.64015 18.8479 8.25182 19.2012 8.25182 19.766C8.25182 20.9998 9.25201 22 10.4858 22H13.5182C14.7519 22 15.7518 20.9998 15.7518 19.7663C15.7518 19.2015 16.3632 18.8487 16.852 19.1309C17.9202 19.7476 19.2862 19.3816 19.9029 18.3134L21.4193 15.6869C22.0361 14.6185 21.6701 13.2523 20.6017 12.6355C20.1125 12.3531 20.1125 11.647 20.6017 11.3645C21.6701 10.7477 22.0362 9.38152 21.4193 8.3131L19.903 5.68667C19.2862 4.61842 17.9202 4.25241 16.852 4.86917C16.3632 5.15138 15.7518 4.79856 15.7518 4.23377C15.7518 3.00024 14.7519 2 13.5182 2ZM9.6659 11.9999C9.6659 10.7103 10.7113 9.66493 12.0009 9.66493C13.2905 9.66493 14.3359 10.7103 14.3359 11.9999C14.3359 13.2895 13.2905 14.3349 12.0009 14.3349C10.7113 14.3349 9.6659 13.2895 9.6659 11.9999ZM12.0009 8.16493C9.88289 8.16493 8.1659 9.88191 8.1659 11.9999C8.1659 14.1179 9.88289 15.8349 12.0009 15.8349C14.1189 15.8349 15.8359 14.1179 15.8359 11.9999C15.8359 9.88191 14.1189 8.16493 12.0009 8.16493Z"
                  fill=""
                />
              </svg>
              Account settings
            </DropdownItem>
          </li>
          <li>
            <DropdownItem
              onItemClick={closeDropdown}
              tag="a"
              to="/profile"
              className="flex items-center gap-3 px-3 py-2 font-medium text-gray-700 rounded-lg group text-theme-sm hover:bg-gray-100 hover:text-gray-700 dark:text-gray-400 dark:hover:bg-white/5 dark:hover:text-gray-300"
            >
              <svg
                className="fill-gray-500 group-hover:fill-gray-700 dark:fill-gray-400 dark:group-hover:fill-gray-300"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  fillRule="evenodd"
                  clipRule="evenodd"
                  d="M3.5 12C3.5 7.30558 7.30558 3.5 12 3.5C16.6944 3.5 20.5 7.30558 20.5 12C20.5 16.6944 16.6944 20.5 12 20.5C7.30558 20.5 3.5 16.6944 3.5 12ZM12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2ZM11.0991 7.52507C11.0991 8.02213 11.5021 8.42507 11.9991 8.42507H12.0001C12.4972 8.42507 12.9001 8.02213 12.9001 7.52507C12.9001 7.02802 12.4972 6.62507 12.0001 6.62507H11.9991C11.5021 6.62507 11.0991 7.02802 11.0991 7.52507ZM12.0001 17.3714C11.5859 17.3714 11.2501 17.0356 11.2501 16.6214V10.9449C11.2501 10.5307 11.5859 10.1949 12.0001 10.1949C12.4143 10.1949 12.7501 10.5307 12.7501 10.9449V16.6214C12.7501 17.0356 12.4143 17.3714 12.0001 17.3714Z"
                  fill=""
                />
              </svg>
              Support
            </DropdownItem>
          </li>
        </ul>
        <Link
          to="/signin"
          onClick={handleLogout}
          className="flex items-center gap-3 px-3 py-2 mt-3 font-medium text-gray-700 rounded-lg group text-theme-sm hover:bg-gray-100 hover:text-gray-700 dark:text-gray-400 dark:hover:bg-white/5 dark:hover:text-gray-300"
        >
          <svg
            className="fill-gray-500 group-hover:fill-gray-700 dark:group-hover:fill-gray-300"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              fillRule="evenodd"
              clipRule="evenodd"
              d="M15.1007 19.247C14.6865 19.247 14.3507 18.9112 14.3507 18.497L14.3507 14.245H12.8507V18.497C12.8507 19.7396 13.8581 20.747 15.1007 20.747H18.5007C19.7434 20.747 20.7507 19.7396 20.7507 18.497L20.7507 5.49609C20.7507 4.25345 19.7433 3.24609 18.5007 3.24609H15.1007C13.8581 3.24609 12.8507 4.25345 12.8507 5.49609V9.74501L14.3507 9.74501V5.49609C14.3507 5.08188 14.6865 4.74609 15.1007 4.74609L18.5007 4.74609C18.9149 4.74609 19.2507 5.08188 19.2507 5.49609L19.2507 18.497C19.2507 18.9112 18.9149 19.247 18.5007 19.247H15.1007ZM3.25073 11.9984C3.25073 12.2144 3.34204 12.4091 3.48817 12.546L8.09483 17.1556C8.38763 17.4485 8.86251 17.4487 9.15549 17.1559C9.44848 16.8631 9.44863 16.3882 9.15583 16.0952L5.81116 12.7484L16.0007 12.7484C16.4149 12.7484 16.7507 12.4127 16.7507 11.9984C16.7507 11.5842 16.4149 11.2484 16.0007 11.2484L5.81528 11.2484L9.15585 7.90554C9.44864 7.61255 9.44847 7.13767 9.15547 6.84488C8.86248 6.55209 8.3876 6.55226 8.09481 6.84525L3.52309 11.4202C3.35673 11.5577 3.25073 11.7657 3.25073 11.9984Z"
              fill=""
            />
          </svg>
          Sign out
        </Link>
      </Dropdown>
    </div>
  );
}

```

### components\icons\index.ts
```ts
import { ReactComponent as PlusIcon } from "./plus.svg?react";
import { ReactComponent as CloseIcon } from "./close.svg?react";
import { ReactComponent as BoxIcon } from "./box.svg?react";
import { ReactComponent as CheckCircleIcon } from "./check-circle.svg?react";
import { ReactComponent as AlertIcon } from "./alert.svg?react";
import { ReactComponent as InfoIcon } from "./info.svg?react";
import { ReactComponent as ErrorIcon } from "./info-error.svg?react";
import { ReactComponent as BoltIcon } from "./bolt.svg?react";
import { ReactComponent as ArrowUpIcon } from "./arrow-up.svg?react";
import { ReactComponent as ArrowDownIcon } from "./arrow-down.svg?react";
import { ReactComponent as FolderIcon } from "./folder.svg?react";
import { ReactComponent as VideoIcon } from "./videos.svg?react";
import { ReactComponent as AudioIcon } from "./audio.svg?react";
import { ReactComponent as GridIcon } from "./grid.svg?react";
import { ReactComponent as FileIcon } from "./file.svg?react";
import { ReactComponent as DownloadIcon } from "./download.svg?react";
import { ReactComponent as ArrowRightIcon } from "./arrow-right.svg?react";
import { ReactComponent as GroupIcon } from "./group.svg?react";
import { ReactComponent as BoxIconLine } from "./box-line.svg?react";
import { ReactComponent as ShootingStarIcon } from "./shooting-star.svg?react";
import { ReactComponent as DollarLineIcon } from "./dollar-line.svg?react";
import { ReactComponent as TrashBinIcon } from "./trash.svg?react";
import { ReactComponent as AngleUpIcon } from "./angle-up.svg?react";
import { ReactComponent as AngleDownIcon } from "./angle-down.svg?react";
import { ReactComponent as PencilIcon } from "./pencil.svg?react";
import { ReactComponent as CheckLineIcon } from "./check-line.svg?react";
import { ReactComponent as CloseLineIcon } from "./close-line.svg?react";
import { ReactComponent as ChevronDownIcon } from "./chevron-down.svg?react";
import { ReactComponent as ChevronUpIcon } from "./chevron-up.svg?react";
import { ReactComponent as PaperPlaneIcon } from "./paper-plane.svg?react";
import { ReactComponent as LockIcon } from "./lock.svg?react";
import { ReactComponent as EnvelopeIcon } from "./envelope.svg?react";
import { ReactComponent as UserIcon } from "./user-line.svg?react";
import { ReactComponent as CalenderIcon } from "./calender-line.svg?react";
import { ReactComponent as EyeIcon } from "./eye.svg?react";
import { ReactComponent as EyeCloseIcon } from "./eye-close.svg?react";
import { ReactComponent as TimeIcon } from "./time.svg?react";
import { ReactComponent as CopyIcon } from "./copy.svg?react";
import { ReactComponent as ChevronLeftIcon } from "./chevron-left.svg?react";
import { ReactComponent as UserCircleIcon } from "./user-circle.svg?react";
import { ReactComponent as TaskIcon } from "./task-icon.svg?react";
import { ReactComponent as ListIcon } from "./list.svg?react";
import { ReactComponent as TableIcon } from "./table.svg?react";
import { ReactComponent as PageIcon } from "./page.svg?react";
import { ReactComponent as PieChartIcon } from "./pie-chart.svg?react";
import { ReactComponent as BoxCubeIcon } from "./box-cube.svg?react";
import { ReactComponent as PlugInIcon } from "./plug-in.svg?react";
import { ReactComponent as DocsIcon } from "./docs.svg?react";
import { ReactComponent as MailIcon } from "./mail-line.svg?react";
import { ReactComponent as HorizontaLDots } from "./horizontal-dots.svg?react";
import { ReactComponent as ChatIcon } from "./chat.svg?react";
import { ReactComponent as MoreDotIcon } from "./moredot.svg?react";
import { ReactComponent as AlertHexaIcon } from "./alert-hexa.svg?react";
import { ReactComponent as ErrorHexaIcon } from "./info-hexa.svg?react";

export {
  ErrorHexaIcon,
  AlertHexaIcon,
  MoreDotIcon,
  DownloadIcon,
  FileIcon,
  GridIcon,
  AudioIcon,
  VideoIcon,
  BoltIcon,
  PlusIcon,
  BoxIcon,
  CloseIcon,
  CheckCircleIcon,
  AlertIcon,
  InfoIcon,
  ErrorIcon,
  ArrowUpIcon,
  FolderIcon,
  ArrowDownIcon,
  ArrowRightIcon,
  GroupIcon,
  BoxIconLine,
  ShootingStarIcon,
  DollarLineIcon,
  TrashBinIcon,
  AngleUpIcon,
  AngleDownIcon,
  PencilIcon,
  CheckLineIcon,
  CloseLineIcon,
  ChevronDownIcon,
  PaperPlaneIcon,
  EnvelopeIcon,
  LockIcon,
  UserIcon,
  CalenderIcon,
  EyeIcon,
  EyeCloseIcon,
  TimeIcon,
  CopyIcon,
  ChevronLeftIcon,
  UserCircleIcon,
  TaskIcon,
  ListIcon,
  TableIcon,
  PageIcon,
  PieChartIcon,
  BoxCubeIcon,
  PlugInIcon,
  DocsIcon,
  MailIcon,
  HorizontaLDots,
  ChevronUpIcon,
  ChatIcon,
};

```

### components\layout\BannerPage.tsx
```tsx
import { Swiper, SwiperSlide } from "swiper/react";
import { Autoplay } from "swiper/modules";
import "swiper/css";

interface Slide {
  id: number;
  image: string;
  title: string;
  description: string;
  button?: string;
}

const slides: Slide[] = [
  {
    id: 1,
    image: "/image/illustration.svg",
    title: "Quản lý thời gian hiệu quả với Pomodoro",
    description:
      "Sử dụng Pomodoro để tập trung, tăng năng suất và hiệu quả công việc.",
    button: "Bắt đầu ngay",
  },
  {
    id: 2,
    image: "/image/hinh2-removebg-preview.png",
    title: "Pomodoro là gì?",
    description: `Kỹ thuật Pomodoro là một phương pháp quản lý thời gian được phát triển bởi Francesco Cirillo vào cuối những năm 1980. Phương pháp này sử dụng bộ đếm thời gian để chia công việc thành các khoảng thời gian, thường là 25 phút, được gọi là "Pomodoros", xen kẽ với các khoảng nghỉ ngắn. Sau mỗi 4 Pomodoros, bạn sẽ có một khoảng nghỉ dài hơn. Mục tiêu là tăng sự tập trung và năng suất, đồng thời giảm sự mệt mỏi về tinh thần.`,
  },
];

export default function BannerPage() {
  return (
    <Swiper
      spaceBetween={30}
      slidesPerView={1}
      modules={[Autoplay]}
      autoplay={{
        delay: 5000,
        disableOnInteraction: false,
      }}
      loop={true}
    >
      {slides.map((slide, idx) => (
        <SwiperSlide key={slide.id || idx}>
          <div className="flex flex-col md:flex-row items-center justify-center px-6 md:px-16 py-12 h-auto md:h-[80vh]">
            <div className="md:w-1/2 flex justify-center mb-8 md:mb-0">
              <img
                src={slide.image}
                alt={`Slide ${idx + 1}`}
                className="w-full max-w-xs sm:max-w-sm md:max-w-md object-contain"
              />
            </div>
            <div className="md:w-1/2 text-center md:text-left px-4 md:px-8">
              <h1 className="text-2xl sm:text-3xl md:text-5xl font-bold mb-4 leading-tight">
                {slide.title}
              </h1>
              <p className="text-base sm:text-lg md:text-xl text-gray-600 mb-6 max-w-[600px] mx-auto md:mx-0">
                {slide.description}
              </p>
              {slide.button && (
                <button className="bg-blue-600 text-white px-6 py-2 rounded hover:bg-blue-700 transition text-base sm:text-lg">
                  {slide.button}
                </button>
              )}
            </div>
          </div>
        </SwiperSlide>
      ))}
    </Swiper>
  );
}

```

### components\layout\Footer.tsx
```tsx
import React from "react";

const Footer: React.FC = () => {
  return (
    <footer className="bg-gray-200 py-8">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex flex-col md:flex-row items-center justify-between gap-6">
          {/* Logo CareNest */}
          <div className="flex items-center justify-center md:justify-start">
            <div className="text-3xl md:text-4xl font-bold">
              <span className="text-orange-400">Care</span>
              <span className="text-gray-600">Nest</span>
            </div>
          </div>

          {/* Thông tin liên hệ */}
          <div className="flex flex-col md:flex-row items-center gap-6 md:gap-8 text-gray-600 text-sm">
            {/* Địa chỉ */}
            <div className="flex items-center gap-2">
              <svg
                className="w-5 h-5 text-gray-500"
                fill="currentColor"
                viewBox="0 0 20 20"
              >
                <path
                  fillRule="evenodd"
                  d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z"
                  clipRule="evenodd"
                />
              </svg>
              <span>Đường D9, Khu Công nghệ cao TP.HCM</span>
            </div>
            {/* Số điện thoại */}
            <div className="flex items-center gap-2">
              <svg
                className="w-5 h-5 text-gray-500"
                fill="currentColor"
                viewBox="0 0 20 20"
              >
                <path d="M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z" />
              </svg>
              <span>0-xxx-xxx-xxx/0-xxx-xxx-xxx</span>
            </div>

            <div className="flex items-center gap-4 mt-4">
              <a href="#" className="text-gray-500 hover:text-orange-400">
                <svg
                  className="w-6 h-6"
                  fill="currentColor"
                  viewBox="0 0 24 24"
                >
                  {/* Facebook icon */}
                </svg>
              </a>
              <a href="#" className="text-gray-500 hover:text-orange-400">
                <svg
                  className="w-6 h-6"
                  fill="currentColor"
                  viewBox="0 0 24 24"
                >
                  {/* Instagram icon */}
                </svg>
              </a>
            </div>
            {/* Email */}
            <div className="flex items-center gap-2">
              <svg
                className="w-5 h-5 text-gray-500"
                fill="currentColor"
                viewBox="0 0 20 20"
              >
                <path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z" />
                <path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z" />
              </svg>
              <span>carenest@gmail.com</span>
            </div>
            {/* Website */}
            <div className="flex items-center gap-2">
              <svg
                className="w-5 h-5 text-gray-500"
                fill="currentColor"
                viewBox="0 0 20 20"
              >
                <path
                  fillRule="evenodd"
                  d="M4.083 9h1.946c.089-1.546.383-2.97.837-4.118A6.004 6.004 0 004.083 9zM10 2a8 8 0 100 16 8 8 0 000-16zm0 2c-.076 0-.232.032-.465.262-.238.234-.497.623-.737 1.182-.389.907-.673 2.142-.766 3.556h3.936c-.093-1.414-.377-2.649-.766-3.556-.24-.559-.499-.948-.737-1.182C10.232 4.032 10.076 4 10 4zm3.971 5c-.089-1.546-.383-2.97-.837-4.118A6.004 6.004 0 0115.917 9h-1.946zm-2.003 2H8.032c.093 1.414.377 2.649.766 3.556.24.559.499.948.737 1.182.233.23.389.262.465.262.076 0 .232-.032.465-.262.238-.234.497-.623.737-1.182.389-.907.673-2.142.766-3.556zm1.166 4.118c.454-1.148.748-2.572.837-4.118h1.946a6.004 6.004 0 01-2.783 4.118zm-6.268 0C6.412 13.97 6.118 12.546 6.03 11H4.083a6.004 6.004 0 002.783 4.118z"
                  clipRule="evenodd"
                />
              </svg>
              <span>carenet.com</span>
            </div>
          </div>
        </div>
      </div>
    </footer>
  );
};

export default Footer;

```

### components\layout\Navbar.tsx
```tsx
import React from "react";
import { Link, useNavigate } from "react-router-dom";
import { useSelector, useDispatch } from "react-redux";
import { logout } from "../../store/slices/authSlice";
import Button from "../../components/ui/Button";
import { TaskIcon } from "../ui/Icons";
import type { RootState } from "../../store/store";

const Navbar: React.FC = () => {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const { isAuthenticated, user } = useSelector(
    (state: RootState) => state.auth
  );

  const handleLogout = () => {
    dispatch(logout());
    navigate("/");
  };

  return (
    <nav className="bg-white shadow-lg">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between h-16">
          <div className="flex items-center">
            <Link to="/" className="flex items-center space-x-2">
              <TaskIcon className="w-8 h-8 text-blue-600" />
              <span className="text-xl font-bold text-gray-900">
                Task Manager
              </span>
            </Link>
          </div>

          <div className="flex items-center space-x-4">
            {isAuthenticated ? (
              <>
                <span className="text-gray-700">Xin chào, {user?.email}</span>
                <Link to="/dashboard">
                  <Button variant="outline" size="sm">
                    Dashboard
                  </Button>
                </Link>
                <Button variant="outline" size="sm" onClick={handleLogout}>
                  Đăng xuất
                </Button>
              </>
            ) : (
              <Link to="/login">
                <Button variant="primary" size="sm">
                  Đăng nhập
                </Button>
              </Link>
            )}
          </div>
        </div>
      </div>
    </nav>
  );
};

export default Navbar;

```

### components\layout\NavHome.tsx
```tsx
import React, { useState } from 'react';
import '../../index.css';
import { Link } from 'react-router-dom';

const NavHome: React.FC = () => {
  const [openMenu, setOpenMenu] = useState<string | null>(null);

  const toggleMenu = (menuName: string) => {
    setOpenMenu(prev => (prev === menuName ? null : menuName));
  };

  return (
    <div className="relative bg-white">
      <nav className="mx-auto max-w-[90%] flex justify-between items-center px-6 py-4 relative z-50">
        {/* Logo bên trái */}
        <div className="text-5xl font-bold text-blue-600 select-none">Pomodoro</div>

        {/* Nút - chỉ hiện trên mobile */}
        <button
          className="md:hidden focus:outline-none"
          aria-label="Toggle menu"
          onClick={() => toggleMenu('mobile')}
        >
          {openMenu === 'mobile' ? (
            // Icon X đóng menu
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
              className="text-gray-800"
              viewBox="0 0 24 24"
            >
              <line x1="18" y1="6" x2="6" y2="18" />
              <line x1="6" y1="6" x2="18" y2="18" />
            </svg>
          ) : (
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
              className="text-gray-800"
              viewBox="0 0 24 24"
            >
              <line x1="3" y1="12" x2="21" y2="12" />
              <line x1="3" y1="6" x2="21" y2="6" />
              <line x1="3" y1="18" x2="21" y2="18" />
            </svg>
          )}
        </button>

        {/* Menu chính */}
        <ul
          className={`
            md:flex md:space-x-6 md:items-center
            ${openMenu === 'mobile' ? 'flex flex-col absolute top-full left-0 w-full bg-white shadow-md border-t' : 'hidden'}
            md:static md:w-auto md:shadow-none md:border-0
          `}
        >
          {/* Dropdown: Tính năng */}
          <li className="relative border-b md:border-0">
            <button
              onClick={() => toggleMenu('tinh-nang')}
              className="w-full flex justify-between items-center px-4 py-3 md:py-0 md:px-0 hover:underline text-lg md:inline-block"
            >
              Tính năng
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="16"
                height="16"
                fill="currentColor"
                className="inline ml-1"
                viewBox="0 0 16 16"
              >
                <path
                  fillRule="evenodd"
                  d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708"
                />
              </svg>
            </button>
            {openMenu === 'tinh-nang' && (
              <ul className="absolute md:absolute right-0 mt-5 w-48 bg-white shadow-lg border rounded md:py-1 md:space-y-1">
                <li className="px-4 py-2 hover:bg-gray-100 cursor-pointer">
                    <a href="#" className="block w-full h-full">Pomodoro</a>
                 </li>
                <li className="px-4 py-2 hover:bg-gray-100 cursor-pointer">
                    <a href="#" className="block w-full h-full">Báo cáo</a>
                 </li>
                <li className="px-4 py-2 hover:bg-gray-100 cursor-pointer">
                    <a href="#" className="block w-full h-full">Lịch sử</a>
                 </li>
              </ul>
            )}
          </li>

          {/* Dropdown: Giải pháp */}
          <li className="relative border-b md:border-0">
            <button
              onClick={() => toggleMenu('giai-phap')}
              className="w-full flex justify-between items-center px-4 py-3 md:py-0 md:px-0 hover:underline text-lg md:inline-block"
            >
              Giải pháp
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="16"
                height="16"
                fill="currentColor"
                className="inline ml-1"
                viewBox="0 0 16 16"
              >
                <path
                  fillRule="evenodd"
                  d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708"
                />
              </svg>
            </button>
            {openMenu === 'giai-phap' && (
              <ul className="absolute md:absolute right-0 mt-5 w-48 bg-white shadow-lg border rounded md:py-1 md:space-y-1">
                <li className="px-4 py-2 hover:bg-gray-100 cursor-pointer">
                    <a href="#" className="block w-full h-full">Cá nhân</a>
                 </li>
                <li className="px-4 py-2 hover:bg-gray-100 cursor-pointer">
                    <a href="#" className="block w-full h-full">Đội nhóm</a>
                 </li>
              </ul>
            )}
          </li>

          {/* Dropdown: Gói */}
          <li className="relative border-b md:border-0">
            <button
              onClick={() => toggleMenu('goi')}
              className="w-full flex justify-between items-center px-4 py-3 md:py-0 md:px-0 hover:underline text-lg md:inline-block"
            >
              Gói
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="16"
                height="16"
                fill="currentColor"
                className="inline ml-1"
                viewBox="0 0 16 16"
              >
                <path
                  fillRule="evenodd"
                  d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708"
                />
              </svg>
            </button>
            {openMenu === 'goi' && (
              <ul className="absolute md:absolute right-0 mt-5 w-48 bg-white shadow-lg border rounded md:py-1 md:space-y-1">
                <li className="px-4 py-2 hover:bg-gray-100 cursor-pointer">
                    <a href="#" className="block w-full h-full">Miễn phí</a>
                 </li>
                <li className="px-4 py-2 hover:bg-gray-100 cursor-pointer">
                    <a href="#" className="block w-full h-full">Premium</a>
                 </li>

              </ul>
            )}
          </li>

          {/* Đăng nhập */}
          <li className="border-b md:border-0">
            <Link
                to="/login"
                className="block w-full text-left px-4 py-3 md:px-0 md:py-0 md:inline hover:underline text-lg"
              >
                Đăng nhập
            </Link>
          </li>
        </ul>
       <div className="hidden lg:block absolute bottom-0 right-0 w-[40vw] border-b border-blue-600 z-10"></div>
      </nav>
    </div>
  );
};

export default NavHome;

```

### components\ui\Alert.tsx
```tsx
import { Link } from "react-router-dom";

interface AlertProps {
  variant: "success" | "error" | "warning" | "info"; // Alert type
  title: string; // Title of the alert
  message: string; // Message of the alert
  showLink?: boolean; // Whether to show the "Learn More" link
  linkHref?: string; // Link URL
  linkText?: string; // Link text
}

const Alert: React.FC<AlertProps> = ({
  variant,
  title,
  message,
  showLink = false,
  linkHref = "#",
  linkText = "Learn more",
}) => {
  // Tailwind classes for each variant
  const variantClasses = {
    success: {
      container:
        "border-success-500 bg-success-50 dark:border-success-500/30 dark:bg-success-500/15",
      icon: "text-success-500",
    },
    error: {
      container:
        "border-error-500 bg-error-50 dark:border-error-500/30 dark:bg-error-500/15",
      icon: "text-error-500",
    },
    warning: {
      container:
        "border-warning-500 bg-warning-50 dark:border-warning-500/30 dark:bg-warning-500/15",
      icon: "text-warning-500",
    },
    info: {
      container:
        "border-blue-light-500 bg-blue-light-50 dark:border-blue-light-500/30 dark:bg-blue-light-500/15",
      icon: "text-blue-light-500",
    },
  };

  // Icon for each variant
  const icons = {
    success: (
      <svg
        className="fill-current"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          fillRule="evenodd"
          clipRule="evenodd"
          d="M3.70186 12.0001C3.70186 7.41711 7.41711 3.70186 12.0001 3.70186C16.5831 3.70186 20.2984 7.41711 20.2984 12.0001C20.2984 16.5831 16.5831 20.2984 12.0001 20.2984C7.41711 20.2984 3.70186 16.5831 3.70186 12.0001ZM12.0001 1.90186C6.423 1.90186 1.90186 6.423 1.90186 12.0001C1.90186 17.5772 6.423 22.0984 12.0001 22.0984C17.5772 22.0984 22.0984 17.5772 22.0984 12.0001C22.0984 6.423 17.5772 1.90186 12.0001 1.90186ZM15.6197 10.7395C15.9712 10.388 15.9712 9.81819 15.6197 9.46672C15.2683 9.11525 14.6984 9.11525 14.347 9.46672L11.1894 12.6243L9.6533 11.0883C9.30183 10.7368 8.73198 10.7368 8.38051 11.0883C8.02904 11.4397 8.02904 12.0096 8.38051 12.3611L10.553 14.5335C10.7217 14.7023 10.9507 14.7971 11.1894 14.7971C11.428 14.7971 11.657 14.7023 11.8257 14.5335L15.6197 10.7395Z"
        />
      </svg>
    ),
    error: (
      <svg
        className="fill-current"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          fillRule="evenodd"
          clipRule="evenodd"
          d="M20.3499 12.0004C20.3499 16.612 16.6115 20.3504 11.9999 20.3504C7.38832 20.3504 3.6499 16.612 3.6499 12.0004C3.6499 7.38881 7.38833 3.65039 11.9999 3.65039C16.6115 3.65039 20.3499 7.38881 20.3499 12.0004ZM11.9999 22.1504C17.6056 22.1504 22.1499 17.6061 22.1499 12.0004C22.1499 6.3947 17.6056 1.85039 11.9999 1.85039C6.39421 1.85039 1.8499 6.3947 1.8499 12.0004C1.8499 17.6061 6.39421 22.1504 11.9999 22.1504ZM13.0008 16.4753C13.0008 15.923 12.5531 15.4753 12.0008 15.4753L11.9998 15.4753C11.4475 15.4753 10.9998 15.923 10.9998 16.4753C10.9998 17.0276 11.4475 17.4753 11.9998 17.4753L12.0008 17.4753C12.5531 17.4753 13.0008 17.0276 13.0008 16.4753ZM11.9998 6.62898C12.414 6.62898 12.7498 6.96476 12.7498 7.37898L12.7498 13.0555C12.7498 13.4697 12.414 13.8055 11.9998 13.8055C11.5856 13.8055 11.2498 13.4697 11.2498 13.0555L11.2498 7.37898C11.2498 6.96476 11.5856 6.62898 11.9998 6.62898Z"
          fill="#F04438"
        />
      </svg>
    ),
    warning: (
      <svg
        className="fill-current"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          fillRule="evenodd"
          clipRule="evenodd"
          d="M3.6501 12.0001C3.6501 7.38852 7.38852 3.6501 12.0001 3.6501C16.6117 3.6501 20.3501 7.38852 20.3501 12.0001C20.3501 16.6117 16.6117 20.3501 12.0001 20.3501C7.38852 20.3501 3.6501 16.6117 3.6501 12.0001ZM12.0001 1.8501C6.39441 1.8501 1.8501 6.39441 1.8501 12.0001C1.8501 17.6058 6.39441 22.1501 12.0001 22.1501C17.6058 22.1501 22.1501 17.6058 22.1501 12.0001C22.1501 6.39441 17.6058 1.8501 12.0001 1.8501ZM10.9992 7.52517C10.9992 8.07746 11.4469 8.52517 11.9992 8.52517H12.0002C12.5525 8.52517 13.0002 8.07746 13.0002 7.52517C13.0002 6.97289 12.5525 6.52517 12.0002 6.52517H11.9992C11.4469 6.52517 10.9992 6.97289 10.9992 7.52517ZM12.0002 17.3715C11.586 17.3715 11.2502 17.0357 11.2502 16.6215V10.945C11.2502 10.5308 11.586 10.195 12.0002 10.195C12.4144 10.195 12.7502 10.5308 12.7502 10.945V16.6215C12.7502 17.0357 12.4144 17.3715 12.0002 17.3715Z"
          fill=""
        />
      </svg>
    ),
    info: (
      <svg
        className="fill-current"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          fillRule="evenodd"
          clipRule="evenodd"
          d="M3.6501 11.9996C3.6501 7.38803 7.38852 3.64961 12.0001 3.64961C16.6117 3.64961 20.3501 7.38803 20.3501 11.9996C20.3501 16.6112 16.6117 20.3496 12.0001 20.3496C7.38852 20.3496 3.6501 16.6112 3.6501 11.9996ZM12.0001 1.84961C6.39441 1.84961 1.8501 6.39392 1.8501 11.9996C1.8501 17.6053 6.39441 22.1496 12.0001 22.1496C17.6058 22.1496 22.1501 17.6053 22.1501 11.9996C22.1501 6.39392 17.6058 1.84961 12.0001 1.84961ZM10.9992 7.52468C10.9992 8.07697 11.4469 8.52468 11.9992 8.52468H12.0002C12.5525 8.52468 13.0002 8.07697 13.0002 7.52468C13.0002 6.9724 12.5525 6.52468 12.0002 6.52468H11.9992C11.4469 6.52468 10.9992 6.9724 10.9992 7.52468ZM12.0002 17.371C11.586 17.371 11.2502 17.0352 11.2502 16.621V10.9445C11.2502 10.5303 11.586 10.1945 12.0002 10.1945C12.4144 10.1945 12.7502 10.5303 12.7502 10.9445V16.621C12.7502 17.0352 12.4144 17.371 12.0002 17.371Z"
          fill=""
        />
      </svg>
    ),
  };

  return (
    <div
      className={`rounded-xl border p-4 ${variantClasses[variant].container}`}
    >
      <div className="flex items-start gap-3">
        <div className={`-mt-0.5 ${variantClasses[variant].icon}`}>
          {icons[variant]}
        </div>

        <div>
          <h4 className="mb-1 text-sm font-semibold text-gray-800 dark:text-white/90">
            {title}
          </h4>

          <p className="text-sm text-gray-500 dark:text-gray-400">{message}</p>

          {showLink && (
            <Link
              to={linkHref}
              className="inline-block mt-3 text-sm font-medium text-gray-500 underline dark:text-gray-400"
            >
              {linkText}
            </Link>
          )}
        </div>
      </div>
    </div>
  );
};

export default Alert;

```

### components\ui\Avatar.tsx
```tsx
interface AvatarProps {
  src: string; // URL of the avatar image
  alt?: string; // Alt text for the avatar
  size?: "xsmall" | "small" | "medium" | "large" | "xlarge" | "xxlarge"; // Avatar size
  status?: "online" | "offline" | "busy" | "none"; // Status indicator
}

const sizeClasses = {
  xsmall: "h-6 w-6 max-w-6",
  small: "h-8 w-8 max-w-8",
  medium: "h-10 w-10 max-w-10",
  large: "h-12 w-12 max-w-12",
  xlarge: "h-14 w-14 max-w-14",
  xxlarge: "h-16 w-16 max-w-16",
};

const statusSizeClasses = {
  xsmall: "h-1.5 w-1.5 max-w-1.5",
  small: "h-2 w-2 max-w-2",
  medium: "h-2.5 w-2.5 max-w-2.5",
  large: "h-3 w-3 max-w-3",
  xlarge: "h-3.5 w-3.5 max-w-3.5",
  xxlarge: "h-4 w-4 max-w-4",
};

const statusColorClasses = {
  online: "bg-success-500",
  offline: "bg-error-400",
  busy: "bg-warning-500",
};

const Avatar: React.FC<AvatarProps> = ({
  src,
  alt = "User Avatar",
  size = "medium",
  status = "none",
}) => {
  return (
    <div className={`relative  rounded-full ${sizeClasses[size]}`}>
      {/* Avatar Image */}
      <img src={src} alt={alt} className="object-cover rounded-full" />

      {/* Status Indicator */}
      {status !== "none" && (
        <span
          className={`absolute bottom-0 right-0 rounded-full border-[1.5px] border-white dark:border-gray-900 ${
            statusSizeClasses[size]
          } ${statusColorClasses[status] || ""}`}
        ></span>
      )}
    </div>
  );
};

export default Avatar;

```

### components\ui\Badge.tsx
```tsx
type BadgeVariant = "light" | "solid";
type BadgeSize = "sm" | "md";
type BadgeColor =
  | "primary"
  | "success"
  | "error"
  | "warning"
  | "info"
  | "light"
  | "dark";

interface BadgeProps {
  variant?: BadgeVariant; // Light or solid variant
  size?: BadgeSize; // Badge size
  color?: BadgeColor; // Badge color
  startIcon?: React.ReactNode; // Icon at the start
  endIcon?: React.ReactNode; // Icon at the end
  children: React.ReactNode; // Badge content
}

const Badge: React.FC<BadgeProps> = ({
  variant = "light",
  color = "primary",
  size = "md",
  startIcon,
  endIcon,
  children,
}) => {
  const baseStyles =
    "inline-flex items-center px-2.5 py-0.5 justify-center gap-1 rounded-full font-medium";

  // Define size styles
  const sizeStyles = {
    sm: "text-theme-xs", // Smaller padding and font size
    md: "text-sm", // Default padding and font size
  };

  // Define color styles for variants
  const variants = {
    light: {
      primary:
        "bg-brand-50 text-brand-500 dark:bg-brand-500/15 dark:text-brand-400",
      success:
        "bg-success-50 text-success-600 dark:bg-success-500/15 dark:text-success-500",
      error:
        "bg-error-50 text-error-600 dark:bg-error-500/15 dark:text-error-500",
      warning:
        "bg-warning-50 text-warning-600 dark:bg-warning-500/15 dark:text-orange-400",
      info: "bg-blue-light-50 text-blue-light-500 dark:bg-blue-light-500/15 dark:text-blue-light-500",
      light: "bg-gray-100 text-gray-700 dark:bg-white/5 dark:text-white/80",
      dark: "bg-gray-500 text-white dark:bg-white/5 dark:text-white",
    },
    solid: {
      primary: "bg-brand-500 text-white dark:text-white",
      success: "bg-success-500 text-white dark:text-white",
      error: "bg-error-500 text-white dark:text-white",
      warning: "bg-warning-500 text-white dark:text-white",
      info: "bg-blue-light-500 text-white dark:text-white",
      light: "bg-gray-400 dark:bg-white/5 text-white dark:text-white/80",
      dark: "bg-gray-700 text-white dark:text-white",
    },
  };

  // Get styles based on size and color variant
  const sizeClass = sizeStyles[size];
  const colorStyles = variants[variant][color];

  return (
    <span className={`${baseStyles} ${sizeClass} ${colorStyles}`}>
      {startIcon && <span className="mr-1">{startIcon}</span>}
      {children}
      {endIcon && <span className="ml-1">{endIcon}</span>}
    </span>
  );
};

export default Badge;

```

### components\ui\Button.tsx
```tsx
import type { ReactNode } from "react";

interface ButtonProps {
  children: ReactNode; // Button text or content
  size?: "sm" | "md"; // Button size
  variant?: "primary" | "outline"; // Button variant
  startIcon?: ReactNode; // Icon before the text
  endIcon?: ReactNode; // Icon after the text
  onClick?: () => void; // Click handler
  disabled?: boolean; // Disabled state
  className?: string; // Disabled state
}

const Button: React.FC<ButtonProps> = ({
  children,
  size = "md",
  variant = "primary",
  startIcon,
  endIcon,
  onClick,
  className = "",
  disabled = false,
}) => {
  // Size Classes
  const sizeClasses = {
    sm: "px-4 py-3 text-sm",
    md: "px-5 py-3.5 text-sm",
  };

  // Variant Classes
  const variantClasses = {
    primary:
      "bg-orange-500 text-white shadow-theme-xs hover:bg-brand-600 disabled:bg-brand-300",
    outline:
      "bg-white text-gray-700 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 dark:bg-gray-800 dark:text-gray-400 dark:ring-gray-700 dark:hover:bg-white/[0.03] dark:hover:text-gray-300",
  };

  return (
    <button
      className={`inline-flex items-center justify-center gap-2 rounded-lg transition ${className} ${
        sizeClasses[size]
      } ${variantClasses[variant]} ${
        disabled ? "cursor-not-allowed opacity-50" : ""
      }`}
      onClick={onClick}
      disabled={disabled}
    >
      {startIcon && <span className="flex items-center">{startIcon}</span>}
      {children}
      {endIcon && <span className="flex items-center">{endIcon}</span>}
    </button>
  );
};

export default Button;

```

### components\ui\Card.tsx
```tsx
import { type ReactNode } from "react";

interface ComponentCardProps {
  title?: string;
  desc?: string;
  children: ReactNode;
  className?: string;
}

const ComponentCard = ({
  title,
  desc,
  children,
  className = "",
}: ComponentCardProps) => {
  return (
    <div className={`bg-white rounded-lg shadow-lg p-6 ${className}`}>
      {title && (
        <div className="mb-4">
          <h3 className="text-lg font-semibold text-gray-900">{title}</h3>
          {desc && <p className="text-sm text-gray-600 mt-1">{desc}</p>}
        </div>
      )}
      {children}
    </div>
  );
};

export default ComponentCard;

```

### components\ui\Dropdown.tsx
```tsx
import type React from "react";
import { useEffect, useRef } from "react";

interface DropdownProps {
  isOpen: boolean;
  onClose: () => void;
  children: React.ReactNode;
  className?: string;
}

export const Dropdown: React.FC<DropdownProps> = ({
  isOpen,
  onClose,
  children,
  className = "",
}) => {
  const dropdownRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (
        dropdownRef.current &&
        !dropdownRef.current.contains(event.target as Node) &&
        !(event.target as HTMLElement).closest(".dropdown-toggle")
      ) {
        onClose();
      }
    };

    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [onClose]);

  if (!isOpen) return null;

  return (
    <div
      ref={dropdownRef}
      className={`absolute z-40  right-0 mt-2  rounded-xl border border-gray-200 bg-white  shadow-theme-lg dark:border-gray-800 dark:bg-gray-dark ${className}`}
    >
      {children}
    </div>
  );
};

```

### components\ui\DropdownItem.tsx
```tsx
import type React from "react";
import { Link } from "react-router-dom";

interface DropdownItemProps {
  tag?: "a" | "button";
  to?: string;
  onClick?: () => void;
  onItemClick?: () => void;
  baseClassName?: string;
  className?: string;
  children: React.ReactNode;
}

export const DropdownItem: React.FC<DropdownItemProps> = ({
  tag = "button",
  to,
  onClick,
  onItemClick,
  baseClassName = "block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900",
  className = "",
  children,
}) => {
  const combinedClasses = `${baseClassName} ${className}`.trim();

  const handleClick = (event: React.MouseEvent) => {
    if (tag === "button") {
      event.preventDefault();
    }
    if (onClick) onClick();
    if (onItemClick) onItemClick();
  };

  if (tag === "a" && to) {
    return (
      <Link to={to} className={combinedClasses} onClick={handleClick}>
        {children}
      </Link>
    );
  }

  return (
    <button onClick={handleClick} className={combinedClasses}>
      {children}
    </button>
  );
};

```

### components\ui\Icons.tsx
```tsx
import React from "react";

interface IconProps {
  className?: string;
}

export const EyeIcon: React.FC<IconProps> = ({ className = "w-5 h-5" }) => (
  <svg
    className={className}
    fill="none"
    stroke="currentColor"
    viewBox="0 0 24 24"
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2}
      d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
    />
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2}
      d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"
    />
  </svg>
);

export const EyeSlashIcon: React.FC<IconProps> = ({
  className = "w-5 h-5",
}) => (
  <svg
    className={className}
    fill="none"
    stroke="currentColor"
    viewBox="0 0 24 24"
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2}
      d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21"
    />
  </svg>
);

export const TaskIcon: React.FC<IconProps> = ({ className = "w-6 h-6" }) => (
  <svg
    className={className}
    fill="none"
    stroke="currentColor"
    viewBox="0 0 24 24"
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2}
      d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"
    />
  </svg>
);

```

### components\ui\Input.tsx
```tsx
import { type InputHTMLAttributes, forwardRef } from "react";
import classNames from "classnames";

interface InputProps extends InputHTMLAttributes<HTMLInputElement> {
  label?: string;
  error?: string;
  fullWidth?: boolean;
}

export const Input = forwardRef<HTMLInputElement, InputProps>(
  ({ label, error, fullWidth = false, className, ...props }, ref) => {
    const inputClasses = classNames(
      "px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors",
      {
        "border-red-500 focus:ring-red-500": error,
        "border-gray-300": !error,
        "w-full": fullWidth,
      },
      className
    );

    return (
      <div className={fullWidth ? "w-full" : ""}>
        {label && (
          <label className="block text-sm font-medium text-gray-700 mb-1">
            {label}
          </label>
        )}
        <input ref={ref} className={inputClasses} {...props} />
        {error && <p className="mt-1 text-sm text-red-500">{error}</p>}
      </div>
    );
  }
);

Input.displayName = "Input";

```

### components\ui\Modal.tsx
```tsx

```

### components\ui\Pagination.tsx
```tsx

```

### components\ui\Spinner.tsx
```tsx
import React from "react";
import classNames from "classnames";

interface SpinnerProps {
  size?: "sm" | "md" | "lg";
  className?: string;
}

export const Spinner: React.FC<SpinnerProps> = ({ size = "md", className }) => {
  const sizeClasses = {
    sm: "w-4 h-4",
    md: "w-6 h-6",
    lg: "w-8 h-8",
  };

  const spinnerClasses = classNames(
    "animate-spin rounded-full border-2 border-gray-300 border-t-blue-600",
    sizeClasses[size],
    className
  );

  return <div className={spinnerClasses} />;
};

```

### components\ui\Tabs.tsx
```tsx

```

### config\axios.ts
```ts
// src/config/axios.ts
import axios, { AxiosError } from "axios";
import type { InternalAxiosRequestConfig } from "axios";
import { toast } from "react-toastify";

let stateToken: string | null = null;
let logoutCallback: (() => void) | null = null;

// ✅ Export function này
export const setLogoutCallback = (callback: () => void) => {
  logoutCallback = callback;
};

// ✅ Export function này
export const updateStateToken = (token: string | null) => {
  stateToken = token;
};

const api = axios.create({
  baseURL: "https://carenest-api.lighttail.com/api/",
  timeout: 10000,
  headers: {
    "Content-Type": "application/json",
    Accept: "application/json",
  },
});

const handleBefore = (config: InternalAxiosRequestConfig) => {
  const token = localStorage.getItem("authToken") || stateToken;

  if (token) {
    config.headers["Authorization"] = `Bearer ${token}`;
  }
  return config;
};

const handleRequestError = (error: AxiosError) => {
  console.error("Request error:", error);
  return Promise.reject(error);
};

const logoutUser = () => {
  localStorage.removeItem("authToken");
  updateStateToken(null);

  if (logoutCallback) {
    logoutCallback();
  }
};

const handleResponseError = (error: AxiosError) => {
  if (error.response?.status === 401) {
    logoutUser();
    toast.error(
      "Phiên đăng nhập không hợp lệ hoặc đã hết hạn. Vui lòng đăng nhập lại."
    );
    window.location.href = "/login";
  }

  console.error("Response error:", error);
  return Promise.reject(error);
};

api.interceptors.request.use(handleBefore, handleRequestError);
api.interceptors.response.use((response) => response, handleResponseError);

export { logoutUser };
export default api;

```

### context\SidebarContext.tsx
```tsx
import { createContext, useContext, useState, useEffect } from "react";

type SidebarContextType = {
  isExpanded: boolean;
  isMobileOpen: boolean;
  isHovered: boolean;
  activeItem: string | null;
  openSubmenu: string | null;
  toggleSidebar: () => void;
  toggleMobileSidebar: () => void;
  setIsHovered: (isHovered: boolean) => void;
  setActiveItem: (item: string | null) => void;
  toggleSubmenu: (item: string) => void;
};

const SidebarContext = createContext<SidebarContextType | undefined>(undefined);

export const useSidebar = () => {
  const context = useContext(SidebarContext);
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider");
  }
  return context;
};

export const SidebarProvider: React.FC<{ children: React.ReactNode }> = ({
  children,
}) => {
  const [isExpanded, setIsExpanded] = useState(true);
  const [isMobileOpen, setIsMobileOpen] = useState(false);
  const [isMobile, setIsMobile] = useState(false);
  const [isHovered, setIsHovered] = useState(false);
  const [activeItem, setActiveItem] = useState<string | null>(null);
  const [openSubmenu, setOpenSubmenu] = useState<string | null>(null);

  useEffect(() => {
    const handleResize = () => {
      const mobile = window.innerWidth < 768;
      setIsMobile(mobile);
      if (!mobile) {
        setIsMobileOpen(false);
      }
    };

    handleResize();
    window.addEventListener("resize", handleResize);

    return () => {
      window.removeEventListener("resize", handleResize);
    };
  }, []);

  const toggleSidebar = () => {
    setIsExpanded((prev) => !prev);
  };

  const toggleMobileSidebar = () => {
    setIsMobileOpen((prev) => !prev);
  };

  const toggleSubmenu = (item: string) => {
    setOpenSubmenu((prev) => (prev === item ? null : item));
  };

  return (
    <SidebarContext.Provider
      value={{
        isExpanded: isMobile ? false : isExpanded,
        isMobileOpen,
        isHovered,
        activeItem,
        openSubmenu,
        toggleSidebar,
        toggleMobileSidebar,
        setIsHovered,
        setActiveItem,
        toggleSubmenu,
      }}
    >
      {children}
    </SidebarContext.Provider>
  );
};

```

### context\ThemeContext.tsx
```tsx
"use client";

import type React from "react";
import { createContext, useState, useContext, useEffect } from "react";

type Theme = "light" | "dark";

type ThemeContextType = {
  theme: Theme;
  toggleTheme: () => void;
};

const ThemeContext = createContext<ThemeContextType | undefined>(undefined);

export const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({
  children,
}) => {
  const [theme, setTheme] = useState<Theme>("light");
  const [isInitialized, setIsInitialized] = useState(false);

  useEffect(() => {
    // This code will only run on the client side
    const savedTheme = localStorage.getItem("theme") as Theme | null;
    const initialTheme = savedTheme || "light"; // Default to light theme

    setTheme(initialTheme);
    setIsInitialized(true);
  }, []);

  useEffect(() => {
    if (isInitialized) {
      localStorage.setItem("theme", theme);
      if (theme === "dark") {
        document.documentElement.classList.add("dark");
      } else {
        document.documentElement.classList.remove("dark");
      }
    }
  }, [theme, isInitialized]);

  const toggleTheme = () => {
    setTheme((prevTheme) => (prevTheme === "light" ? "dark" : "light"));
  };

  return (
    <ThemeContext.Provider value={{ theme, toggleTheme }}>
      {children}
    </ThemeContext.Provider>
  );
};

export const useTheme = () => {
  const context = useContext(ThemeContext);
  if (context === undefined) {
    throw new Error("useTheme must be used within a ThemeProvider");
  }
  return context;
};

```

### hooks\useAuth.ts
```ts

```

### layout\AppHeader.tsx
```tsx
// layout/AppHeader.tsx
import { useState } from "react";
import NotificationDropdown from "../components/header/NotificationDropdown";
import UserDropdown from "../components/header/UserDropdown";
import { Link } from "react-router-dom";

interface HeaderProps {
  onClick?: () => void;
  onToggle?: () => void;
}

const AppHeader: React.FC<HeaderProps> = ({ onClick, onToggle }) => {
  const [isApplicationMenuOpen, setApplicationMenuOpen] = useState(false);

  const toggleApplicationMenu = () => {
    setApplicationMenuOpen(!isApplicationMenuOpen);
  };

  return (
    <header className="sticky top-0 flex w-full bg-white/80 backdrop-blur-md border-gray-200/50 z-50 dark:border-gray-800/50 dark:bg-gray-900/80 lg:border-b transition-all duration-300">
      <div className="flex flex-col items-center justify-between grow lg:flex-row lg:px-6">
        <div className="flex items-center justify-between w-full gap-2 px-3 py-3 border-b border-gray-200/50 dark:border-gray-800/50 sm:gap-4 lg:justify-normal lg:border-b-0 lg:px-0 lg:py-4">
          {/* Logo và tên ứng dụng cho user */}
          <Link to="/" className="flex items-center space-x-3">
            <img
              src="/public/image/ranbowlogo.png"
              alt="Logo"
              className="w-10 h-10 transition-all duration-300"
            />
            <span className="font-semibold text-2xl select-none hidden sm:block">
              <span className="text-orange-500">Care</span>
              <span className="text-gray-900 dark:text-white">Nest</span>
            </span>
          </Link>

          {/* Menu mobile toggle - ẩn vì không có sidebar */}
          <button
            onClick={toggleApplicationMenu}
            className="flex items-center justify-center w-10 h-10 text-gray-700 rounded-lg hover:bg-gray-100 dark:text-gray-400 dark:hover:bg-gray-800 lg:hidden"
          >
            <svg
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                fillRule="evenodd"
                clipRule="evenodd"
                d="M5.99902 10.4951C6.82745 10.4951 7.49902 11.1667 7.49902 11.9951V12.0051C7.49902 12.8335 6.82745 13.5051 5.99902 13.5051C5.1706 13.5051 4.49902 12.8335 4.49902 12.0051V11.9951C4.49902 11.1667 5.1706 10.4951 5.99902 10.4951ZM17.999 10.4951C18.8275 10.4951 19.499 11.1667 19.499 11.9951V12.0051C19.499 12.8335 18.8275 13.5051 17.999 13.5051C17.1706 13.5051 16.499 12.8335 16.499 12.0051V11.9951C16.499 11.1667 17.1706 10.4951 17.999 10.4951ZM13.499 11.9951C13.499 11.1667 12.8275 10.4951 11.999 10.4951C11.1706 10.4951 10.499 11.1667 10.499 11.9951V12.0051C10.499 12.8335 11.1706 13.5051 11.999 13.5051C12.8275 13.5051 13.499 12.8335 13.499 12.0051V11.9951Z"
                fill="currentColor"
              />
            </svg>
          </button>

          {/* Search bar - chỉ hiện desktop */}
          <div className="hidden lg:block ml-auto">
            <form>
              <div className="relative">
                <button className="absolute -translate-y-1/2 left-4 top-1/2">
                  <svg
                    className="fill-gray-500 dark:fill-gray-400"
                    width="20"
                    height="20"
                    viewBox="0 0 20 20"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      fillRule="evenodd"
                      clipRule="evenodd"
                      d="M3.04175 9.37363C3.04175 5.87693 5.87711 3.04199 9.37508 3.04199C12.8731 3.04199 15.7084 5.87693 15.7084 9.37363C15.7084 12.8703 12.8731 15.7053 9.37508 15.7053C5.87711 15.7053 3.04175 12.8703 3.04175 9.37363ZM9.37508 1.54199C5.04902 1.54199 1.54175 5.04817 1.54175 9.37363C1.54175 13.6991 5.04902 17.2053 9.37508 17.2053C11.2674 17.2053 13.003 16.5344 14.357 15.4176L17.177 18.238C17.4699 18.5309 17.9448 18.5309 18.2377 18.238C18.5306 17.9451 18.5306 17.4703 18.2377 17.1774L15.418 14.3573C16.5365 13.0033 17.2084 11.2669 17.2084 9.37363C17.2084 5.04817 13.7011 1.54199 9.37508 1.54199Z"
                      fill=""
                    />
                  </svg>
                </button>
                <input
                  type="text"
                  placeholder="Tìm kiếm..."
                  className="h-11 w-full rounded-lg border border-gray-200 bg-transparent py-2.5 pl-12 pr-4 text-sm text-gray-800 shadow-theme-xs placeholder:text-gray-400 focus:border-brand-300 focus:outline-hidden focus:ring-3 focus:ring-brand-500/10 dark:border-gray-800 dark:bg-gray-900 dark:text-white/90 dark:placeholder:text-white/30 dark:focus:border-brand-800 xl:w-[330px]"
                />
              </div>
            </form>
          </div>

          {/* Notifications và User menu */}
          <div className="flex items-center gap-2 ml-auto lg:ml-4">
            <NotificationDropdown />
            <UserDropdown />
          </div>
        </div>
      </div>
    </header>
  );
};

export default AppHeader;

```

### layout\AppHeaderForAdmin.tsx
```tsx
import SearchBar, { type SearchField } from "../components/common/SearchBar";

const AppHeaderForAdmin: React.FC = () => {
  // Định nghĩa các trường tìm kiếm
  const searchFields: SearchField[] = [
    {
      name: "keyword",
      label: "",
      placeholder: "Nhập từ khóa tìm kiếm...",
      type: "text",
      width: "w-1/2",
    },

    {
      name: "location",
      label: "",
      placeholder: "Chọn khu vực",
      type: "select",
      width: "w-1/4",
      options: [
        { value: "hanoi", label: "Hà Nội" },
        { value: "hcm", label: "TP.HCM" },
        { value: "danang", label: "Đà Nẵng" },
        { value: "other", label: "Khác" },
      ],
    },
  ];

  // Xử lý khi người dùng tìm kiếm
  const handleSearch = (searchValues: Record<string, string>) => {
    console.log("Giá trị tìm kiếm:", searchValues);
    // TODO: Xử lý logic tìm kiếm ở đây
    // Ví dụ: gọi API, filter dữ liệu, navigate...
  };

  return (
    <header className="bg-[#2A9D8F] shadow-md">
      <div className="container mx-auto px-4 py-4">
        {/* Logo và navigation */}
        <div className="flex items-center justify-between mb-4">
          {/* Navigation menu */}
          <nav className="hidden md:flex space-x-6"></nav>
        </div>

        {/* SearchBar component */}
        <div className="flex justify-center items-center">
          <div className="w-full max-w-4xl">
            <SearchBar
              fields={searchFields}
              onSearch={handleSearch}
              buttonLabel="Tìm kiếm"
            />
          </div>
        </div>
      </div>
    </header>
  );
};

export default AppHeaderForAdmin;

```

### layout\AppHeaderForUser.tsx
```tsx
// layout/AppHeaderForUser.tsx
import { useState } from "react";
import NotificationDropdown from "../components/header/NotificationDropdown";
import UserDropdown from "../components/header/UserDropdown";
import SearchBar from "../components/common/SearchBar";
import { Link } from "react-router-dom";
import type { SearchField } from "../components/common/SearchBar";

interface HeaderProps {
  onClick?: () => void;
  onToggle?: () => void;
}

const AppHeaderForUser: React.FC<HeaderProps> = () => {
  const [isApplicationMenuOpen, setApplicationMenuOpen] = useState(false);

  const toggleApplicationMenu = () => {
    setApplicationMenuOpen(!isApplicationMenuOpen);
  };

  // Định nghĩa các trường filter
  const filterFields: SearchField[] = [
    {
      name: "location",
      label: "Địa điểm",
      placeholder: "Chọn địa điểm",
      type: "select",
      width: "w-1/4",
      options: [
        { value: "hanoi", label: "Hà Nội" },
        { value: "hcm", label: "TP. Hồ Chí Minh" },
        { value: "danang", label: "Đà Nẵng" },
        { value: "haiphong", label: "Hải Phòng" },
      ],
    },
    {
      name: "petType",
      label: "Loại thú",
      placeholder: "Chọn loại thú cưng",
      type: "select",
      width: "w-1/4",
      options: [
        { value: "dog", label: "🐕 Chó" },
        { value: "cat", label: "🐱 Mèo" },
        { value: "bird", label: "🐦 Chim" },
        { value: "fish", label: "🐠 Cá" },
        { value: "rabbit", label: "🐰 Thỏ" },
      ],
    },
    {
      name: "sortBy",
      label: "Sắp xếp",
      placeholder: "Sắp xếp theo",
      type: "select",
      width: "w-1/4",
      options: [
        { value: "price_asc", label: "Giá tăng dần" },
        { value: "price_desc", label: "Giá giảm dần" },
        { value: "rating", label: "Đánh giá cao nhất" },
        { value: "distance", label: "Khoảng cách gần nhất" },
        { value: "newest", label: "Mới nhất" },
      ],
    },
    {
      name: "priceRange",
      label: "Khoảng giá",
      placeholder: "Chọn khoảng giá",
      type: "select",
      width: "w-1/4",
      options: [
        { value: "0-100", label: "Dưới 100k" },
        { value: "100-300", label: "100k - 300k" },
        { value: "300-500", label: "300k - 500k" },
        { value: "500-1000", label: "500k - 1tr" },
        { value: "1000+", label: "Trên 1tr" },
      ],
    },
  ];

  const handleSearch = (values: Record<string, string>) => {
    console.log("Filter values:", values);
  };

  return (
    <>
      {/* Header chính */}
      <header
        className="sticky top-0 flex w-full backdrop-blur-md z-50 transition-all duration-300"
        style={{ backgroundColor: "#2A9D8F" }}
      >
        <div className="w-full max-w-8xl mx-auto px-6 lg:px-8">
          <div className="flex items-center justify-between h-16 lg:h-20">
            {/* Logo và tên ứng dụng - Bên trái */}
            <div className="flex items-center space-x-3 flex-shrink-0">
              <Link to="/" className="flex items-center space-x-3">
                <img
                  src="/public/image/ranbowlogo.png"
                  alt="Logo"
                  className="w-10 h-10 lg:w-25 lg:h-20 transition-all duration-300"
                />
                <span className="font-semibold text-xl lg:text-2xl select-none hidden sm:block text-white">
                  <span className="text-orange-300 text-5xl">Care</span>
                  <span className="text-white text-5xl">Nest</span>
                </span>
              </Link>
            </div>

            {/* Search bar - Ở giữa, chỉ hiện trên desktop */}
            <div className="hidden lg:flex flex-1 justify-center max-w-2xl mx-8">
              <form className="w-full">
                <div className="relative">
                  <input
                    type="text"
                    placeholder="Tìm tên dịch vụ"
                    className="h-12 w-full rounded-lg border-0 bg-white py-3 pl-4 pr-24 text-sm text-gray-800 placeholder:text-gray-500 focus:outline-none focus:ring-2 focus:ring-white/50"
                  />
                  <button
                    type="submit"
                    className="absolute right-2 top-1/2 -translate-y-1/2 bg-[#2A9D8F] hover:bg-[#238276] text-white px-4 py-2 rounded-md text-sm font-medium transition-colors duration-200"
                  >
                    Tìm kiếm
                  </button>
                </div>
              </form>
            </div>

            {/* Mobile menu button */}
            <button
              onClick={toggleApplicationMenu}
              className="flex items-center justify-center w-10 h-10 text-white rounded-lg hover:bg-white/10 lg:hidden"
            >
              <svg
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  fillRule="evenodd"
                  clipRule="evenodd"
                  d="M5.99902 10.4951C6.82745 10.4951 7.49902 11.1667 7.49902 11.9951V12.0051C7.49902 12.8335 6.82745 13.5051 5.99902 13.5051C5.1706 13.5051 4.49902 12.8335 4.49902 12.0051V11.9951C4.49902 11.1667 5.1706 10.4951 5.99902 10.4951ZM17.999 10.4951C18.8275 10.4951 19.499 11.1667 19.499 11.9951V12.0051C19.499 12.8335 18.8275 13.5051 17.999 13.5051C17.1706 13.5051 16.499 12.8335 16.499 12.0051V11.9951C16.499 11.1667 17.1706 10.4951 17.999 10.4951ZM13.499 11.9951C13.499 11.1667 12.8275 10.4951 11.999 10.4951C11.1706 10.4951 10.499 11.1667 10.499 11.9951V12.0051C10.499 12.8335 11.1706 13.5051 11.999 13.5051C12.8275 13.5051 13.499 12.8335 13.499 12.0051V11.9951Z"
                  fill="currentColor"
                />
              </svg>
            </button>

            {/* Notifications, User menu và Giỏ hàng */}
            <div className="hidden lg:flex items-center gap-4 flex-shrink-0">
              <NotificationDropdown />
              <UserDropdown />
              <Link
                to="/cart"
                className="relative flex items-center justify-center w-11 h-11 text-white rounded-full hover:bg-white/10 transition-colors duration-200"
              >
                <svg
                  width="24"
                  height="24"
                  viewBox="0 0 24 24"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M3 3H5L5.4 5M7 13H17L21 5H5.4M7 13L5.4 5M7 13L4.7 15.3C4.3 15.7 4.6 16.5 5.1 16.5H17M17 13V16.5M9 19.5C9.8 19.5 10.5 20.2 10.5 21S9.8 22.5 9 22.5 7.5 21.8 7.5 21 8.2 19.5 9 19.5ZM20 19.5C20.8 19.5 21.5 20.2 21.5 21S20.8 22.5 20 22.5 18.5 21.8 18.5 21 19.2 19.5 20 19.5Z"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  />
                </svg>
                <span className="absolute -top-1 -right-1 bg-orange-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center text-[10px] font-medium">
                  3
                </span>
              </Link>
            </div>
          </div>
          {/* Mobile search và menu */}
          {isApplicationMenuOpen && (
            <div className="lg:hidden pb-4">
              <form>
                <div className="relative">
                  <input
                    type="text"
                    placeholder="Tìm tên dịch vụ"
                    className="h-11 w-full rounded-lg border-0 bg-white py-3 pl-4 pr-20 text-sm text-gray-800 placeholder:text-gray-500 focus:outline-none focus:ring-2 focus:ring-white/50"
                  />
                  <button
                    type="submit"
                    className="absolute right-2 top-1/2 -translate-y-1/2 bg-[#2A9D8F] hover:bg-[#238276] text-white px-3 py-1.5 rounded text-sm font-medium"
                  >
                    Tìm kiếm
                  </button>
                </div>
              </form>

              <div className="flex items-center justify-between mt-4 pt-4 border-t border-white/20">
                <NotificationDropdown />
                <UserDropdown />
                <Link
                  to="/cart"
                  className="relative flex items-center justify-center w-10 h-10 text-white rounded-full hover:bg-white/10"
                >
                  <svg
                    width="20"
                    height="20"
                    viewBox="0 0 24 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M3 3H5L5.4 5M7 13H17L21 5H5.4M7 13L5.4 5M7 13L4.7 15.3C4.3 15.7 4.6 16.5 5.1 16.5H17M17 13V16.5M9 19.5C9.8 19.5 10.5 20.2 10.5 21S9.8 22.5 9 22.5 7.5 21.8 7.5 21 8.2 19.5 9 19.5ZM20 19.5C20.8 19.5 21.5 20.2 21.5 21S20.8 22.5 20 22.5 18.5 21.8 18.5 21 19.2 19.5 20 19.5Z"
                      stroke="currentColor"
                      strokeWidth="2"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                    />
                  </svg>
                  <span className="absolute -top-1 -right-1 bg-orange-500 text-white text-xs rounded-full h-4 w-4 flex items-center justify-center text-[9px] font-medium">
                    3
                  </span>
                </Link>
              </div>
            </div>
          )}
        </div>
      </header>

      {/* Thanh Filter */}
      <div className="bg-[#2A9D8F] border-t border-white/10">
        <div className="w-full max-w-8xl mx-auto px-6 lg:px-8 p-2">
          <SearchBar
            fields={filterFields}
            onSearch={handleSearch}
            buttonLabel="Lọc kết quả"
          />
        </div>
      </div>
    </>
  );
};

export default AppHeaderForUser;

```

### layout\AppLayout.tsx
```tsx
import { SidebarProvider, useSidebar } from "../context/SidebarContext";
import AppHeader from "./AppHeader";
import Backdrop from "./Backdrop";
import AppSidebar from "./AppSidebar";

import React from "react";

interface AppLayoutProps {
  children: React.ReactNode;
}

const LayoutContent: React.FC<AppLayoutProps> = ({ children }) => {
  const { isExpanded, isHovered, isMobileOpen } = useSidebar();

  return (
    <div className="xl:flex">
      <div>
        <AppSidebar />
        <Backdrop />
      </div>
      <div
        className={`flex-1 transition-all duration-300 ease-in-out ${
          isExpanded || isHovered ? "lg:ml-[290px]" : "lg:ml-[90px]"
        } ${isMobileOpen ? "ml-0" : ""}`}
      >
        <AppHeader />
        <div className="p-4 mx-auto max-w-screen-2xl md:p-6">{children}</div>
      </div>
    </div>
  );
};

const AppLayout: React.FC<AppLayoutProps> = ({ children }) => {
  return (
    <SidebarProvider>
      <LayoutContent>{children}</LayoutContent>
    </SidebarProvider>
  );
};

export default AppLayout;

```

### layout\AppLayoutForShopAdmin.tsx
```tsx
import { SidebarProvider, useSidebar } from "../context/SidebarContext";
import AppHeader from "./AppHeader";
import Backdrop from "./Backdrop";
import AppSidebar from "./AppSidebar";

import React from "react";

interface AppLayoutProps {
  children: React.ReactNode;
}

const LayoutContent: React.FC<AppLayoutProps> = ({ children }) => {
  const { isExpanded, isHovered, isMobileOpen } = useSidebar();

  return (
    <div className="xl:flex">
      <div>
        <AppSidebar />
        <Backdrop />
      </div>
      <div
        className={`flex-1 transition-all duration-300 ease-in-out ${
          isExpanded || isHovered ? "lg:ml-[290px]" : "lg:ml-[90px]"
        } ${isMobileOpen ? "ml-0" : ""}`}
      >
        <AppHeader />
        <div className="p-4 mx-auto max-w-screen-2xl md:p-6">{children}</div>
      </div>
    </div>
  );
};

const AppLayoutForShopAdmin: React.FC<AppLayoutProps> = ({ children }) => {
  return (
    <SidebarProvider>
      <LayoutContent>{children}</LayoutContent>
    </SidebarProvider>
  );
};

export default AppLayoutForShopAdmin;

```

### layout\AppLayoutForUser.tsx
```tsx
// layout/AppLayoutForUser.tsx
import type { ReactNode } from "react";
import AppHeaderForUser from "./AppHeaderForUser";
import Footer from "../components/layout/Footer";

interface AppLayoutForUserProps {
  children: ReactNode;
}

const AppLayoutForUser: React.FC<AppLayoutForUserProps> = ({ children }) => {
  return (
    <div className="min-h-screen">
      {/* Header cho user - không có sidebar */}
      <AppHeaderForUser />

      {/* Main content - full width */}
      <main className="w-full p-4 md:p-6">{children}</main>

      {/* Footer */}
      <Footer />
    </div>
  );
};

export default AppLayoutForUser;

```

### layout\AppSidebar.tsx
```tsx
import { useCallback, useEffect, useRef, useState } from "react";
import { Link, useLocation } from "react-router-dom";

import {
  FiGrid as DashboardIcon,
  FiClock as ClockIcon,
  FiCheckSquare as TaskIcon,
  FiPackage as PackageIcon,
  FiCreditCard as WalletIcon,
  FiChevronDown as ChevronDownIcon,
  FiMoreHorizontal as HorizontaLDots,
} from "react-icons/fi";
import { useSidebar } from "../context/SidebarContext";

type NavItem = {
  name: string;
  icon: React.ReactNode;
  path?: string;
  subItems?: { name: string; path: string; pro?: boolean; new?: boolean }[];
};

const navItems: NavItem[] = [
  {
    icon: <DashboardIcon />,
    name: "Dashboard",
    path: "/Dashboard",
  },
  {
    icon: <ClockIcon />,
    name: "Time Management",
    path: "/time-management",
  },
  {
    icon: <TaskIcon />,
    name: "Task Management",
    subItems: [
      { name: "Employee Management", path: "/employee-management" },
      { name: "Task Manager", path: "/task-manager" },
      { name: "Task Report", path: "/task-report" },
    ],
  },
  {
    icon: <PackageIcon />,
    name: "Service Package",
    path: "/service-package",
  },
  {
    icon: <WalletIcon />,
    name: "Wallet",
    path: "/wallet",
  },
];

const AppSidebar: React.FC = () => {
  const { isExpanded, isMobileOpen, isHovered, setIsHovered } = useSidebar();
  const location = useLocation();

  const [openSubmenu, setOpenSubmenu] = useState<{ index: number } | null>(
    null
  );
  const [subMenuHeight, setSubMenuHeight] = useState<Record<string, number>>(
    {}
  );
  const subMenuRefs = useRef<Record<string, HTMLDivElement | null>>({});

  const isActive = useCallback(
    (path: string) => location.pathname === path,
    [location.pathname]
  );

  useEffect(() => {
    let submenuMatched = false;
    navItems.forEach((nav, index) => {
      if (nav.subItems) {
        nav.subItems.forEach((subItem) => {
          if (isActive(subItem.path)) {
            setOpenSubmenu({ index });
            submenuMatched = true;
          }
        });
      }
    });
    if (!submenuMatched) setOpenSubmenu(null);
  }, [location, isActive]);

  useEffect(() => {
    if (openSubmenu !== null) {
      const key = `${openSubmenu.index}`;
      if (subMenuRefs.current[key]) {
        setSubMenuHeight((prev) => ({
          ...prev,
          [key]: subMenuRefs.current[key]?.scrollHeight || 0,
        }));
      }
    }
  }, [openSubmenu]);

  const handleSubmenuToggle = (index: number) => {
    setOpenSubmenu((prev) => (prev?.index === index ? null : { index }));
  };

  const renderMenuItems = (items: NavItem[]) => (
    <ul className="flex flex-col gap-4">
      {items.map((nav, index) => (
        <li key={nav.name}>
          {nav.subItems ? (
            <button
              onClick={() => handleSubmenuToggle(index)}
              className={`menu-item group cursor-pointer ${
                openSubmenu?.index === index
                  ? "menu-item-active"
                  : "menu-item-inactive"
              } ${
                !isExpanded && !isHovered
                  ? "lg:justify-center"
                  : "lg:justify-start"
              }`}
            >
              <span className="menu-item-icon-size">{nav.icon}</span>
              {(isExpanded || isHovered || isMobileOpen) && (
                <span className="menu-item-text">{nav.name}</span>
              )}
              {(isExpanded || isHovered || isMobileOpen) && (
                <ChevronDownIcon
                  className={`ml-auto w-5 h-5 transition-transform duration-200 ${
                    openSubmenu?.index === index
                      ? "rotate-180 text-blue-500"
                      : "text-white group-hover:text-blue-500"
                  }`}
                />
              )}
            </button>
          ) : (
            nav.path && (
              <Link
                to={nav.path}
                className={`menu-item group ${
                  isActive(nav.path) ? "menu-item-active" : "menu-item-inactive"
                } ${
                  !isExpanded && !isHovered
                    ? "lg:justify-center"
                    : "lg:justify-start"
                }`}
              >
                <span className="menu-item-icon-size">{nav.icon}</span>
                {(isExpanded || isHovered || isMobileOpen) && (
                  <span className="menu-item-text">{nav.name}</span>
                )}
              </Link>
            )
          )}
          {nav.subItems && (isExpanded || isHovered || isMobileOpen) && (
            <div
              ref={(el) => {
                subMenuRefs.current[`${index}`] = el;
              }}
              className="overflow-hidden transition-all duration-300"
              style={{
                height:
                  openSubmenu?.index === index
                    ? `${subMenuHeight[`${index}`]}px`
                    : "0px",
              }}
            >
              <ul className="mt-2 space-y-1 ml-9">
                {nav.subItems.map((subItem) => (
                  <li key={subItem.name}>
                    <Link
                      to={subItem.path}
                      className={`menu-dropdown-item group ${
                        isActive(subItem.path)
                          ? "bg-white text-blue-500"
                          : "text-white group-hover:text-blue-300"
                      } hover:bg-white/10`}
                    >
                      <span>{subItem.name}</span>
                    </Link>
                  </li>
                ))}
              </ul>
            </div>
          )}
        </li>
      ))}
    </ul>
  );

  return (
    <aside
      className={`fixed mt-16 flex flex-col lg:mt-0 top-0 px-5 left-0 bg-[#2A9D8F] dark:bg-gray-900 dark:border-gray-800 text-white h-screen transition-all duration-300 ease-in-out z-50 border-r border-gray-200 shadow-lg
        ${isExpanded || isMobileOpen || isHovered ? "w-[290px]" : "w-[90px]"}
        ${
          isMobileOpen ? "translate-x-0" : "-translate-x-full"
        } lg:translate-x-0`}
      onMouseEnter={() => !isExpanded && setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      <div
        className={`py-8 flex ${
          !isExpanded && !isHovered ? "lg:justify-center" : "justify-start"
        }`}
      >
        <Link
          to="/"
          className={`flex items-center space-x-3 pb-2 border-b-2 border-white w-full ${
            isExpanded || isHovered || isMobileOpen ? "" : "justify-center"
          }`}
        >
          <img
            src="/public/image/ranbowlogo.png"
            alt="Logo"
            className={`transition-all duration-300 ${
              isExpanded || isHovered || isMobileOpen ? "w-20" : "w-8"
            }`}
          />
          {(isExpanded || isHovered || isMobileOpen) && (
            <span className="font-semibold text-2xl select-none">
              <span className="text-orange-500">Care</span>
              <span className="text-white">Nest</span>{" "}
            </span>
          )}
        </Link>
      </div>
      <div className="flex flex-col overflow-y-auto duration-300 ease-linear no-scrollbar">
        <nav className="mb-6">
          <div className="flex flex-col gap-4">
            <div>
              <h2
                className={`mb-4 text-xs uppercase flex leading-[20px] text-white ${
                  !isExpanded && !isHovered
                    ? "lg:justify-center"
                    : "justify-start"
                }`}
              >
                {isExpanded || isHovered || isMobileOpen ? (
                  "Menu"
                ) : (
                  <HorizontaLDots className="size-6" />
                )}
              </h2>
              {renderMenuItems(navItems)}
            </div>
          </div>
        </nav>
      </div>
    </aside>
  );
};

export default AppSidebar;

```

### layout\AppSidebarForShopAdmin.tsx
```tsx
// layout/AppSidebarForShopAdmin.tsx
import { Link } from "react-router-dom";

interface AppSidebarProps {
  isExpanded: boolean;
  isHovered: boolean;
  isMobileOpen: boolean;
  // ... other props
}

const AppSidebarForShopAdmin: React.FC<AppSidebarProps> = ({
  isExpanded,
  isHovered,
  isMobileOpen,
  // ... other props
}) => {
  return (
    <aside className={`sidebar ${isExpanded ? "expanded" : "collapsed"}`}>
      {/* Logo cho shop admin trong sidebar */}
      <Link
        to="/admin"
        className={`flex items-center space-x-3 pb-2 border-b-2 border-white w-full ${
          isExpanded || isHovered || isMobileOpen ? "" : "justify-center"
        }`}
      >
        <img
          src="/public/image/ranbowlogo.png"
          alt="Logo"
          className={`transition-all duration-300 ${
            isExpanded || isHovered || isMobileOpen ? "w-20" : "w-8"
          }`}
        />
        {(isExpanded || isHovered || isMobileOpen) && (
          <span className="font-semibold text-2xl select-none">
            <span className="text-orange-500">Care</span>
            <span className="text-white">Nest</span>
          </span>
        )}
      </Link>

      {/* Menu items cho admin */}
      {/* ... */}
    </aside>
  );
};

export default AppSidebarForShopAdmin;

```

### layout\Backdrop.tsx
```tsx
import { useSidebar } from "../context/SidebarContext";

const Backdrop: React.FC = () => {
  const { isMobileOpen, toggleMobileSidebar } = useSidebar();

  if (!isMobileOpen) return null;

  return (
    <div
      className="fixed inset-0 z-40 bg-gray-900/50 lg:hidden"
      onClick={toggleMobileSidebar}
    />
  );
};

export default Backdrop;

```

### layout\SidebarWidget.tsx
```tsx
export default function SidebarWidget() {
  return (
    <div
      className={`
        mx-auto mb-10 w-full max-w-60 rounded-2xl bg-blue-50 px-4 py-5 text-center dark:bg-white/[0.03]`}
    ></div>
  );
}

```

### pages\Checkout\index.tsx
```tsx

```

### pages\Dashboard\DashboardPage.tsx
```tsx
import React from "react";
// import AppLayout from "@/layout/AppLayout";
import MainDashboard from "@/pages/Dashboard/component/MainDashboard";
import DashboardContent from "@/pages/Dashboard/component/DaskboardContent";
import AppLayoutForUser from "@/layout/AppLayoutForUser";

const DashboardPage: React.FC = () => {
  return (
    <AppLayoutForUser>
      <div className="p-4 mx-auto max-w-screen-2xl md:p-6">
        <MainDashboard />
        <DashboardContent />
      </div>
    </AppLayoutForUser>
  );
};

export default DashboardPage;

```

### pages\Dashboard\employeeManagement.tsx
```tsx
import { useState, useEffect } from 'react';

type Task = {
  id: number;
  title: string;
  description: string;
  deadline: string; // ISO string, ví dụ: "2025-05-31T14:30"
};

type List = {
  id: number;
  title: string;
  tasks: Task[];
};

export default function EmployeeManagement() {
  const [lists, setLists] = useState<List[]>([
    {
      id: 1,
      title: 'Todo',
      tasks: [],
    },
  ]);

  const [view, setView] = useState<'form' | 'board'>('form');

  // Form tạo task ban đầu (view 'form')
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [deadline, setDeadline] = useState('');

  // State thêm thẻ mới trong từng list
  const [addingCardListId, setAddingCardListId] = useState<number | null>(null);
  const [newCardTitle, setNewCardTitle] = useState('');
  const [newCardDescription, setNewCardDescription] = useState('');

  // State thêm danh sách mới
  const [addingList, setAddingList] = useState(false);
  const [newListTitle, setNewListTitle] = useState('');

  // State menu 3 chấm của danh sách
  const [listMenuOpenId, setListMenuOpenId] = useState<number | null>(null);

  // State modal sửa danh sách
  const [editingList, setEditingList] = useState<{ id: number; title: string } | null>(null);
  const [editListTitle, setEditListTitle] = useState('');

  // State modal sửa thẻ chi tiết
  const [editingTaskModal, setEditingTaskModal] = useState<
    { listId: number; task: Task } | null
  >(null);

  // Modal chỉnh sửa thẻ: state form
  const [modalEditTitle, setModalEditTitle] = useState('');
  const [modalEditDescription, setModalEditDescription] = useState('');
  const [modalEditDeadline, setModalEditDeadline] = useState('');

  // Sync modal form khi mở modal chỉnh sửa thẻ
  useEffect(() => {
    if (editingTaskModal) {
      setModalEditTitle(editingTaskModal.task.title);
      setModalEditDescription(editingTaskModal.task.description);
      setModalEditDeadline(editingTaskModal.task.deadline);
    }
  }, [editingTaskModal]);

  // Thêm task từ form tạo mới (view 'form')
  const handleAddTask = () => {
    if (title.trim() === '') return;
    const newTask: Task = {
      id: Date.now(),
      title,
      description,
      deadline,
    };
    setLists(prev =>
      prev.map(l =>
        l.id === 1 ? { ...l, tasks: [...l.tasks, newTask] } : l // Thêm mặc định vào list id=1 (Todo)
      )
    );
    setTitle('');
    setDescription('');
    setDeadline('');
    setView('board');
  };

  // Xóa task theo listId và taskId
  const handleDeleteTask = (listId: number, taskId: number) => {
    setLists(prev =>
      prev.map(l =>
        l.id === listId ? { ...l, tasks: l.tasks.filter(t => t.id !== taskId) } : l
      )
    );
  };

  // Thêm thẻ mới vào list
  const handleAddCard = (listId: number) => {
    if (newCardTitle.trim() === '') return;
    const newTask: Task = {
      id: Date.now(),
      title: newCardTitle.trim(),
      description: newCardDescription.trim(),
      deadline: '',
    };
    setLists(prev =>
      prev.map(l => (l.id === listId ? { ...l, tasks: [...l.tasks, newTask] } : l))
    );
    setNewCardTitle('');
    setNewCardDescription('');
    setAddingCardListId(null);
  };

  // Thêm danh sách mới
  const handleAddList = () => {
    if (newListTitle.trim() === '') return;
    const newList: List = {
      id: Date.now(),
      title: newListTitle.trim(),
      tasks: [],
    };
    setLists(prev => [...prev, newList]);
    setNewListTitle('');
    setAddingList(false);
  };

  // Xóa danh sách
  const handleDeleteList = (listId: number) => {
    if (!window.confirm('Bạn có chắc muốn xóa danh sách này?')) return;
    setLists(prev => prev.filter(l => l.id !== listId));
    setListMenuOpenId(null);
  };

  // Mở modal sửa danh sách
  const openEditListModal = (list: List) => {
    setEditingList({ id: list.id, title: list.title });
    setEditListTitle(list.title);
    setListMenuOpenId(null);
  };

  // Lưu sửa danh sách
  const handleSaveEditList = () => {
    if (editListTitle.trim() === '') return;
    setLists(prev =>
      prev.map(l => (l.id === editingList!.id ? { ...l, title: editListTitle.trim() } : l))
    );
    setEditingList(null);
  };

  // Hủy sửa danh sách
  const handleCancelEditList = () => {
    setEditingList(null);
  };

  // Mở modal chỉnh sửa thẻ chi tiết
  const openEditTaskModal = (listId: number, task: Task) => {
    setEditingTaskModal({ listId, task });
  };

  // Đóng modal chỉnh sửa thẻ
  const closeEditTaskModal = () => {
    setEditingTaskModal(null);
  };

  // Lưu cập nhật thẻ từ modal
  const handleUpdateTask = () => {
    if (!editingTaskModal) return;
    if (modalEditTitle.trim() === '') {
      alert('Tiêu đề không được để trống');
      return;
    }
    setLists(prev =>
      prev.map(list =>
        list.id === editingTaskModal.listId
          ? {
              ...list,
              tasks: list.tasks.map(t =>
                t.id === editingTaskModal.task.id
                  ? {
                      ...t,
                      title: modalEditTitle.trim(),
                      description: modalEditDescription,
                      deadline: modalEditDeadline,
                    }
                  : t
              ),
            }
          : list
      )
    );
    closeEditTaskModal();
  };

  /* --- Component con --- */

  // Nút menu 3 chấm góc phải danh sách
  const ListMenu = ({ listId }: { listId: number }) => {
    const isOpen = listMenuOpenId === listId;
    return (
      <div className="relative inline-block text-left">
        <button
          onClick={e => {
            e.stopPropagation();
            setListMenuOpenId(isOpen ? null : listId);
          }}
          aria-haspopup="true"
          aria-expanded={isOpen}
          className="p-1 rounded-full hover:bg-gray-200 transition"
          title="Tùy chọn danh sách"
        >
          <svg
            className="w-6 h-6 text-gray-600"
            fill="currentColor"
            viewBox="0 0 20 20"
            aria-hidden="true"
          >
            <path d="M6 10a2 2 0 11-4 0 2 2 0 014 0zm6-2a2 2 0 100 4 2 2 0 000-4zm6 2a2 2 0 11-4 0 2 2 0 014 0z" />
          </svg>
        </button>
        {isOpen && (
          <div
            className="origin-top-right absolute right-0 mt-2 w-36 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none z-20"
            onClick={e => e.stopPropagation()}
          >
            <div className="py-1">
              <button
                onClick={() => {
                  const list = lists.find(l => l.id === listId);
                  if (list) openEditListModal(list);
                  setListMenuOpenId(null);
                }}
                className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
              >
                Sửa danh sách
              </button>
              <button
                onClick={() => handleDeleteList(listId)}
                className="block w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-red-100"
              >
                Xóa danh sách
              </button>
            </div>
          </div>
        )}
      </div>
    );
  };

  // Component Task Card (nhấn mở modal chỉnh sửa chi tiết)
  const TaskCard = ({ task, listId }: { task: Task; listId: number }) => {
    return (
      <div
        className="bg-blue-50 p-5 rounded-xl mb-4 flex justify-between items-start shadow-md hover:shadow-xl transition-shadow cursor-pointer"
        onClick={() => openEditTaskModal(listId, task)}
      >
        <div className="flex flex-col flex-grow max-w-[75%]">
          <p className="font-semibold text-blue-900 break-words">{task.title}</p>
          {task.description && (
            <p className="text-gray-700 text-sm mt-1 whitespace-pre-line break-words">{task.description}</p>
          )}
          {task.deadline && (
            <p className="text-sm text-gray-600 mt-1">
              Deadline: <time dateTime={task.deadline}>{task.deadline}</time>
            </p>
          )}
        </div>
        <button
          onClick={e => {
            e.stopPropagation();
            handleDeleteTask(listId, task.id);
          }}
          className="text-red-600 hover:text-white hover:bg-red-600 font-semibold text-lg rounded-full p-2 border border-red-600 transition flex items-center justify-center w-7 h-7 select-none"
          aria-label="Xóa công việc"
          title="Xóa công việc"
        >
          ✕
        </button>
      </div>
    );
  };

  // Form thêm thẻ mới
  const AddCardForm = ({ listId }: { listId: number }) => {
    const isAdding = addingCardListId === listId;

    if (!isAdding) {
      return (
        <button
          onClick={() => setAddingCardListId(listId)}
          className="mt-6 text-blue-600 font-semibold hover:underline text-left transition-all"
          aria-label="Thêm thẻ mới"
        >
          + Thêm thẻ
        </button>
      );
    }

    return (
      <div className="mt-6 flex flex-col gap-3 bg-blue-50 backdrop-blur-sm p-4 rounded-lg shadow-inner">
        <input
          type="text"
          className="px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 placeholder-gray-400"
          placeholder="Tiêu đề thẻ mới"
          value={newCardTitle}
          onChange={e => setNewCardTitle(e.target.value)}
          autoFocus
          onKeyDown={e => {
            if (e.key === 'Enter' && !e.shiftKey) {
              e.preventDefault();
              handleAddCard(listId);
            } else if (e.key === 'Escape') {
              setAddingCardListId(null);
              setNewCardTitle('');
              setNewCardDescription('');
            }
          }}
        />
        <textarea
          className="px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 placeholder-gray-400 resize-none"
          placeholder="Mô tả thẻ mới (tuỳ chọn)"
          rows={3}
          value={newCardDescription}
          onChange={e => setNewCardDescription(e.target.value)}
          onKeyDown={e => {
            if (e.key === 'Escape') {
              setAddingCardListId(null);
              setNewCardTitle('');
              setNewCardDescription('');
            }
          }}
        />
        <div className="flex gap-3">
          <button
            onClick={() => handleAddCard(listId)}
            className="bg-blue-600 text-white px-5 py-2 rounded-lg font-semibold hover:bg-blue-700 transition"
            aria-label="Thêm thẻ"
          >
            Thêm
          </button>
          <button
            onClick={() => {
              setAddingCardListId(null);
              setNewCardTitle('');
              setNewCardDescription('');
            }}
            className="px-5 py-2 rounded-lg border border-gray-300 hover:bg-gray-100 transition"
            aria-label="Hủy thêm thẻ"
          >
            Hủy
          </button>
        </div>
      </div>
    );
  };

  // Form thêm danh sách mới
  const AddListForm = () => {
    if (!addingList) {
      return (
        <div
          onClick={() => setAddingList(true)}
          className="w-64 p-6 rounded-2xl shadow bg-white text-gray-500 flex items-center justify-center cursor-pointer select-none hover:bg-gray-100 transition text-center"
          aria-label="Thêm danh sách mới"
          role="button"
        >
          + Thêm danh sách khác
        </div>
      );
    }

    return (
      <div className="w-64 p-4 rounded-2xl shadow bg-white flex flex-col">
        <input
          type="text"
          className="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 mb-3"
          placeholder="Tên danh sách"
          value={newListTitle}
          onChange={e => setNewListTitle(e.target.value)}
          autoFocus
          onKeyDown={e => {
            if (e.key === 'Enter') {
              e.preventDefault();
              handleAddList();
            }
            if (e.key === 'Escape') setAddingList(false);
          }}
        />
        <div className="flex gap-2">
          <button
            onClick={handleAddList}
            className="bg-blue-600 text-white px-4 py-1 rounded hover:bg-blue-700 transition flex-grow"
          >
            Thêm
          </button>
          <button
            onClick={() => setAddingList(false)}
            className="px-4 py-1 rounded border border-gray-300 hover:bg-gray-100 transition"
          >
            Hủy
          </button>
        </div>
      </div>
    );
  };

  // Modal chỉnh sửa danh sách
  const EditListModal = () => {
    const isOpen = editingList !== null;

    if (!isOpen) return null;

    return (
      <div
        className="fixed inset-0 z-40 flex items-center justify-center bg-opacity-10 backdrop-blur-sm"
        onClick={() => setEditingList(null)}
      >
        <div
          onClick={e => e.stopPropagation()}
          className={`bg-white rounded-lg shadow-lg p-6 w-96 max-w-full transform transition-opacity duration-300 ease-out ${
            isOpen ? 'opacity-100 scale-100' : 'opacity-0 scale-95 pointer-events-none'
          }`}
        >
          <h3 className="text-xl font-semibold mb-4">Sửa danh sách</h3>
          <input
            type="text"
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 mb-4"
            value={editListTitle}
            onChange={e => setEditListTitle(e.target.value)}
            onKeyDown={e => {
              if (e.key === 'Enter') handleSaveEditList();
              if (e.key === 'Escape') handleCancelEditList();
            }}
            autoFocus
          />
          <div className="flex justify-end gap-3">
            <button
              onClick={handleCancelEditList}
              className="px-4 py-2 rounded border border-gray-300 hover:bg-gray-100 transition"
            >
              Hủy
            </button>
            <button
              onClick={handleSaveEditList}
              className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition"
            >
              Lưu
            </button>
          </div>
        </div>
      </div>
    );
  };

  // Modal chỉnh sửa thẻ chi tiết
  const EditTaskModal = () => {
    const isOpen = editingTaskModal !== null;

    if (!isOpen) return null;

    return (
      <div
        className="fixed inset-0 z-40 flex items-center justify-center backdrop-blur-sm bg-opacity-10"
        onClick={closeEditTaskModal}
      >
        <div
          onClick={e => e.stopPropagation()}
          className={`bg-white rounded-lg shadow-lg p-6 w-96 max-w-full transform transition-opacity duration-300 ease-out ${
            isOpen ? 'opacity-100 scale-100' : 'opacity-0 scale-95 pointer-events-none'
          }`}
        >
          {/* Nút đóng góc trên cùng bên phải */}
          <button
            onClick={closeEditTaskModal}
            className="absolute top-3 right-3 text-gray-500 hover:text-gray-700 font-bold text-lg p-1 rounded focus:outline-none"
            aria-label="Đóng"
            title="Đóng"
          >
            ✕
          </button>
          <h3 className="text-xl font-semibold mb-4">Chỉnh sửa công việc</h3>
          <label className="block font-semibold mb-1">Tiêu đề:</label>
          <input
            type="text"
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 mb-4"
            value={modalEditTitle}
            onChange={e => setModalEditTitle(e.target.value)}
          />

          <label className="block font-semibold mb-1">Mô tả:</label>
          <textarea
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 mb-4 resize-none"
            rows={4}
            value={modalEditDescription}
            onChange={e => setModalEditDescription(e.target.value)}
          />

          <label className="block font-semibold mb-1">Deadline:</label>
          <input
            type="datetime-local"
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 mb-6"
            value={modalEditDeadline}
            onChange={e => setModalEditDeadline(e.target.value)}
          />

          <div className="w-full">
            <button
              onClick={handleUpdateTask}
              className="w-full px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition"
            >
              Cập nhật
            </button>                 
          </div>
        </div>
      </div>
    );
  };

  /* --- Render chính --- */

  if (view === 'form') {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100 p-6">
        <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-md">
          <h2 className="text-2xl font-bold text-center text-blue-600 mb-6">Quản lý Task Nhân viên</h2>
          <div className="space-y-5">
            <div>
              <label className="block font-semibold mb-1">Tiêu đề:</label>
              <input
                type="text"
                value={title}
                onChange={e => setTitle(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Nhập tiêu đề công việc"
              />
            </div>
            <div>
              <label className="block font-semibold mb-1">Mô tả:</label>
              <textarea
                value={description}
                onChange={e => setDescription(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Nhập mô tả công việc"
                rows={4}
              />
            </div>
            <div>
              <label className="block font-semibold mb-1">Deadline:</label>
              <input
                type="datetime-local"
                value={deadline}
                onChange={e => setDeadline(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
            <button
              onClick={handleAddTask}
              className="w-full bg-blue-600 text-white font-semibold py-2 rounded-md hover:bg-blue-700 transition"
            >
              Thêm công việc
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-100 p-6">
      <button
        onClick={() => setView('form')}
        className="mb-6 text-sm text-blue-600 hover:underline flex items-center gap-2 font-medium"
        aria-label="Quay lại tạo công việc"
      >
        <span className="text-2xl leading-none">←</span> Quay lại tạo công việc
      </button>

      <div className="flex gap-8 max-w-7xl mx-auto overflow-x-auto p-2">
        {lists.map(list => (
          <div
            key={list.id}
            className="bg-white p-6 rounded-2xl shadow-lg w-80 flex flex-col max-h-[80vh]"
          >
            <div className="flex justify-between items-center mb-4 border-b border-gray-300 pb-2">
              <h3 className="font-semibold text-xl text-gray-800">{list.title}</h3>
              <ListMenu listId={list.id} />
            </div>
            <div className="flex-grow overflow-y-auto pr-2 scrollbar-thin scrollbar-thumb-blue-400 scrollbar-track-gray-100">
              {list.tasks.length === 0 ? (
                <p className="text-gray-400 text-center mt-12 italic select-none">
                  Chưa có công việc nào. Hãy thêm ngay!
                </p>
              ) : (
                list.tasks.map(task => <TaskCard key={task.id} task={task} listId={list.id} />)
              )}
            </div>
            <AddCardForm listId={list.id} />
          </div>
        ))}

        <AddListForm />
      </div>

      {/* Modal sửa danh sách */}
      <EditListModal />

      {/* Modal sửa task chi tiết */}
      <EditTaskModal />
    </div>
  );
}
```

### pages\Dashboard\index.tsx
```tsx
import React from "react";
import { useDispatch } from "react-redux";
import { logout } from "../../store/slices/authSlice";
import Button from "../../components/ui/Button";

const Dashboard: React.FC = () => {
  const dispatch = useDispatch();
  // Bỏ comment user nếu không sử dụng
  // const { user } = useSelector((state: RootState) => state.auth);

  const handleLogout = () => {
    dispatch(logout());
  };

  return (
    <div className="min-h-screen bg-gray-50 py-12">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="bg-white shadow rounded-lg">
          <div className="px-4 py-5 sm:p-6">
            <div className="flex items-center justify-between mb-6">
              <div>
                <h1 className="text-3xl font-bold text-gray-900">
                  Dashboard - Quản lý Task
                </h1>
                <p className="mt-1 text-sm text-gray-600">
                  Chào mừng bạn đến với hệ thống quản lý task
                </p>
              </div>
              <Button variant="outline" onClick={handleLogout}>
                Đăng xuất
              </Button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Dashboard;

```

### pages\Dashboard\ServicePackage.tsx
```tsx
import React, { useState } from "react";
// Import icon Star từ thư viện lucide-react để dùng làm biểu tượng
import { Star } from "lucide-react"; 
// Import dữ liệu danh sách gói dịch vụ từ file JSON nội bộ
import listpackage from "@/data/listpackage.json";

const ServicePackage: React.FC = () => {
  const [showModal, setShowModal] = useState(false); // Quản lý trạng thái hiển thị modal
  const [modalType, setModalType] = useState<"renew" | "cancel" | null>(null); // Quản lý loại modal đang hiển thị: 'renew' hoặc 'cancel'

  const activeList = listpackage.find((plan) => plan.isActive);

  // Mở modal gia hạn
  const handleOpenRenewModal = () => {
    setModalType("renew");
    setShowModal(true);
  };

   // Mở modal hủy gia hạn
  const handleOpenCancelModal = () => {
    setModalType("cancel");
    setShowModal(true);
  };

  // Đóng modal
  const handleCloseModal = () => {
    setShowModal(false);
    setModalType(null);
  };

   // Xác nhận gia hạn
  const handleConfirmRenew = () => {
    alert(`Gia hạn gói ${activeList?.name} thành công!`);
    handleCloseModal();
  };

  // Xác nhận hủy gia hạn
  const handleConfirmCancel = () => {
    alert(`Đã hủy gia hạn gói ${activeList?.name} thành công!`);
    handleCloseModal();
  };

  return (
    <div className="max-w-7xl mx-auto px-4 py-8 space-y-10">
      {/* Header Section */}
      <div className="bg-gradient-to-r from-yellow-100 via-yellow-50 to-yellow-100 border border-yellow-200 rounded-2xl shadow-md p-6 space-y-3">
        {/* Số điểm */}
        <p className="text-base font-medium">
          Số điểm hiện tại trong tài khoản: <span className="text-blue-600 font-bold">100.000đ</span>
        </p>
        <div className="flex items-center gap-2 text-sm font-medium text-gray-800">
          <Star className="w-5 h-5 text-yellow-500" />
          Gói hiện tại: <span className="font-bold text-blue-700">Pro</span>
        </div>
        <p className="text-sm text-gray-600">Hết hạn: 30/06/2025</p>
        <div className="flex gap-3 pt-3">
          <button
            onClick={handleOpenRenewModal}
            className="bg-blue-600 hover:bg-blue-700 text-white text-sm px-4 py-2 rounded-lg shadow-md transition duration-300"
          >
            Gia hạn
          </button>
          <button
            onClick={handleOpenCancelModal}
            className="bg-red-600 hover:bg-red-700 text-white text-sm px-4 py-2 rounded-lg shadow-md transition duration-300"
          >
            Hủy gia hạn
          </button>
        </div>
      </div>

      {/* Danh sách các gói dịch vụ */}
      <div>
        <h2 className="text-3xl font-extrabold text-center text-blue-700 mb-12">
          Gói dịch vụ của bạn
        </h2>
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-10">
          {listpackage.map((list) => (
            // Hiển thị từng gói
            <div
              key={list.name}
              className={`rounded-2xl border p-6 shadow-sm flex flex-col h-full transition-all duration-300 ${
                list.isActive
                  ? "border-blue-600 shadow-lg bg-blue-50"
                  : "border-gray-300 hover:shadow-md bg-white"
              }`}
            >
              <h3 className="text-gray-900 text-2xl font-bold mb-4 text-center">
                {list.name}
              </h3>

              <p className="text-blue-600 font-bold mb-4 text-2xl text-center">
                {list.price}
              </p>

              {/* Danh sách tính năng */}
              <ul className="text-sm text-gray-600 space-y-2 mb-6 flex-grow">
                {list.features.map((feature, index) => (
                  <li key={index}>• {feature}</li>
                ))}
              </ul>

              <div className="mt-auto pt-4">
                <button
                  className={`w-full py-2 rounded-lg text-white font-medium transition ${
                    list.isActive
                      ? "bg-gray-300 text-gray-500 cursor-default"
                      : "bg-blue-600 hover:bg-blue-700"
                  }`}
                  disabled={list.isActive}
                >
                  {list.buttonLabel}
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Modal xác nhận gia hạn hoặc hủy gia hạn */}
      {showModal && activeList && (
        <div
          className="fixed inset-0 bg-opacity-30 backdrop-blur-sm flex items-center justify-center z-50"
          onClick={handleCloseModal}
        >
          <div
            className="bg-white rounded-xl p-8 max-w-md w-full shadow-xl border border-gray-200 relative"
            onClick={(e) => e.stopPropagation()}
          >
            {/* Modal gia hạn */}
            {modalType === "renew" && (
              <>
                <h2 className="text-xl font-bold text-blue-700 mb-4 text-center">
                  Gia Hạn Gói {activeList.name}
                </h2>
                <p className="text-center text-gray-700 mb-6">
                  Bạn muốn gia hạn gói <span className="font-semibold">{activeList.name}</span> thêm 1 tháng với giá <span className="font-semibold">{activeList.price}</span>?
                </p>
                <div className="flex justify-center gap-4">
                  <button
                    onClick={handleConfirmRenew}
                    className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg transition"
                  >
                    Gia hạn
                  </button>
                  <button
                    onClick={handleCloseModal}
                    className="bg-gray-300 hover:bg-gray-400 text-gray-800 px-6 py-2 rounded-lg transition"
                  >
                    Hủy
                  </button>
                </div>
              </>
            )}

            {/* Modal hủy gia hạn */}
            {modalType === "cancel" && (
              <>
                <h2 className="text-xl font-bold text-red-600 mb-4 text-center">
                  Hủy Gia Hạn Gói {activeList.name}
                </h2>
                <p className="text-center text-gray-700 mb-6">
                  Bạn có chắc muốn hủy gia hạn tự động của gói <span className="font-semibold">{activeList.name}</span> không?
                </p>
                <div className="flex justify-center gap-4">
                  <button
                    onClick={handleConfirmCancel}
                    className="bg-red-600 hover:bg-red-700 text-white px-6 py-2 rounded-lg transition"
                  >
                    Xác nhận hủy
                  </button>
                  <button
                    onClick={handleCloseModal}
                    className="bg-gray-300 hover:bg-gray-400 text-gray-800 px-6 py-2 rounded-lg transition"
                  >
                    Đóng
                  </button>
                </div>
              </>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default ServicePackage;

```

### pages\Dashboard\TaskManager.tsx
```tsx
import { useState } from "react";

export default function TaskManager() {
  const [activeTab, setActiveTab] = useState<"list" | "create">("create");
  const [tasks, setTasks] = useState<
    {
      id: number;
      title: string;
      description: string;
      datetime: string;
      type: string;
    }[]
  >([]);

  const [form, setForm] = useState({
    title: "",
    description: "",
    datetime: "",
    type: "Cá nhân",
  });

  function handleInputChange(
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>
  ) {
    const { name, value } = e.target;
    setForm((f) => ({ ...f, [name]: value }));
  }

  function handleCreateTask(e: React.FormEvent) {
    e.preventDefault();

    // Validation
    if (!form.title.trim()) {
      alert("❌ Vui lòng nhập tiêu đề công việc!");
      return;
    }
    if (!form.datetime) {
      alert("❌ Vui lòng chọn thời gian cho công việc!");
      return;
    }

    // Thêm task mới
    const newTask = {
      id: tasks.length + 1,
      title: form.title,
      description: form.description,
      datetime: form.datetime,
      type: form.type,
    };

    setTasks((prev) => [...prev, newTask]);
    alert("✅ Tạo công việc thành công!");
    setForm({ title: "", description: "", datetime: "", type: "Cá nhân" });
    setActiveTab("list");
  }

  return (
    <div className="max-w-4xl mx-auto p-8 bg-white rounded-lg shadow-lg mt-10 border border-gray-200">
      <h1 className="text-4xl font-extrabold text-blue-700 mb-8 text-center">
        Task Manager
      </h1>

      {/* Tabs */}
      <div className="flex justify-center mb-8 space-x-6 border-b border-gray-300">
        <button
          onClick={() => setActiveTab("list")}
          className={`relative pb-3 font-semibold text-lg ${
            activeTab === "list"
              ? "text-blue-600 border-b-4 border-blue-600"
              : "text-gray-500 hover:text-blue-500"
          } transition-colors`}
        >
          Task List
        </button>
        <button
          onClick={() => setActiveTab("create")}
          className={`relative pb-3 font-semibold text-lg ${
            activeTab === "create"
              ? "text-blue-600 border-b-4 border-blue-600"
              : "text-gray-500 hover:text-blue-500"
          } transition-colors`}
        >
          Create Task
        </button>
      </div>

      {/* Content */}
      {activeTab === "list" && (
        <div>
          <h2 className="text-2xl font-semibold mb-6 text-gray-800">
            Danh sách công việc
          </h2>
          {tasks.length === 0 ? (
            <p className="text-gray-400 italic text-center py-20">
              Chưa có công việc nào.
            </p>
          ) : (
            <ul className="space-y-6">
              {tasks.map((task, idx) => (
                <li
                  key={task.id}
                  className="p-6 border rounded-xl shadow-sm hover:shadow-md transition-shadow duration-300 bg-gray-50"
                >
                  <h3 className="text-blue-700 font-bold text-xl mb-1">
                    {idx + 1}. {task.title}
                  </h3>
                  <p className="text-gray-700 mb-2 whitespace-pre-line">
                    {task.description || (
                      <span className="italic text-gray-400">Không có mô tả</span>
                    )}
                  </p>
                  <div className="flex items-center text-gray-600 text-sm space-x-6">
                    <div>
                      <span className="font-semibold">Thời gian:</span>{" "}
                      {new Date(task.datetime).toLocaleString("vi-VN", {
                        dateStyle: "medium",
                        timeStyle: "short",
                      })}
                    </div>
                    <div>
                      <span className="font-semibold">Loại công việc:</span> {task.type}
                    </div>
                  </div>
                </li>
              ))}
            </ul>
          )}
        </div>
      )}

      {activeTab === "create" && (
        <form onSubmit={handleCreateTask} className="max-w-xl mx-auto">
          <h2 className="text-2xl font-semibold mb-6 text-gray-800">Tạo công việc mới</h2>

          <label htmlFor="title" className="block mb-2 font-medium text-gray-700">
            Tiêu đề:
          </label>
          <input
            id="title"
            name="title"
            type="text"
            value={form.title}
            onChange={handleInputChange}
            placeholder="Nhập tiêu đề công việc"
            className="w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 mb-6 transition"
          />

          <label htmlFor="description" className="block mb-2 font-medium text-gray-700">
            Mô tả:
          </label>
          <textarea
            id="description"
            name="description"
            value={form.description}
            onChange={handleInputChange}
            rows={5}
            placeholder="Nhập mô tả chi tiết"
            className="w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 mb-6 transition resize-none"
          />

          <label htmlFor="datetime" className="block mb-2 font-medium text-gray-700">
            Thời gian:
          </label>
          <input
            id="datetime"
            name="datetime"
            type="datetime-local"
            value={form.datetime}
            onChange={handleInputChange}
            className="w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 mb-6 transition"
          />

          <label htmlFor="type" className="block mb-2 font-medium text-gray-700">
            Loại công việc:
          </label>
          <select
            id="type"
            name="type"
            value={form.type}
            onChange={handleInputChange}
            className="w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 mb-8 transition bg-white"
          >
            <option>Cá nhân</option>
            <option>Nhóm</option>
            <option>Dự án</option>
          </select>

          <button
            type="submit"
            className="w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 rounded-lg shadow-md transition-colors"
          >
            Tạo công việc
          </button>
        </form>
      )}
    </div>
  );
}   
```

### pages\Dashboard\taskReport.tsx
```tsx
import { useState } from "react";

type Task = {
  title: string;
  created: string;
  deadline: string;
  progress: string;
  status: string;
};

export default function TaskReport() {
  // Khởi tạo tasks rỗng, quản lý bằng state
  const [tasks, setTasks] = useState<Task[]>([]);

  const [showForm, setShowForm] = useState(false);

  // Form nhập task mới
  const [taskForm, setTaskForm] = useState<Task>({
    title: "",
    created: "",
    deadline: "",
    progress: "",
    status: "",
  });

  // trạng thái
  const totalTasks = tasks.length;
  const inProgressTasks = tasks.filter((t) => t.status === "Đang thực hiện").length;
  const doneTasks = tasks.filter((t) => t.status === "Đã hoàn thành").length;

  // Xử lý thay đổi input form
  function handleInputChange(e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) {
    const { name, value } = e.target;
    setTaskForm((prev) => ({ ...prev, [name]: value }));
  }

  // Submit form tạo task mới
  function handleSubmitForm(e: React.FormEvent) {
    e.preventDefault();

    // Kiểm tra yêu cầu tối thiểu 
    if (!taskForm.title || !taskForm.created || !taskForm.deadline) {
      alert("Vui lòng nhập đầy đủ Tiêu đề, Ngày tạo và Deadline");
      return;
    }

    // Thêm task mới vào danh sách
    setTasks((prev) => [...prev, taskForm]);

    // Reset form
    setTaskForm({
      title: "",
      created: "",
      deadline: "",
      progress: "",
      status: "",
    });

    setShowForm(false);
  }

  return (
    <div className="max-w-5xl mx-auto mt-10 p-8 bg-white rounded-xl shadow-lg border border-gray-200 relative">
      {/* Tiêu đề và nút tạo báo cáo */}
      <div className="flex items-center justify-between mb-6">
        <h1 className="text-3xl font-bold text-blue-700">Báo cáo công việc</h1>
        <button
          onClick={() => setShowForm(true)}
          className="bg-blue-600 hover:bg-blue-700 text-white font-semibold px-5 py-2 rounded-lg shadow transition"
        >
          Tạo báo cáo
        </button>
      </div>

      {/* Bảng danh sách task */}
      <div className="overflow-x-auto">
        <table className="min-w-full border border-gray-300 rounded-lg overflow-hidden">
          <thead className="bg-blue-100 text-blue-700">
            <tr>
              <th className="text-left px-4 py-2">Tiêu đề</th>
              <th className="text-left px-4 py-2">Ngày tạo</th>
              <th className="text-left px-4 py-2">Deadline</th>
              <th className="text-left px-4 py-2">Tiến độ</th>
              <th className="text-left px-4 py-2">Trạng thái</th>
            </tr>
          </thead>
          <tbody className="text-gray-700">
            {tasks.length === 0 ? (
              <tr>
                <td colSpan={5} className="text-center py-4 text-gray-400 italic">
                  Chưa có task nào
                </td>
              </tr>
            ) : (
              tasks.map((task, idx) => (
                <tr
                  key={idx}
                  className="even:bg-gray-50 hover:bg-blue-50 transition-colors"
                >
                  <td className="px-4 py-3 font-medium">{task.title}</td>
                  <td className="px-4 py-3">{task.created}</td>
                  <td className="px-4 py-3">{task.deadline}</td>
                  <td className="px-4 py-3">{task.progress}</td>
                  <td className="px-4 py-3">{task.status}</td>
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>

      {/* Tổng kết */}
      <div className="mt-8 bg-blue-50 p-4 rounded-lg shadow-inner border border-blue-200">
        <h3 className="text-blue-600 font-semibold text-lg mb-2">Tổng kết</h3>
        <p className="text-sm text-gray-800">Tổng số task: {totalTasks}</p>
        <p className="text-sm text-gray-800">Đang tiến hành: {inProgressTasks}</p>
        <p className="text-sm text-gray-800">Đã hoàn thành: {doneTasks}</p>
      </div>

      {/* Form nhập báo cáo (popup modal) */}
      {showForm && (
        <div className="fixed inset-0  bg-opacity-20 backdrop-blur-sm flex items-center justify-center z-50 p-4">
          <div className="bg-white p-6 rounded-xl shadow-xl w-full max-w-md relative">
            {/* Nút đóng */}
            <button
              onClick={() => setShowForm(false)}
              className="absolute top-3 right-3 text-gray-500 hover:text-red-600 text-2xl font-bold"
              aria-label="Đóng biểu mẫu"
            >
              ×
            </button>

            <form onSubmit={handleSubmitForm}>
              <h3 className="text-xl font-semibold text-gray-800 mb-4 text-center">
                Thêm báo cáo
              </h3>

              <label className="block mb-2 font-medium text-gray-700">Tiêu đề:</label>
              <input
                type="text"
                name="title"
                value={taskForm.title}
                onChange={handleInputChange}
                className="w-full px-4 py-2 border rounded-lg mb-4 focus:outline-none focus:ring-2 focus:ring-blue-500"
                required
              />

              <label className="block mb-2 font-medium text-gray-700">Ngày tạo:</label>
              <input
                type="date"
                name="created"
                value={taskForm.created}
                onChange={handleInputChange}
                className="w-full px-4 py-2 border rounded-lg mb-4 focus:outline-none focus:ring-2 focus:ring-blue-500"
                required
              />

              <label className="block mb-2 font-medium text-gray-700">Deadline:</label>
              <input
                type="date"
                name="deadline"
                value={taskForm.deadline}
                onChange={handleInputChange}
                className="w-full px-4 py-2 border rounded-lg mb-4 focus:outline-none focus:ring-2 focus:ring-blue-500"
                required
              />

              <label className="block mb-2 font-medium text-gray-700">Tiến độ (%):</label>
              <input
                type="number"
                name="progress"
                value={taskForm.progress}
                onChange={handleInputChange}
                min="0"
                max="100"
                className="w-full px-4 py-2 border rounded-lg mb-4 focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="VD: 80"
              />

              <label className="block mb-2 font-medium text-gray-700">Trạng thái:</label>
              <select
                name="status"
                value={taskForm.status}
                onChange={handleInputChange}
                className="w-full px-4 py-2 border rounded-lg mb-6 focus:outline-none focus:ring-2 focus:ring-blue-500"
                required
              >
                <option value="">-- Chọn trạng thái --</option>
                <option value="Đang thực hiện">Đang thực hiện</option>
                <option value="Đã hoàn thành">Đã hoàn thành</option>
                <option value="Chưa bắt đầu">Chưa bắt đầu</option>
              </select>

              <button
                type="submit"
                className="w-full bg-blue-600 hover:bg-blue-700 text-white py-3 rounded-lg font-semibold transition"
              >
                Thêm task
              </button>
            </form>
          </div>
        </div>
      )}
    </div>
  );
}
```

### pages\Dashboard\TimeManagement.tsx
```tsx
import React, { useState } from "react";
import PomodoroForm, { type PomodoroConfig } from "./component/PomodoroForm";
import PomodoroTimer from "./component/PomodoroTimer";
import AppLayout from "@/layout/AppLayout";

const TimeManagement: React.FC = () => {
  const [config, setConfig] = useState<PomodoroConfig | null>(null);

  return (
    <AppLayout>
      <div className="min-h-screen flex items-center justify-center bg-gray-100">
        {!config ? (
          <PomodoroForm onCreate={setConfig} />
        ) : (
          <PomodoroTimer config={config} />
        )}
      </div>
    </AppLayout>
  );
};

export default TimeManagement;

```

### pages\Dashboard\Wallet.tsx
```tsx
import { useState } from 'react';
import WalletModal from './component/Wallet/walletModal';
import WalletHistoryModal from './component/Wallet/walletHistory';
import WalletImage from '@/assets/wallet-svgrepo-com.svg';

const WalletPage = () => {
  const [showTopUp, setShowTopUp] = useState(false);
  const [showHistory, setShowHistory] = useState(false);

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col items-center p-6">
      <h1 className="text-3xl font-bold text-blue-600 mb-6">Ví của bạn</h1>

      <div className="bg-white border rounded-lg shadow-lg p-6 w-full max-w-5xl flex gap-6">
        {/* Left */}
        <div className="flex-1 space-y-4">
          <div>
            <h2 className="font-bold text-lg">NGUYEN VAN A</h2>
            <p className="text-gray-600">Mã tài khoản: <span className="text-blue-600 cursor-pointer">CF450T</span></p>
          </div>

          <div className="flex items-center space-x-2 text-gray-800">
            <span className="text-yellow-400 text-xl">⭐</span>
            <span>Số dư hiện tại trong tài khoản: <span className="text-blue-600 font-semibold">100.000₫</span></span>
          </div>

          <div className="flex flex-col sm:flex-row gap-3">
            <button
              onClick={() => setShowHistory(true)}
              className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition"
            >
              Xem lại lịch sử giao dịch
            </button>
            <button
              onClick={() => setShowTopUp(true)}
              className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700 transition"
            >
              Nạp tiền
            </button>
          </div>
        </div>

        {/* Right */}
        <div className="flex-1 flex justify-center items-center">
          <img
            src={WalletImage}
            alt="Wallet illustration"
            className="w-3/4 max-w-xs object-contain"
          />
        </div>
      </div>

      {showTopUp && <WalletModal onClose={() => setShowTopUp(false)} />}
      {showHistory && <WalletHistoryModal onClose={() => setShowHistory(false)} />}
    </div>
  );
};

export default WalletPage;

```

### pages\Dashboard\component\DaskboardContent.tsx
```tsx
// import React from 'react';
import tasksData from '../../../data/tasks.json'; // Import dữ liệu từ file JSON

const DashboardContent = () => {
  const getStatusColor = (status: string) => {
    switch (status) {
      case 'Đang làm':
        return 'bg-yellow-100 text-yellow-800';
      case 'Hoàn thành':
        return 'bg-green-100 text-green-800';
      case 'Chưa làm':
        return 'bg-gray-100 text-gray-800';
      default:
        return 'bg-blue-100 text-blue-800';
    }
  };

  return (
    <div className="bg-white dark:bg-gray-900 rounded-lg shadow p-6">
      <h1 className="text-4xl font-medium text-blue-600 dark:text-white mb-6">
        Danh sách công việc
      </h1>

      <div className="space-y-4">
        {tasksData.map((task) => (
          <div
            key={task.id}
            className="p-4 border border-gray-200 dark:border-gray-700 rounded-lg hover:shadow-md transition-shadow"
          >
            <div className="flex justify-between items-center">
              <h3 className="text-lg font-medium text-gray-800 dark:text-gray-200">
                {task.title}
              </h3>
              <span
                className={`px-3 py-1 text-sm rounded-full ${
                  getStatusColor(task.status ?? '')
                }`}
              >
                {task.status ?? 'Không rõ trạng thái'}
              </span>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default DashboardContent;

```

### pages\Dashboard\component\MainDashboard.tsx
```tsx
import React from "react";

const MainDashboard = () => {
  return (
    <div className=" bg-white dark:bg-gray-900 rounded-lg shadow p-6">
      <h1 className="text-4xl font-bold text-blue-600 dark:text-white mb-6">
        Dashboard
      </h1>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mt-12">
        <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md border border-gray-200 dark:border-gray-700">
          <h3 className="text-xl font-semibold text-gray-900 dark:text-white mb-4">
            Hôm nay
          </h3>
          <p className="text-gray-600 dark:text-gray-300">
            5 task
          </p>
        </div>

        <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md border border-gray-200 dark:border-gray-700">
          <h3 className="text-xl font-semibold text-gray-900 dark:text-white mb-4">
            Đang làm
          </h3>
          <p className="text-gray-600 dark:text-gray-300">
            3 Task
          </p>
        </div>

        <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md border border-gray-200 dark:border-gray-700">
          <h3 className="text-xl font-semibold text-gray-900 dark:text-white mb-4">
                Hoàn thành
          </h3>
          <p className="text-gray-600 dark:text-gray-300">
                2 Task
          </p>
        </div>
      </div>
    </div>
  );
};

export default MainDashboard;

```

### pages\Dashboard\component\PomodoroForm.tsx
```tsx
import React, { useState } from "react";

type PomodoroProps = {
  onCreate: (config: PomodoroConfig) => void;
};

export type PomodoroConfig = {
  title: string;
  workDuration: number;
  shortBreak: number;
  longBreak: number;
  longBreakInterval: number;
};

const PomodoroForm: React.FC<PomodoroProps> = ({ onCreate }) => {
  const [formData, setFormData] = useState<PomodoroConfig>({
    title: "",
    workDuration: 25,
    shortBreak: 5,
    longBreak: 15,
    longBreakInterval: 4,
  });

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: name === "title" ? value : Number(value),
    });
  };

  return (
    <div className="bg-white rounded-2xl shadow-2xl px-8 py-10 w-full max-w-xl mx-auto space-y-6">
      <h2 className="text-3xl font-extrabold text-center text-blue-700 mb-6">
        Tạo Pomodoro Time
      </h2>

      <div className="space-y-4">
        <InputField
          label="Tiêu đề công việc"
          name="title"
          type="text"
          value={formData.title}
          onChange={handleChange}
        />
        <InputField
          label="Thời gian làm việc (phút)"
          name="workDuration"
          type="number"
          value={formData.workDuration}
          onChange={handleChange}
        />
        <InputField
          label="Thời gian nghỉ ngắn (phút)"
          name="shortBreak"
          type="number"
          value={formData.shortBreak}
          onChange={handleChange}
        />
        <InputField
          label="Thời gian nghỉ dài (phút)"
          name="longBreak"
          type="number"
          value={formData.longBreak}
          onChange={handleChange}
        />
        <InputField
          label="Chu kỳ nghỉ dài (ví dụ: 4)"
          name="longBreakInterval"
          type="number"
          value={formData.longBreakInterval}
          onChange={handleChange}
        />
      </div>

      <button
        onClick={() => onCreate(formData)}
        className="w-full py-3 rounded-xl bg-blue-600 hover:bg-blue-700 text-white font-semibold transition duration-300 shadow-md"
      >
        Bắt đầu Pomodoro
      </button>
    </div>
  );
};

// Tách input thành 1 component để dễ tái sử dụng 
const InputField = ({
  label,
  name,
  type,
  value,
  onChange,
}: {
  label: string;
  name: string;
  type: string;
  value: string | number;
  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
}) => (
  <div>
    <label htmlFor={name} className="block text-sm font-medium text-gray-700 mb-1">
      {label}
    </label>
    <input
      type={type}
      name={name}
      value={value}
      onChange={onChange}
      className="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-blue-500 focus:outline-none transition"
    />
  </div>
);

export default PomodoroForm;

```

### pages\Dashboard\component\PomodoroTimer.tsx
```tsx
import React, { useEffect, useState } from "react";
import type { PomodoroConfig } from "./PomodoroForm";

type TimerProps = {
  config: PomodoroConfig;
};

const PomodoroTimer: React.FC<TimerProps> = ({ config }) => {
  const [secondsLeft, setSecondsLeft] = useState(config.workDuration * 60);
  const [isRunning, setIsRunning] = useState(false);
  const [phase, setPhase] = useState("làm việc");

  useEffect(() => {
    let timer: NodeJS.Timeout;
    if (isRunning && secondsLeft > 0) {
      timer = setInterval(() => setSecondsLeft((prev) => prev - 1), 1000);
    }
    return () => clearInterval(timer);
  }, [isRunning, secondsLeft]);

  const formatTime = () => {
    const minutes = Math.floor(secondsLeft / 60);
    const seconds = secondsLeft % 60;
    return `${minutes.toString().padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`;
  };

  const handleReset = () => {
    setIsRunning(false);
    setSecondsLeft(config.workDuration * 60);
    setPhase("làm việc");
  };

  return (
    <div className="bg-white rounded-2xl shadow-xl px-8 py-10 max-w-xl mx-auto text-center space-y-8">
      <h2 className="text-3xl font-extrabold text-blue-700">⏱ Pomodoro Timer</h2>

      <div className="text-6xl font-mono font-bold text-gray-800 tracking-widest">
        {formatTime()}
      </div>

      <div className="flex justify-center gap-4 mt-4">
        <button
          onClick={() => setIsRunning(true)}
          className="px-6 py-2 rounded-xl bg-green-600 hover:bg-green-700 text-white font-semibold shadow-md transition"
        >
          ▶ Bắt đầu
        </button>
        <button
          onClick={() => setIsRunning(false)}
          className="px-6 py-2 rounded-xl bg-yellow-500 hover:bg-yellow-600 text-white font-semibold shadow-md transition"
        >
          ⏸ Tạm dừng
        </button>
        <button
          onClick={handleReset}
          className="px-6 py-2 rounded-xl bg-red-600 hover:bg-red-700 text-white font-semibold shadow-md transition"
        >
          🔁 Reset
        </button>
      </div>

      <p className="text-gray-600 text-lg">
        🕓 Phiên hiện tại: <span className="font-semibold text-blue-800">{phase}</span>
      </p>
    </div>
  );
};

export default PomodoroTimer;

```

### pages\Dashboard\component\Wallet\walletHistory.tsx
```tsx
import React from 'react';

type HistoryItem = {
  id: number;
  date: string;
  time: string;
  amount: string;
  type: string;
  method: string;
  transactionId: string;
};

const dummyHistory: HistoryItem[] = [
  {
    id: 1,
    date: '2025-06-01',
    time: '14:35',
    amount: '+50,000₫',
    type: 'Nạp tiền',
    method: 'Momo',
    transactionId: 'MOMO123456789',
  },
  {
    id: 2,
    date: '2025-05-20',
    time: '09:20',
    amount: '-20,000₫',
    type: 'Thanh toán',
    method: 'ZaloPay',
    transactionId: 'ZALO0987654321',
  },
];

type WalletHistoryModalProps = {
  onClose: () => void;
};

const WalletHistoryModal: React.FC<WalletHistoryModalProps> = ({ onClose }) => {
  return (
    <div className="fixed inset-0 bg-opacity-30 backdrop-blur-sm flex justify-center items-center z-50">
      <div className="bg-white p-6 rounded-xl w-full max-w-2xl shadow-2xl">
        <h2 className="text-2xl font-bold text-center text-blue-600 mb-6">Lịch sử giao dịch</h2>

        <div className="overflow-y-auto max-h-[400px] divide-y">
          {dummyHistory.map((item) => (
            <div key={item.id} className="py-4 px-2 grid grid-cols-1 md:grid-cols-2 gap-3 text-sm md:text-base">
              <div>
                <p className="font-semibold text-gray-800">{item.type}</p>
                <p className="text-gray-500">{item.date} lúc {item.time}</p>
              </div>
              <div className="flex flex-col items-end md:items-start">
                <p className={`font-bold ${item.amount.startsWith('+') ? 'text-green-600' : 'text-red-600'}`}>
                  {item.amount}
                </p>
                <p className="text-gray-500">Phương thức: {item.method}</p>
                <p className="text-gray-400 text-xs break-all">Mã GD: {item.transactionId}</p>
              </div>
            </div>
          ))}
        </div>

        <div className="flex justify-end mt-6">
          <button
            onClick={onClose}
            className="bg-gray-300 text-gray-800 font-medium px-4 py-2 rounded hover:bg-gray-400 transition"
          >
            Đóng
          </button>
        </div>
      </div>
    </div>
  );
};

export default WalletHistoryModal;

```

### pages\Dashboard\component\Wallet\walletModal.tsx
```tsx
import React, { useState } from 'react';
// import MomoIcon from'@/assets/iconMomo.svg'
// import ZaloPayIcon from'@/assets/zalopay-seeklogo.svg';
import MomoPayQR from'@/assets/momoPay.jpg';
import ZaloPayQR from'@/assets/ZaloPay.jpg'; 

type WalletModalProps = {
  onClose: () => void;
};

const paymentMethods = [
  { id: 'momo', name: 'Momo', icon: '💸' },
  { id: 'visa', name: 'Visa Card', icon: '💳' },
  { id: 'zalopay', name: 'ZaloPay', icon: '🟦' },
];

const quickAmounts = [50000, 100000, 200000, 500000];

const WalletModal: React.FC<WalletModalProps> = ({ onClose }) => {
  const [selectedAmount, setSelectedAmount] = useState<number | null>(null);
  const [customAmount, setCustomAmount] = useState('');
  const [paymentMethod, setPaymentMethod] = useState('momo');

  const handleConfirm = () => {
    const amount = selectedAmount || parseInt(customAmount);
    if (!amount || amount <= 0) {
      alert('Vui lòng quét mã & nhập thông tin hợp lệ!');
      return;
    }

    alert(`Nạp ${amount.toLocaleString()}đ bằng ${paymentMethod}`);
    onClose();
  };

  const renderPaymentUI = () => {
    switch (paymentMethod) {
      case 'momo':
        return (
          <div className="flex flex-col items-center mt-4">
            <img src={MomoPayQR} alt="QR Momo" className="w-40 h-40 rounded shadow-md" />
            <p className="mt-2 text-sm text-gray-600">Hãy quét mã qr trên để thực hiện thanh toán</p>
          </div>
        );
      case 'visa':
        return (
          <div className="mt-4 space-y-3">
            <input type="text" placeholder="Số thẻ" className="input-style" />
            <input type="text" placeholder="Tên chủ thẻ" className="input-style" />
            <div className="flex space-x-2">
              <input type="text" placeholder="MM/YY" className="input-style w-1/2" />
              <input type="text" placeholder="CVV" className="input-style w-1/2" />
            </div>
          </div>
        );
      case 'zalopay':
        return (
          <div className="flex flex-col items-center mt-4">
            <img src={ZaloPayQR} alt="QR ZaloPay" className="w-40 h-40 rounded shadow-md" />
            <p className="mt-2 text-sm text-gray-600">Hãy quét mã qr trên để thực hiện thanh toán</p>
          </div>
        );
    }
  };

  return (
    <div className="fixed inset-0  bg-opacity-30 backdrop-blur-sm flex justify-center items-center z-50">
      <div className="bg-white p-6 rounded-lg w-full max-w-md shadow-xl relative">
        <h2 className="text-2xl font-bold mb-4 text-center text-blue-600">Nạp tiền vào tài khoản</h2>

        {/* Bảng giá */}
        <div className="grid grid-cols-2 gap-2 mb-4">
          {quickAmounts.map((amt) => (
            <button
              key={amt}
              onClick={() => {
                setSelectedAmount(amt);
                setCustomAmount('');
              }}
              className={`border px-4 py-2 rounded text-center font-medium ${
                selectedAmount === amt ? 'bg-blue-600 text-white' : 'hover:bg-blue-100'
              }`}
            >
              {amt.toLocaleString()}đ
            </button>
          ))}
        </div>

        {/* Nhập số tiền */}
        <input
          type="number"
          placeholder="Hoặc nhập số tiền (VND)"
          className="w-full border rounded px-3 py-2 mb-4 focus:outline-none focus:ring focus:border-blue-500"
          value={customAmount}
          onChange={(e) => {
            setCustomAmount(e.target.value);
            setSelectedAmount(null);
          }}
        />

        {/* Chọn phương thức thanh toán */}
        <div className="mb-4">
          <p className="font-semibold mb-2">Chọn phương thức thanh toán:</p>
          <div className="flex space-x-2">
            {paymentMethods.map((method) => (
              <button
                key={method.id}
                onClick={() => setPaymentMethod(method.id)}
                className={`flex-1 border rounded px-3 py-2 flex items-center justify-center space-x-2 ${
                  paymentMethod === method.id ? 'bg-blue-600 text-white' : 'hover:bg-blue-100'
                }`}
              >
                <span>{method.icon}</span>
                <span>{method.name}</span>
              </button>
            ))}
          </div>
        </div>

        {/* Giao diện từng loại thanh toán */}
        {renderPaymentUI()}

        {/* Nút hành động */}
        <div className="flex justify-end space-x-3 mt-6">
          <button onClick={onClose} className="bg-gray-300 px-4 py-2 rounded hover:bg-gray-400">
            Hủy
          </button>
          <button onClick={handleConfirm} className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">
            Xác nhận
          </button>
        </div>
      </div>
    </div>
  );
};

export default WalletModal;

```

### pages\Forms\FormElements.tsx
```tsx
import PageBreadcrumb from "../../components/common/PageBreadCrumb";
import DefaultInputs from "../../components/form/form-elements/DefaultInputs";
import InputGroup from "../../components/form/form-elements/InputGroup";
import DropzoneComponent from "../../components/form/form-elements/DropZone";
import CheckboxComponents from "../../components/form/form-elements/CheckboxComponents";
import RadioButtons from "../../components/form/form-elements/RadioButtons";
import ToggleSwitch from "../../components/form/form-elements/ToggleSwitch";
import FileInputExample from "../../components/form/form-elements/FileInputExample";
import SelectInputs from "../../components/form/form-elements/SelectInputs";
import TextAreaInput from "../../components/form/form-elements/TextAreaInput";
import InputStates from "../../components/form/form-elements/InputStates";

export default function FormElements() {
  return (
    <div>
      <PageBreadcrumb pageTitle="From Elements" />
      <div className="grid grid-cols-1 gap-6 xl:grid-cols-2">
        <div className="space-y-6">
          <DefaultInputs />
          <SelectInputs />
          <TextAreaInput />
          <InputStates />
        </div>
        <div className="space-y-6">
          <InputGroup />
          <FileInputExample />
          <CheckboxComponents />
          <RadioButtons />
          <ToggleSwitch />
          <DropzoneComponent />
        </div>
      </div>
    </div>
  );
}

```

### pages\Home\HomePage.tsx
```tsx
import BannerPage from '@/components/layout/BannerPage';
import Footer from '@/components/layout/Footer';
import NavHome from '@/components/layout/NavHome';
import React from 'react';


const HomePage: React.FC = () => {


  return (
    <>
          <NavHome></NavHome>
          <BannerPage></BannerPage>
          <Footer></Footer>
    </>
  );
};

export default HomePage;
```

### pages\Home\index.tsx
```tsx
// pages/Home/HomePage.tsx
import React from "react";
import ServiceCategories from "./components/ServiceCategories";
import LatestServices from "./components/LatestServices";
import HeroBanner from "./components/HeroBanner";
import HighestRating from "./components/HighestRating";
import MostBuy from "./components/MostBuy";

const HomePage: React.FC = () => {
  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
      {/* Hero Banner */}
      <HeroBanner />

      {/* Service Categories */}
      <ServiceCategories />

      {/* Latest Services */}
      <LatestServices />
      {/* Highest Rating */}
      <HighestRating></HighestRating>
      {/* Most Buy */}
      <MostBuy></MostBuy>
    </div>
  );
};

export default HomePage;

```

### pages\Home\components\HeroBanner.tsx
```tsx
// pages/Home/components/HeroBanner.tsx
import React from "react";

const HeroBanner: React.FC = () => {
  return (
    <section className="bg-gradient-to-r from-[#2A9D8F] to-[#8518c4] text-white py-16">
      <div className="container mx-auto px-4 text-center">
        <h1 className="text-4xl md:text-6xl font-bold mb-6">
          Chăm sóc thú cưng <br />
          <span className="text-orange-300">chuyên nghiệp</span>
        </h1>
        <p className="text-xl md:text-2xl mb-8 text-white/90">
          Tìm kiếm dịch vụ chăm sóc tốt nhất cho bé cưng của bạn
        </p>
        <button className="bg-orange-500 hover:bg-orange-600 text-white px-8 py-4 rounded-lg font-semibold text-lg transition-colors duration-200">
          Khám phá ngay
        </button>
      </div>
    </section>
  );
};

export default HeroBanner;

```

### pages\Home\components\HighestRating.tsx
```tsx
// pages/Home/components/LatestServices.tsx
import React from "react";
import Card from "../../../components/ui/Card";
import Button from "../../../components/ui/Button";

interface Service {
  id: number;
  title: string;
  price: string;
  image: string;
  rating?: number;
  reviews?: number;
}

const highestRating: Service[] = [
  {
    id: 1,
    title: "Cắt tỉa lông",
    price: "200.000 đ",
    image: "/public/image/service1.jpg",
    rating: 4.8,
    reviews: 124,
  },
  {
    id: 2,
    title: "Cắt tỉa lông",
    price: "200.000 đ",
    image: "/public/image/service2.jpg",
    rating: 4.9,
    reviews: 89,
  },
  {
    id: 3,
    title: "Cắt tỉa lông",
    price: "200.000 đ",
    image: "/public/image/service3.jpg",
    rating: 4.7,
    reviews: 156,
  },
  {
    id: 4,
    title: "Cắt tỉa lông",
    price: "200.000 đ",
    image: "/public/image/service4.jpg",
    rating: 4.8,
    reviews: 203,
  },
  {
    id: 5,
    title: "Cắt tỉa lông",
    price: "200.000 đ",
    image: "/public/image/service5.jpg",
    rating: 4.9,
    reviews: 178,
  },
  {
    id: 6,
    title: "Cắt tỉa lông",
    price: "200.000 đ",
    image: "/public/image/service6.jpg",
    rating: 4.6,
    reviews: 92,
  },
];

const HighestRating: React.FC = () => {
  return (
    <section className="py-12 bg-gray-50">
      <div className="container mx-auto px-4">
        {/* Header */}
        <div className="text-center mb-8">
          <div className="relative pb-3 w-full">
            {" "}
            {/* Changed to full width and added padding bottom */}
            <h2 className="text-2xl md:text-3xl font-bold text-gray-900 mb-2">
              ĐÁNH GIÁ CAO NHẤT 💯
            </h2>
            <div className="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-400 h-3 bg-[#2A9D8F] rounded"></div>
          </div>
        </div>

        {/* Services Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-6">
          {highestRating.map((service) => (
            <ServiceCard key={service.id} service={service} />
          ))}
        </div>

        {/* View More Button */}
        <div className="text-center mt-8">
          <Button
            variant="outline"
            size="md"
            className="border-[#2A9D8F] text-[#2A9D8F] hover:bg-[#2A9D8F] hover:text-white"
          >
            Xem thêm dịch vụ
          </Button>
        </div>
      </div>
    </section>
  );
};

// Service Card Component
interface ServiceCardProps {
  service: Service;
}

const ServiceCard: React.FC<ServiceCardProps> = ({ service }) => {
  return (
    <Card className="overflow-hidden hover:shadow-lg transition-shadow duration-200 cursor-pointer group">
      {/* Image */}
      <div className="relative overflow-hidden">
        <img
          src={service.image}
          alt={service.title}
          className="w-full h-48 object-cover group-hover:scale-105 transition-transform duration-200"
          onError={(e) => {
            // Fallback image
            (e.target as HTMLImageElement).src =
              "https://i.pinimg.com/736x/26/c7/35/26c7355fe46f62d84579857c6f8c4ea5.jpg";
          }}
        />
        {service.rating && (
          <div className="absolute top-2 right-2 bg-white/90 backdrop-blur-sm px-2 py-1 rounded-full flex items-center gap-1">
            <span className="text-yellow-500 text-sm">⭐</span>
            <span className="text-xs font-medium">{service.rating}</span>
          </div>
        )}
      </div>

      {/* Content */}
      <div className="p-4">
        <h3 className="font-semibold text-gray-900 mb-2 group-hover:text-[#2A9D8F] transition-colors duration-200">
          {service.title}
        </h3>
        <div className="flex items-center justify-between">
          <span className="text-lg font-bold text-[#2A9D8F]">
            {service.price}
          </span>
          {service.reviews && (
            <span className="text-xs text-gray-500">
              ({service.reviews} đánh giá)
            </span>
          )}
        </div>
        <Button
          variant="primary"
          size="sm"
          className="w-full mt-3 bg-[#2A9D8F] hover:bg-[#238276]"
        >
          Đặt ngay
        </Button>
      </div>
    </Card>
  );
};

export default HighestRating;

```

### pages\Home\components\LatestServices.tsx
```tsx
// pages/Home/components/LatestServices.tsx
import React from "react";
import Card from "../../../components/ui/Card";
import Button from "../../../components/ui/Button";

interface Service {
  id: number;
  title: string;
  price: string;
  image: string;
  rating?: number;
  reviews?: number;
}

const latestServices: Service[] = [
  {
    id: 1,
    title: "Cắt tỉa lông",
    price: "200.000 đ",
    image: "/public/image/service1.jpg",
    rating: 4.8,
    reviews: 124,
  },
  {
    id: 2,
    title: "Cắt tỉa lông",
    price: "200.000 đ",
    image: "/public/image/service2.jpg",
    rating: 4.9,
    reviews: 89,
  },
  {
    id: 3,
    title: "Cắt tỉa lông",
    price: "200.000 đ",
    image: "/public/image/service3.jpg",
    rating: 4.7,
    reviews: 156,
  },
  {
    id: 4,
    title: "Cắt tỉa lông",
    price: "200.000 đ",
    image: "/public/image/service4.jpg",
    rating: 4.8,
    reviews: 203,
  },
  {
    id: 5,
    title: "Cắt tỉa lông",
    price: "200.000 đ",
    image: "/public/image/service5.jpg",
    rating: 4.9,
    reviews: 178,
  },
  {
    id: 6,
    title: "Cắt tỉa lông",
    price: "200.000 đ",
    image: "/public/image/service6.jpg",
    rating: 4.6,
    reviews: 92,
  },
];

const LatestServices: React.FC = () => {
  return (
    <section className="py-12 bg-gray-50">
      <div className="container mx-auto px-4">
        {/* Header */}
        <div className="text-center mb-8">
          <div className="relative pb-3 w-full">
            {/* Changed to full width and added padding bottom */}
            <h2 className="text-2xl md:text-3xl font-bold text-gray-900 mb-2">
              DỊCH VỤ MỚI NHẤT 📰
            </h2>
            <div className="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-400 h-3 bg-[#2A9D8F] rounded"></div>
          </div>
        </div>

        {/* Services Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-6">
          {latestServices.map((service) => (
            <ServiceCard key={service.id} service={service} />
          ))}
        </div>

        {/* View More Button */}
        <div className="text-center mt-8">
          <Button
            variant="outline"
            size="md"
            className="border-[#2A9D8F] text-[#2A9D8F] hover:bg-[#2A9D8F] hover:text-white"
          >
            Xem thêm dịch vụ
          </Button>
        </div>
      </div>
    </section>
  );
};

// Service Card Component
interface ServiceCardProps {
  service: Service;
}

const ServiceCard: React.FC<ServiceCardProps> = ({ service }) => {
  return (
    <Card className="overflow-hidden hover:shadow-lg transition-shadow duration-200 cursor-pointer group">
      {/* Image */}
      <div className="relative overflow-hidden">
        <img
          src={service.image}
          alt={service.title}
          className="w-full h-48 object-cover group-hover:scale-105 transition-transform duration-200"
          onError={(e) => {
            // Fallback image
            (e.target as HTMLImageElement).src =
              "https://i.pinimg.com/736x/38/f4/f2/38f4f2d8652c7aa795f5e3ee75b5919c.jpg";
          }}
        />
        {service.rating && (
          <div className="absolute top-2 right-2 bg-white/90 backdrop-blur-sm px-2 py-1 rounded-full flex items-center gap-1">
            <span className="text-yellow-500 text-sm">⭐</span>
            <span className="text-xs font-medium">{service.rating}</span>
          </div>
        )}
      </div>

      {/* Content */}
      <div className="p-4">
        <h3 className="font-semibold text-gray-900 mb-2 group-hover:text-[#2A9D8F] transition-colors duration-200">
          {service.title}
        </h3>
        <div className="flex items-center justify-between">
          <span className="text-lg font-bold text-[#2A9D8F]">
            {service.price}
          </span>
          {service.reviews && (
            <span className="text-xs text-gray-500">
              ({service.reviews} đánh giá)
            </span>
          )}
        </div>
        <Button
          variant="primary"
          size="sm"
          className="w-full mt-3 bg-[#2A9D8F] hover:bg-[#238276]"
        >
          Đặt ngay
        </Button>
      </div>
    </Card>
  );
};

export default LatestServices;

```

### pages\Home\components\MostBuy.tsx
```tsx
// pages/Home/components/LatestServices.tsx
import React from "react";
import Card from "../../../components/ui/Card";
import Button from "../../../components/ui/Button";

interface Service {
  id: number;
  title: string;
  price: string;
  image: string;
  rating?: number;
  reviews?: number;
}

const mostBuy: Service[] = [
  {
    id: 1,
    title: "Cắt tỉa lông",
    price: "200.000 đ",
    image: "/public/image/service1.jpg",
    rating: 4.8,
    reviews: 124,
  },
  {
    id: 2,
    title: "Cắt tỉa lông",
    price: "200.000 đ",
    image: "/public/image/service2.jpg",
    rating: 4.9,
    reviews: 89,
  },
  {
    id: 3,
    title: "Cắt tỉa lông",
    price: "200.000 đ",
    image: "/public/image/service3.jpg",
    rating: 4.7,
    reviews: 156,
  },
  {
    id: 4,
    title: "Cắt tỉa lông",
    price: "200.000 đ",
    image: "/public/image/service4.jpg",
    rating: 4.8,
    reviews: 203,
  },
  {
    id: 5,
    title: "Cắt tỉa lông",
    price: "200.000 đ",
    image: "/public/image/service5.jpg",
    rating: 4.9,
    reviews: 178,
  },
  {
    id: 6,
    title: "Cắt tỉa lông",
    price: "200.000 đ",
    image: "/public/image/service6.jpg",
    rating: 4.6,
    reviews: 92,
  },
];

const MostBuy: React.FC = () => {
  return (
    <section className="py-12 bg-gray-50">
      <div className="container mx-auto px-4">
        {/* Header */}
        <div className="text-center mb-8">
          <div className="relative pb-3 w-full">
            {" "}
            {/* Changed to full width and added padding bottom */}
            <h2 className="text-2xl md:text-3xl font-bold text-gray-900 mb-2">
              LƯỢT ĐẶT NHIỀU NHẤT 👍
            </h2>
            <div className="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-400 h-3 bg-[#2A9D8F] rounded"></div>
          </div>
        </div>

        {/* Services Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-6">
          {mostBuy.map((service) => (
            <ServiceCard key={service.id} service={service} />
          ))}
        </div>

        {/* View More Button */}
        <div className="text-center mt-8">
          <Button
            variant="outline"
            size="md"
            className="border-[#2A9D8F] text-[#2A9D8F] hover:bg-[#2A9D8F] hover:text-white"
          >
            Xem thêm dịch vụ
          </Button>
        </div>
      </div>
    </section>
  );
};

// Service Card Component
interface ServiceCardProps {
  service: Service;
}

const ServiceCard: React.FC<ServiceCardProps> = ({ service }) => {
  return (
    <Card className="overflow-hidden hover:shadow-lg transition-shadow duration-200 cursor-pointer group">
      {/* Image */}
      <div className="relative overflow-hidden">
        <img
          src={service.image}
          alt={service.title}
          className="w-full h-48 object-cover group-hover:scale-105 transition-transform duration-200"
          onError={(e) => {
            // Fallback image
            (e.target as HTMLImageElement).src =
              "https://i.pinimg.com/736x/c3/4c/dc/c34cdcf73b7bea6856f82d93c200f874.jpg";
          }}
        />
        {service.rating && (
          <div className="absolute top-2 right-2 bg-white/90 backdrop-blur-sm px-2 py-1 rounded-full flex items-center gap-1">
            <span className="text-yellow-500 text-sm">⭐</span>
            <span className="text-xs font-medium">{service.rating}</span>
          </div>
        )}
      </div>

      {/* Content */}
      <div className="p-4">
        <h3 className="font-semibold text-gray-900 mb-2 group-hover:text-[#2A9D8F] transition-colors duration-200">
          {service.title}
        </h3>
        <div className="flex items-center justify-between">
          <span className="text-lg font-bold text-[#2A9D8F]">
            {service.price}
          </span>
          {service.reviews && (
            <span className="text-xs text-gray-500">
              ({service.reviews} đánh giá)
            </span>
          )}
        </div>
        <Button
          variant="primary"
          size="sm"
          className="w-full mt-3 bg-[#2A9D8F] hover:bg-[#238276]"
        >
          Đặt ngay
        </Button>
      </div>
    </Card>
  );
};

export default MostBuy;

```

### pages\Home\components\ServiceCard.tsx
```tsx
// pages/Home/components/ServiceCard.tsx
import React from "react";
import Card from "../../../components/ui/Card";
import Button from "../../../components/ui/Button";
import { Link } from "react-router-dom";

interface Service {
  id: number;
  title: string;
  price: string;
  image: string;
  rating?: number;
  reviews?: number;
  description?: string;
}

interface ServiceCardProps {
  service: Service;
  className?: string;
}

const ServiceCard: React.FC<ServiceCardProps> = ({
  service,
  className = "",
}) => {
  return (
    <Card
      className={`overflow-hidden hover:shadow-lg transition-shadow duration-200 cursor-pointer group ${className}`}
    >
      {/* Image Container */}
      <div className="relative overflow-hidden">
        <img
          src={service.image}
          alt={service.title}
          className="w-full h-48 object-cover group-hover:scale-105 transition-transform duration-200"
          onError={(e) => {
            // Fallback image nếu không load được
            (e.target as HTMLImageElement).src =
              "hhttps://i.pinimg.com/736x/38/f4/f2/38f4f2d8652c7aa795f5e3ee75b5919c.jpg";
          }}
        />

        {/* Rating Badge */}
        {service.rating && (
          <div className="absolute top-2 right-2 bg-white/90 backdrop-blur-sm px-2 py-1 rounded-full flex items-center gap-1">
            <span className="text-yellow-500 text-sm">⭐</span>
            <span className="text-xs font-medium">{service.rating}</span>
          </div>
        )}

        {/* Overlay khi hover */}
        <div className="absolute inset-0 bg-black/0 group-hover:bg-black/10 transition-colors duration-200"></div>
      </div>

      {/* Content */}
      <div className="p-4">
        <h3 className="font-semibold text-gray-900 mb-2 group-hover:text-[#2A9D8F] transition-colors duration-200 line-clamp-2">
          {service.title}
        </h3>

        {service.description && (
          <p className="text-sm text-gray-600 mb-3 line-clamp-2">
            {service.description}
          </p>
        )}

        {/* Price and Reviews */}
        <div className="flex items-center justify-between mb-3">
          <span className="text-lg font-bold text-[#2A9D8F]">
            {service.price}
          </span>
          {service.reviews && (
            <span className="text-xs text-gray-500">
              ({service.reviews} đánh giá)
            </span>
          )}
        </div>

        {/* Action Buttons */}
        <div className="flex gap-2">
          <Button
            variant="primary"
            size="sm"
            className="flex-1 bg-[#2A9D8F] hover:bg-[#238276]"
            onClick={() => console.log("Đặt dịch vụ:", service.id)}
          >
            Đặt ngay
          </Button>
          <Link to={`/service/${service.id}`}>
            <Button
              variant="outline"
              size="sm"
              className="border-[#2A9D8F] text-[#2A9D8F] hover:bg-[#2A9D8F] hover:text-white"
            >
              Chi tiết
            </Button>
          </Link>
        </div>
      </div>
    </Card>
  );
};

export default ServiceCard;

```

### pages\Home\components\ServiceCategories.tsx
```tsx
// pages/Home/components/ServiceCategories.tsx
import React from "react";
import ComponentCard from "../../../components/common/ComponentCard";

interface ServiceCategory {
  id: number;
  name: string;
  icon: string;
  description?: string;
}

const serviceCategories: ServiceCategory[] = [
  { id: 1, name: "Massage", icon: "💆" },
  { id: 2, name: "Grooming", icon: "✂️" },
  { id: 3, name: "Lưu trú", icon: "🏠" },
  { id: 4, name: "Dịch vụ thú y", icon: "🏥" },
  { id: 5, name: "Huấn luyện", icon: "🎯" },
  { id: 6, name: "Chụp ảnh", icon: "📸" },
  { id: 7, name: "Tổ chức tiệc", icon: "🎉" },
  { id: 8, name: "Chăm sóc đặc biệt", icon: "⭐" },
];

const ServiceCategories: React.FC = () => {
  return (
    <section className="py-12 bg-white">
      <div className="container mx-auto px-4">
        <ComponentCard
          title="Danh mục dịch vụ"
          className="border-0 shadow-none bg-transparent"
        >
          <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-8 gap-4">
            {serviceCategories.map((category) => (
              <div
                key={category.id}
                className="flex flex-col items-center p-4 rounded-lg border border-gray-200 hover:border-[#2A9D8F] hover:shadow-md transition-all duration-200 cursor-pointer group"
              >
                <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center text-2xl mb-3 group-hover:bg-[#2A9D8F]/10 transition-colors duration-200">
                  {category.icon}
                </div>
                <span className="text-sm font-medium text-gray-700 text-center group-hover:text-[#2A9D8F] transition-colors duration-200">
                  {category.name}
                </span>
              </div>
            ))}
          </div>
        </ComponentCard>
      </div>
    </section>
  );
};

export default ServiceCategories;

```

### pages\Login\index.tsx
```tsx
// src/pages/Login/index.tsx
import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { FiEye, FiEyeOff } from "react-icons/fi";
import { useLoginForm } from "./hooks/useLoginForm";
import ForgotPassword from "./components/ForgotPassword";

export default function LoginPage() {
  const navigate = useNavigate();
  const [showForgotPassword, setShowForgotPassword] = useState(false);

  const {
    formData,
    formErrors,
    showPassword,
    loading,
    error,
    isAuthenticated,
    handleInputChange,
    handleSubmit,
    setShowPassword,
  } = useLoginForm();

  useEffect(() => {
    if (isAuthenticated) {
      navigate("/", { replace: true });
    }
  }, [isAuthenticated, navigate]);

  return (
    <>
      <div className="flex h-screen relative">
        <button
          onClick={() => navigate("/")}
          className="absolute top-6 right-6 p-2 rounded hover:bg-gray-200"
          aria-label="Trang chủ"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className="h-6 w-6 text-[#2A9D8F]"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
            strokeWidth={2}
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              d="M3 9.75L12 3l9 6.75v10.5a.75.75 0 01-.75.75h-5.25a.75.75 0 01-.75-.75v-5.25H9v5.25a.75.75 0 01-.75.75H3.75a.75.75 0 01-.75-.75V9.75z"
            />
          </svg>
        </button>

        <div className="w-1/2 flex items-center justify-center bg-white">
          <div className="w-full max-w-md p-8 shadow-lg rounded-xl border">
            <h2 className="text-2xl font-bold text-center mb-6">Đăng nhập</h2>
            <p className="text-center text-gray-600 mb-6">
              Chào mừng bạn trở lại!
            </p>

            {error && (
              <div className="mb-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded">
                {error.message}
              </div>
            )}

            <form onSubmit={handleSubmit} className="space-y-4">
              <div>
                <input
                  type="text"
                  placeholder="Tên đăng nhập"
                  className={`w-full px-4 py-3 border rounded-md ${
                    formErrors.username ? "border-red-500" : "border-gray-300"
                  }`}
                  value={formData.username}
                  onChange={(e) =>
                    handleInputChange("username", e.target.value)
                  }
                  disabled={loading}
                />
                {formErrors.username && (
                  <p className="text-red-500 text-sm mt-1">
                    {formErrors.username}
                  </p>
                )}
              </div>

              <div>
                <div className="relative">
                  <input
                    type={showPassword ? "text" : "password"}
                    placeholder="Mật khẩu"
                    className={`w-full px-4 py-3 border rounded-md ${
                      formErrors.password ? "border-red-500" : "border-gray-300"
                    }`}
                    value={formData.password}
                    onChange={(e) =>
                      handleInputChange("password", e.target.value)
                    }
                    disabled={loading}
                  />
                  <span
                    className="absolute right-4 top-3 cursor-pointer text-gray-600"
                    onClick={() => setShowPassword(!showPassword)}
                  >
                    {showPassword ? (
                      <FiEyeOff size={20} />
                    ) : (
                      <FiEye size={20} />
                    )}
                  </span>
                </div>
                {formErrors.password && (
                  <p className="text-red-500 text-sm mt-1">
                    {formErrors.password}
                  </p>
                )}
              </div>

              <div className="flex items-center justify-between text-sm">
                <label className="flex items-center gap-2">
                  <input
                    type="checkbox"
                    className="accent-blue-600"
                    checked={formData.rememberMe}
                    onChange={(e) =>
                      handleInputChange("rememberMe", e.target.checked)
                    }
                    disabled={loading}
                  />
                  Ghi nhớ mật khẩu?
                </label>
                <button
                  type="button"
                  className="text-[#2A9D8F] hover:underline"
                  onClick={() => setShowForgotPassword(true)}
                >
                  Quên mật khẩu?
                </button>
              </div>

              <button
                type="submit"
                disabled={loading}
                className={`w-full py-3 text-white rounded-md transition ${
                  loading
                    ? "bg-gray-400 cursor-not-allowed"
                    : "bg-[#2A9D8F] hover:bg-[#228B7E]"
                }`}
              >
                {loading ? "Đang đăng nhập..." : "Đăng nhập"}
              </button>

              <p className="text-center text-sm mt-4">
                Chưa có tài khoản?{" "}
                <button
                  type="button"
                  onClick={() => navigate("/registertype")}
                  className="text-[#2A9D8F] font-medium hover:underline"
                >
                  Đăng ký ngay!
                </button>
              </p>
            </form>
          </div>
        </div>

        <div className="w-1/2 bg-[#E7F3F5] flex flex-col justify-center items-center">
          <div className="w-full max-w-4xl mx-auto p-4 md:p-6 lg:p-8 rounded-lg fixed-size">
            <img
              src="/public/image/ranbowlogo.png"
              alt="Logo"
              className="w-full h-auto object-contain max-w-full"
              style={{
                maxWidth: "100%",
                width: "auto",
                height: "auto",
                objectFit: "contain",
                userSelect: "none",
                transform: "scale(1)",
                transformOrigin: "center center",
              }}
            />
          </div>
        </div>
      </div>

      {showForgotPassword && (
        <div className="fixed inset-0 bg-black/30 backdrop-blur-sm flex justify-center items-center z-50">
          <ForgotPassword onClose={() => setShowForgotPassword(false)} />
        </div>
      )}
    </>
  );
}

```

### pages\Login\components\AuthWrapper.tsx
```tsx
// src/components/AuthWrapper.tsx
import { useEffect } from "react";
import { useDispatch } from "react-redux";
import { restoreAuth } from "../../../store/slices/authSlice";
import type { AppDispatch } from "../../../store/store";

interface AuthWrapperProps {
  children: React.ReactNode;
}

export const AuthWrapper: React.FC<AuthWrapperProps> = ({ children }) => {
  const dispatch = useDispatch<AppDispatch>();

  useEffect(() => {
    dispatch(restoreAuth());
  }, [dispatch]);

  return <>{children}</>;
};

```

### pages\Login\components\EnterOTPCode.tsx
```tsx
import React, { useEffect, useRef, useState } from "react";

interface EnterOTPCodeProps {
  onClose: () => void;
}

const EnterOTPCode: React.FC<EnterOTPCodeProps> = ({ onClose }) => {
  const [otp, setOtp] = useState<string[]>(["", "", "", "", ""]);
  const [countdown, setCountdown] = useState(56);
  const inputRefs = useRef<(HTMLInputElement | null)[]>([]);

  // Countdown timer
  useEffect(() => {
    if (countdown > 0) {
      const timer = setTimeout(() => setCountdown(countdown - 1), 1000);
      return () => clearTimeout(timer);
    }
  }, [countdown]);

  // Xử lý thay đổi input OTP
  const handleOtpChange = (index: number, value: string) => {
    // Chỉ cho phép nhập số
    if (!/^\d*$/.test(value)) return;

    const newOtp = [...otp];
    newOtp[index] = value;
    setOtp(newOtp);

    // Tự động chuyển sang ô tiếp theo
    if (value && index < 4) {
      inputRefs.current[index + 1]?.focus();
    }
  };

  // Xử lý phím Backspace
  const handleKeyDown = (index: number, e: React.KeyboardEvent) => {
    if (e.key === "Backspace" && !otp[index] && index > 0) {
      inputRefs.current[index - 1]?.focus();
    }
  };

  // Xử lý paste
  const handlePaste = (e: React.ClipboardEvent) => {
    e.preventDefault();
    const pastedData = e.clipboardData.getData("text").slice(0, 5);
    const newOtp = pastedData.split("").concat(Array(5).fill("")).slice(0, 5);
    setOtp(newOtp);

    // Focus vào ô cuối cùng có dữ liệu
    const lastFilledIndex = Math.min(pastedData.length - 1, 4);
    inputRefs.current[lastFilledIndex]?.focus();
  };

  // Xử lý submit
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    const otpCode = otp.join("");

    if (otpCode.length !== 5) {
      alert("Vui lòng nhập đầy đủ mã OTP!");
      return;
    }

    // TODO: Xử lý xác thực OTP
    alert(`Mã OTP đã nhập: ${otpCode}`);
    onClose();
  };

  // Gửi lại mã OTP
  const handleResendOTP = () => {
    setCountdown(56);
    setOtp(["", "", "", "", ""]);
    inputRefs.current[0]?.focus();
    // TODO: Gọi API gửi lại OTP
    alert("Đã gửi lại mã OTP!");
  };

  // Format thời gian countdown
  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, "0")}:${secs
      .toString()
      .padStart(2, "0")}`;
  };

  return (
    <div className="bg-white rounded-lg shadow-lg p-6 w-[400px] relative">
      {/* Nút đóng popup */}
      <button
        onClick={onClose}
        className="absolute top-4 right-4 text-gray-600 hover:text-gray-900 font-bold text-xl"
        aria-label="Đóng"
      >
        ✕
      </button>

      <h3 className="text-xl font-semibold mb-2 text-center">Quên mật khẩu</h3>

      <p className="text-sm text-gray-600 mb-6 text-center">Nhập mã OTP</p>

      <form onSubmit={handleSubmit} className="space-y-6">
        {/* 5 ô nhập OTP */}
        <div className="flex justify-center space-x-3">
          {otp.map((digit, index) => (
            <input
              key={index}
              ref={(el) => (inputRefs.current[index] = el)}
              type="text"
              maxLength={1}
              value={digit}
              onChange={(e) => handleOtpChange(index, e.target.value)}
              onKeyDown={(e) => handleKeyDown(index, e)}
              onPaste={index === 0 ? handlePaste : undefined}
              className="w-12 h-12 text-center text-lg font-semibold border-2 border-gray-300 rounded-lg focus:border-[#2A9D8F] focus:outline-none transition-colors"
              autoComplete="off"
            />
          ))}
        </div>

        {/* Nút xác nhận */}
        <button
          type="submit"
          className="w-full py-3 bg-[#2A9D8F] text-white rounded-lg hover:bg-[#228B7E] transition-colors font-medium"
        >
          Xác nhận
        </button>

        {/* Gửi lại mã OTP */}
        <div className="text-center">
          {countdown > 0 ? (
            <p className="text-sm text-gray-600">
              Gửi lại mã sau ({formatTime(countdown)})
            </p>
          ) : (
            <button
              type="button"
              onClick={handleResendOTP}
              className="text-sm text-[#2A9D8F] hover:underline font-medium"
            >
              Gửi lại mã OTP
            </button>
          )}
        </div>
      </form>
    </div>
  );
};

export default EnterOTPCode;

```

### pages\Login\components\ForgotPassword.tsx
```tsx
import React, { useState } from "react";
import EnterOTPCode from "./EnterOTPCode";

interface ForgotPasswordProps {
  onClose: () => void;
}

const ForgotPassword: React.FC<ForgotPasswordProps> = ({ onClose }) => {
  const [email, setEmail] = useState("");
  const [enterOtpCode, setEnterOtpCode] = useState(false);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();

    // Kiểm tra email có hợp lệ không
    if (!email.trim()) {
      alert("Vui lòng nhập email!");
      return;
    }

    // TODO: Xử lý gửi email khôi phục mật khẩu ở đây
    // Giả sử API call thành công

    // Hiển thị modal EnterOTPCode thay vì đóng modal hiện tại
    setEnterOtpCode(true);

    // Không gọi onClose() ở đây nữa
    // onClose(); // ← Xóa dòng này
  };

  return (
    <>
      <div className="bg-white rounded-lg shadow-lg p-6 w-[400px] relative">
        {/* Nút đóng popup */}
        <button
          onClick={onClose}
          className="absolute top-4 right-4 text-gray-600 hover:text-gray-900 font-bold"
          aria-label="Đóng"
        >
          ✕
        </button>

        <h3 className="text-xl font-semibold mb-4 text-center">
          Quên mật khẩu
        </h3>
        <p className="text-x2 text-[#323333] mb-4 text-center">
          Vui lòng nhập email của bạn
        </p>

        <form onSubmit={handleSubmit} className="space-y-4">
          {/* Trường nhập email */}
          <div className="relative">
            <input
              type="email"
              placeholder="Email của bạn"
              className="w-full px-4 py-2 border rounded-md"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
          </div>

          {/* Nút submit */}
          <button
            type="submit"
            className="w-full py-3 bg-[#2A9D8F] text-white rounded-md hover:bg-[#228B7E] transition"
          >
            Gửi mã OTP
          </button>
        </form>
      </div>

      {/* Modal nhập mã OTP */}
      {enterOtpCode && (
        <div className="fixed inset-0 bg-black/30 backdrop-blur-sm flex justify-center items-center z-50">
          <EnterOTPCode
            onClose={() => {
              setEnterOtpCode(false);
              onClose(); // Đóng cả modal ForgotPassword khi đóng EnterOTPCode
            }}
          />
        </div>
      )}
    </>
  );
};

export default ForgotPassword;

```

### pages\Login\components\LoginForm.tsx
```tsx

```

### pages\Login\components\SocialLogin.tsx
```tsx

```

### pages\Login\hooks\useLoginForm.ts
```ts
// src/pages/Login/hooks/useLoginForm.ts
import { useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { useNavigate, useLocation } from "react-router-dom";
import { Login, LoginNoRemember } from "../../../store/slices/authSlice";
import type { RootState, AppDispatch } from "../../../store/store";

interface LoginFormData {
  username: string;
  password: string;
  rememberMe: boolean;
}

interface FormErrors {
  username?: string;
  password?: string;
}

export const useLoginForm = () => {
  const dispatch = useDispatch<AppDispatch>();
  const navigate = useNavigate();
  const location = useLocation();

  const { loading, error, isAuthenticated, user } = useSelector(
    (state: RootState) => state.auth
  );

  const [formData, setFormData] = useState<LoginFormData>({
    username: "",
    password: "",
    rememberMe: false,
  });
  const [formErrors, setFormErrors] = useState<FormErrors>({});
  const [showPassword, setShowPassword] = useState(false);

  const handleInputChange = (
    field: keyof LoginFormData,
    value: string | boolean
  ) => {
    setFormData((prev) => ({ ...prev, [field]: value }));

    if (field in formErrors && formErrors[field as keyof FormErrors]) {
      setFormErrors((prev: FormErrors) => ({ ...prev, [field]: undefined }));
    }
  };

  const validateForm = () => {
    const errors: FormErrors = {};

    if (!formData.username) {
      errors.username = "Tên đăng nhập không được để trống";
    } else if (formData.username.length < 3) {
      errors.username = "Tên đăng nhập phải có ít nhất 3 ký tự";
    }

    if (!formData.password) {
      errors.password = "Mật khẩu không được để trống";
    } else if (formData.password.length < 6) {
      errors.password = "Mật khẩu phải có ít nhất 6 ký tự";
    }

    return errors;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    const errors = validateForm();
    if (Object.keys(errors).length > 0) {
      setFormErrors(errors);
      return;
    }

    try {
      const loginAction = formData.rememberMe ? Login : LoginNoRemember;

      await dispatch(
        loginAction({
          username: formData.username,
          password: formData.password,
        })
      ).unwrap();

      const from = (location.state as any)?.from?.pathname || "/dashboard";
      navigate(from, { replace: true });
    } catch (error: any) {
      console.error("Login failed:", error);
    }
  };

  return {
    formData,
    formErrors,
    showPassword,
    loading,
    error,
    isAuthenticated,
    user,
    handleInputChange,
    handleSubmit,
    setShowPassword,
  };
};

```

### pages\Login\utils\loginValidation.ts
```ts
// utils/loginValidation.ts
interface LoginFormData {
  username: string; // ✅ Đổi từ email sang username
  password: string;
}

interface LoginFormErrors {
  username?: string; // ✅ Đổi từ email sang username
  password?: string;
}

export const validateLogin = (data: LoginFormData): LoginFormErrors => {
  const errors: LoginFormErrors = {};

  // ✅ Validate username thay vì email
  if (!data.username) {
    errors.username = "Tên đăng nhập không được để trống";
  } else if (data.username.length < 3) {
    errors.username = "Tên đăng nhập phải có ít nhất 3 ký tự";
  }

  // Validate password
  if (!data.password) {
    errors.password = "Mật khẩu không được để trống";
  } else if (data.password.length < 6) {
    errors.password = "Mật khẩu phải có ít nhất 6 ký tự";
  }

  return errors;
};

```

### pages\NotFound\index.tsx
```tsx
import React from "react";
import { Link } from "react-router-dom";
import Button from "../../components/ui/Button";

const NotFound: React.FC = () => {
  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50">
      <div className="max-w-md w-full text-center">
        <div className="text-9xl font-bold text-blue-600">404</div>
        <h1 className="text-2xl font-bold text-gray-900 mt-4">
          Trang không tìm thấy
        </h1>
        <p className="text-gray-600 mt-2">
          Trang bạn đang tìm kiếm không tồn tại.
        </p>
        <div className="mt-6">
          <Link to="/">
            <Button variant="primary">Về trang chủ</Button>
          </Link>
        </div>
      </div>
    </div>
  );
};

export default NotFound;

```

### pages\Profile\index.tsx
```tsx

```

### pages\Register\index.tsx
```tsx
// File: src/pages/RegisterPage.tsx
import { useState } from "react";
import {
  Eye,
  EyeOff,
  User,
  Mail,
  Home,
  Calendar,
  ChevronDown,
} from "lucide-react";
import { useNavigate } from "react-router-dom";

export default function RegisterPage() {
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);

  const [username, setUsername] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [fullName, setFullName] = useState("");
  const [birthDate, setBirthDate] = useState("");
  const [gender, setGender] = useState("");
  const [errors, setErrors] = useState({
    username: "",
    email: "",
    password: "",
    confirmPassword: "",
    fullName: "",
    birthDate: "",
    gender: "",
  });

  const navigate = useNavigate();

  const validateEmail = (email: string) => {
    return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
  };

  const validatePassword = (password: string) => {
    return /^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{6,}$/.test(password);
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    const newErrors = {
      username: "",
      email: "",
      password: "",
      confirmPassword: "",
      fullName: "",
      birthDate: "",
      gender: "",
    };
    let valid = true;

    if (!username.trim()) {
      newErrors.username = "Tên người dùng không được để trống";
      valid = false;
    }
    if (!validateEmail(email)) {
      newErrors.email = "Email không hợp lệ";
      valid = false;
    }
    if (!validatePassword(password)) {
      newErrors.password = "Mật khẩu phải từ 6 ký tự, gồm chữ và số";
      valid = false;
    }
    if (password !== confirmPassword) {
      newErrors.confirmPassword = "Mật khẩu xác nhận không khớp";
      valid = false;
    }

    setErrors(newErrors);

    if (valid) {
      alert("Đăng ký thành công!");
      // TODO: gửi dữ liệu tới server tại đây
    }
  };

  return (
    <div className="min-h-screen flex bg-white relative">
      {/* Icon quay về trang homepage */}
      <button
        onClick={() => navigate("/")}
        className="absolute top-4 right-4 text-[#2A9D8F] hover:text-[#2A9D8F]"
        title="Quay lại trang chính"
      >
        <Home className="w-6 h-6" />
      </button>

      {/* Bên phải: Form đăng ký */}
      <div className="w-full md:w-1/2 flex items-center justify-center p-8">
        <div className="w-full max-w-sm bg-white p-8 rounded-xl shadow-lg border">
          <h2 className="text-2xl font-bold mb-2 text-center">Đăng ký</h2>
          <p className="text-sm text-gray-600 mb-6 text-center">
            Tạo tài khoản mới để bắt đầu
          </p>

          <form className="space-y-4" onSubmit={handleSubmit}>
            {/* Ô nhập tên người dùng */}
            <div className="relative">
              <input
                type="text"
                value={fullName}
                onChange={(e) => setFullName(e.target.value)}
                placeholder="Họ và tên"
                className="w-full px-4 py-2 border rounded pr-10 focus:outline-none focus:ring-2 focus:ring-blue-400"
              />
              <User className="absolute top-2.5 right-3 w-5 h-5 text-gray-400" />
              {errors.fullName && (
                <p className="text-red-500 text-sm mt-1">{errors.fullName}</p>
              )}
            </div>

            {/* Ô nhập ngày sinh */}
            <div className="relative">
              <input
                type="date"
                value={birthDate}
                onChange={(e) => setBirthDate(e.target.value)}
                placeholder="Ngày sinh"
                className="w-full px-4 py-2 border rounded pr-10 focus:outline-none focus:ring-2 focus:ring-blue-400"
              />
              <Calendar className="absolute top-2.5 right-3 w-5 h-5 text-gray-400" />
              {errors.birthDate && (
                <p className="text-red-500 text-sm mt-1">{errors.birthDate}</p>
              )}
            </div>

            {/* Ô nhập giới tính */}
            <div className="relative">
              <select
                value={gender}
                onChange={(e) => setGender(e.target.value)}
                className="w-full px-4 py-2 border rounded pr-10 focus:outline-none focus:ring-2 focus:ring-blue-400 appearance-none bg-white"
              >
                <option value="">Chọn giới tính</option>
                <option value="male">Nam</option>
                <option value="female">Nữ</option>
                <option value="other">Khác</option>
              </select>
              <ChevronDown className="absolute top-2.5 right-3 w-5 h-5 text-gray-400 pointer-events-none" />
              {errors.gender && (
                <p className="text-red-500 text-sm mt-1">{errors.gender}</p>
              )}
            </div>

            {/* Ô nhập username */}
            <div className="relative">
              <input
                type="text"
                value={username}
                onChange={(e) => setUsername(e.target.value)}
                placeholder="Tên người dùng"
                className="w-full px-4 py-2 border rounded pr-10 focus:outline-none focus:ring-2 focus:ring-blue-400"
              />
              <User className="absolute top-2.5 right-3 w-5 h-5 text-gray-400" />
              {errors.username && (
                <p className="text-red-500 text-sm mt-1">{errors.username}</p>
              )}
            </div>

            {/* Ô nhập email */}
            <div className="relative">
              <input
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                placeholder="Email"
                className="w-full px-4 py-2 border rounded pr-10 focus:outline-none focus:ring-2 focus:ring-blue-400"
              />
              <Mail className="absolute top-2.5 right-3 w-5 h-5 text-gray-400" />
              {errors.email && (
                <p className="text-red-500 text-sm mt-1">{errors.email}</p>
              )}
            </div>

            {/* Ô nhập mật khẩu */}
            <div className="relative">
              <input
                type={showPassword ? "text" : "password"}
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                placeholder="Mật khẩu"
                className="w-full px-4 py-2 border rounded pr-10 focus:outline-none focus:ring-2 focus:ring-blue-400"
              />
              <div
                onClick={() => setShowPassword(!showPassword)}
                className="absolute top-2.5 right-3 cursor-pointer text-gray-500"
              >
                {showPassword ? (
                  <EyeOff className="w-5 h-5" />
                ) : (
                  <Eye className="w-5 h-5" />
                )}
              </div>
              {errors.password && (
                <p className="text-red-500 text-sm mt-1">{errors.password}</p>
              )}
            </div>

            {/* Ô nhập xác nhận mật khẩu */}
            <div className="relative">
              <input
                type={showConfirmPassword ? "text" : "password"}
                value={confirmPassword}
                onChange={(e) => setConfirmPassword(e.target.value)}
                placeholder="Nhập lại mật khẩu"
                className="w-full px-4 py-2 border rounded pr-10 focus:outline-none focus:ring-2 focus:ring-blue-400"
              />
              <div
                onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                className="absolute top-2.5 right-3 cursor-pointer text-gray-500"
              >
                {showConfirmPassword ? (
                  <EyeOff className="w-5 h-5" />
                ) : (
                  <Eye className="w-5 h-5" />
                )}
              </div>
              {errors.confirmPassword && (
                <p className="text-red-500 text-sm mt-1">
                  {errors.confirmPassword}
                </p>
              )}
            </div>

            {/* Nút đăng ký */}
            <button
              type="submit"
              className="w-full bg-[#2A9D8F] text-white py-2 rounded hover:bg-[#228B7E] transition"
            >
              Đăng ký
            </button>
          </form>

          <p className="text-sm text-center mt-4">
            Đã có tài khoản?{" "}
            <a
              href="/login"
              className="text-[#2A9D8F] font-semibold hover:underline"
            >
              Đăng nhập ngay!
            </a>
          </p>
        </div>
      </div>

      {/* Bên trái: Logo + mô tả */}
      <div className="w-1/2 bg-[#E7F3F5] flex flex-col justify-center items-center">
        <div className="w-full max-w-4xl mx-auto p-4 md:p-6 lg:p-8 rounded-lg fixed-size">
          <img
            src="/public/image/ranbowlogo.png"
            alt="Logo"
            className="w-full h-auto object-contain max-w-full"
            style={{
              maxWidth: "100%",
              width: "auto",
              height: "auto",
              objectFit: "contain",
              userSelect: "none", // Không cho phép chọn
              transform: "scale(1)",
              transformOrigin: "center center",
            }}
          />
        </div>
      </div>
    </div>
  );
}

```

### pages\RegisterShop\index.tsx
```tsx
// File: src/pages/RegisterPage.tsx (thêm vào form đăng ký)
import { useState } from "react";
import {
  User,
  Home,
  Store,
  Mail,
  Lock,
  Phone,
  MapPin,
  Building,
  Briefcase,
  Clock,
  ChevronDown,
} from "lucide-react";
import { useNavigate } from "react-router-dom";

export default function RegisterPage() {
  const navigate = useNavigate();

  interface FormData {
    businessName: string;
    businessAddress: string;
    phoneNumber: string;
    email: string;
    password: string;
    confirmPassword: string;
    businessFields: string[]; // Thay vì never[]
    representativeName: string;
    workScheduleType: string;
    allWeekHours: {
      startTime: string;
      endTime: string;
    };
    customSchedule: {
      monday: { isWorking: boolean; startTime: string; endTime: string };
      tuesday: { isWorking: boolean; startTime: string; endTime: string };
      wednesday: { isWorking: boolean; startTime: string; endTime: string };
      thursday: { isWorking: boolean; startTime: string; endTime: string };
      friday: { isWorking: boolean; startTime: string; endTime: string };
      saturday: { isWorking: boolean; startTime: string; endTime: string };
      sunday: { isWorking: boolean; startTime: string; endTime: string };
    };
  }

  type DayKey =
    | "monday"
    | "tuesday"
    | "wednesday"
    | "thursday"
    | "friday"
    | "saturday"
    | "sunday";

  // Sử dụng interface trong useState
  const [formData, setFormData] = useState<FormData>({
    businessName: "",
    businessAddress: "",
    phoneNumber: "",
    email: "",
    password: "",
    confirmPassword: "",
    businessFields: [] as string[], // Khởi tạo đúng kiểu
    representativeName: "",
    workScheduleType: "",
    allWeekHours: {
      startTime: "08:00",
      endTime: "17:00",
    },
    customSchedule: {
      monday: { isWorking: true, startTime: "08:00", endTime: "17:00" },
      tuesday: { isWorking: true, startTime: "08:00", endTime: "17:00" },
      wednesday: { isWorking: true, startTime: "08:00", endTime: "17:00" },
      thursday: { isWorking: true, startTime: "08:00", endTime: "17:00" },
      friday: { isWorking: true, startTime: "08:00", endTime: "17:00" },
      saturday: { isWorking: true, startTime: "08:00", endTime: "14:00" },
      sunday: { isWorking: false, startTime: "08:00", endTime: "17:00" },
    },
  });

  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  // const [errors, setErrors] = useState({});

  // Danh sách lĩnh vực kinh doanh
  const businessFieldOptions = [
    "Massage",
    "Grooming",
    "Lưu trú",
    "Dịch vụ thú y",
    "Huấn luyện",
    "Chụp ảnh",
    "Tổ chức tiệc",
    "Chăm sóc đặc biệt",
  ];

  // Danh sách các ngày trong tuần
  const daysOfWeek = [
    { key: "monday", label: "Thứ 2" },
    { key: "tuesday", label: "Thứ 3" },
    { key: "wednesday", label: "Thứ 4" },
    { key: "thursday", label: "Thứ 5" },
    { key: "friday", label: "Thứ 6" },
    { key: "saturday", label: "Thứ 7" },
    { key: "sunday", label: "Chủ nhật" },
  ];

  // Xử lý thay đổi checkbox cho lĩnh vực kinh doanh
  const handleBusinessFieldChange = (field: string) => {
    setFormData((prev) => ({
      ...prev,
      businessFields: prev.businessFields.includes(field)
        ? prev.businessFields.filter((f) => f !== field)
        : [...prev.businessFields, field],
    }));
  };

  // Xử lý thay đổi input thông thường
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  // Xử lý thay đổi loại lịch làm việc
  const handleWorkScheduleTypeChange = (e) => {
    setFormData((prev) => ({
      ...prev,
      workScheduleType: e.target.value,
    }));
  };

  // Xử lý thay đổi giờ làm việc toàn tuần
  const handleAllWeekHoursChange = (field, value) => {
    setFormData((prev) => ({
      ...prev,
      allWeekHours: {
        ...prev.allWeekHours,
        [field]: value,
      },
    }));
  };

  // Cập nhật function với đúng kiểu
  const handleCustomScheduleChange = (
    day: DayKey,
    field: "isWorking" | "startTime" | "endTime",
    value: boolean | string
  ) => {
    setFormData((prev) => ({
      ...prev,
      customSchedule: {
        ...prev.customSchedule,
        [day]: {
          ...prev.customSchedule[day],
          [field]: value,
        },
      },
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    console.log("Form data:", formData);
  };

  return (
    <div className="min-h-screen flex bg-white relative">
      {/* Icon quay về trang homepage */}
      <button
        onClick={() => navigate("/")}
        className="absolute top-4 right-4 text-[#2A9D8F] hover:text-[#228B7E] transition-colors duration-200 z-10"
        title="Quay lại trang chính"
      >
        <Home className="w-6 h-6" />
      </button>

      {/* Bên phải: Form đăng ký */}
      <div className="w-full md:w-1/2 flex items-center justify-center p-8 overflow-y-auto">
        <div className="w-full max-w-md bg-white p-8 rounded-xl shadow-lg border my-8">
          <h2 className="text-2xl font-bold mb-2 text-center">
            Đăng ký cửa hàng
          </h2>
          <p className="text-sm text-gray-600 mb-6 text-center">
            Điền thông tin để đăng ký tài khoản doanh nghiệp
          </p>

          <form className="space-y-4" onSubmit={handleSubmit}>
            {/* Tên doanh nghiệp/cửa hàng */}
            <div className="relative">
              <input
                type="text"
                name="businessName"
                value={formData.businessName}
                onChange={handleInputChange}
                placeholder="Tên doanh nghiệp/Tên cửa hàng"
                className="w-full px-4 py-3 border rounded-lg pr-10 focus:outline-none focus:ring-2 focus:ring-[#2A9D8F] focus:border-transparent"
                required
              />
              <Store className="absolute top-3.5 right-3 w-5 h-5 text-gray-400" />
            </div>

            {/* Địa chỉ doanh nghiệp */}
            <div className="relative">
              <textarea
                name="businessAddress"
                value={formData.businessAddress}
                onChange={handleInputChange}
                placeholder="Địa chỉ đầy đủ (số nhà, tên đường, phường/xã, quận/huyện, tỉnh/thành phố)"
                className="w-full px-4 py-3 border rounded-lg pr-10 focus:outline-none focus:ring-2 focus:ring-[#2A9D8F] focus:border-transparent resize-none"
                rows="3"
                required
              />
              <MapPin className="absolute top-3.5 right-3 w-5 h-5 text-gray-400" />
            </div>

            {/* Số điện thoại */}
            <div className="relative">
              <input
                type="tel"
                name="phoneNumber"
                value={formData.phoneNumber}
                onChange={handleInputChange}
                placeholder="Số điện thoại liên hệ chính"
                className="w-full px-4 py-3 border rounded-lg pr-10 focus:outline-none focus:ring-2 focus:ring-[#2A9D8F] focus:border-transparent"
                required
              />
              <Phone className="absolute top-3.5 right-3 w-5 h-5 text-gray-400" />
            </div>

            {/* Email */}
            <div className="relative">
              <input
                type="email"
                name="email"
                value={formData.email}
                onChange={handleInputChange}
                placeholder="Email liên hệ chính"
                className="w-full px-4 py-3 border rounded-lg pr-10 focus:outline-none focus:ring-2 focus:ring-[#2A9D8F] focus:border-transparent"
                required
              />
              <Mail className="absolute top-3.5 right-3 w-5 h-5 text-gray-400" />
            </div>

            {/* Mật khẩu */}
            <div className="relative">
              <input
                type={showPassword ? "text" : "password"}
                name="password"
                value={formData.password}
                onChange={handleInputChange}
                placeholder="Mật khẩu (ít nhất 8 ký tự)"
                className="w-full px-4 py-3 border rounded-lg pr-10 focus:outline-none focus:ring-2 focus:ring-[#2A9D8F] focus:border-transparent"
                required
                minLength="8"
              />
              <div
                onClick={() => setShowPassword(!showPassword)}
                className="absolute top-3.5 right-3 cursor-pointer text-gray-500"
              >
                <Lock className="w-5 h-5" />
              </div>
            </div>

            {/* Xác nhận mật khẩu */}
            <div className="relative">
              <input
                type={showConfirmPassword ? "text" : "password"}
                name="confirmPassword"
                value={formData.confirmPassword}
                onChange={handleInputChange}
                placeholder="Nhập lại mật khẩu"
                className="w-full px-4 py-3 border rounded-lg pr-10 focus:outline-none focus:ring-2 focus:ring-[#2A9D8F] focus:border-transparent"
                required
              />
              <div
                onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                className="absolute top-3.5 right-3 cursor-pointer text-gray-500"
              >
                <Lock className="w-5 h-5" />
              </div>
            </div>

            {/* Lĩnh vực kinh doanh */}
            <div className="space-y-3">
              <label className="flex items-center text-sm font-medium text-gray-700">
                <Briefcase className="w-4 h-4 mr-2" />
                Lĩnh vực kinh doanh (chọn nhiều):
              </label>
              <div className="grid grid-cols-2 gap-2 max-h-32 overflow-y-auto border rounded-lg p-3">
                {businessFieldOptions.map((field) => (
                  <label
                    key={field}
                    className="flex items-center space-x-2 text-sm"
                  >
                    <input
                      type="checkbox"
                      checked={formData.businessFields.includes(field)}
                      onChange={() => handleBusinessFieldChange(field)}
                      className="rounded border-gray-300 text-[#2A9D8F] focus:ring-[#2A9D8F]"
                    />
                    <span>{field}</span>
                  </label>
                ))}
              </div>
            </div>

            {/* Ngày làm việc */}
            <div className="space-y-4">
              <label className="flex items-center text-sm font-medium text-gray-700">
                <Clock className="w-4 h-4 mr-2" />
                Ngày làm việc:
              </label>

              {/* Dropdown chọn loại lịch */}
              <div className="relative">
                <select
                  value={formData.workScheduleType}
                  onChange={handleWorkScheduleTypeChange}
                  className="w-full px-4 py-3 border rounded-lg pr-10 focus:outline-none focus:ring-2 focus:ring-[#2A9D8F] focus:border-transparent appearance-none bg-white"
                  required
                >
                  <option value="">Chọn loại lịch làm việc</option>
                  <option value="all-week">Toàn bộ các ngày trong tuần</option>
                  <option value="custom">Tùy chỉnh</option>
                </select>
                <ChevronDown className="absolute top-3.5 right-3 w-5 h-5 text-gray-400 pointer-events-none" />
              </div>

              {/* Hiển thị component tương ứng */}
              {formData.workScheduleType === "all-week" && (
                <div className="border rounded-lg p-4 bg-gray-50">
                  <h4 className="text-sm font-medium text-gray-700 mb-3">
                    Giờ làm việc (áp dụng cho tất cả các ngày)
                  </h4>
                  <div className="flex items-center space-x-3">
                    <div className="flex-1">
                      <label className="block text-xs text-gray-600 mb-1">
                        Giờ bắt đầu
                      </label>
                      <input
                        type="time"
                        value={formData.allWeekHours.startTime}
                        onChange={(e) =>
                          handleAllWeekHoursChange("startTime", e.target.value)
                        }
                        className="w-full px-3 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-[#2A9D8F]"
                      />
                    </div>
                    <span className="text-gray-500 mt-6">-</span>
                    <div className="flex-1">
                      <label className="block text-xs text-gray-600 mb-1">
                        Giờ kết thúc
                      </label>
                      <input
                        type="time"
                        value={formData.allWeekHours.endTime}
                        onChange={(e) =>
                          handleAllWeekHoursChange("endTime", e.target.value)
                        }
                        className="w-full px-3 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-[#2A9D8F]"
                      />
                    </div>
                  </div>
                  <p className="text-xs text-gray-500 mt-2">
                    Ví dụ: 8:00 - 17:00. Muốn tùy chỉnh chi tiết hơn, hãy chọn
                    "Tùy chỉnh" ở trên.
                  </p>
                </div>
              )}

              {formData.workScheduleType === "custom" && (
                <div className="border rounded-lg p-4 bg-gray-50 space-y-3">
                  <h4 className="text-sm font-medium text-gray-700 mb-3">
                    Tùy chỉnh lịch làm việc theo từng ngày
                  </h4>
                  {daysOfWeek.map((day) => (
                    <div
                      key={day.key}
                      className="flex items-center space-x-3 p-3 bg-white rounded border"
                    >
                      <div className="w-20">
                        <span className="text-sm font-medium text-gray-700">
                          {day.label}
                        </span>
                      </div>

                      <div className="flex items-center space-x-2">
                        <input
                          type="checkbox"
                          checked={formData.customSchedule[day.key].isWorking}
                          onChange={(e) =>
                            handleCustomScheduleChange(
                              day.key,
                              "isWorking",
                              e.target.checked
                            )
                          }
                          className="rounded border-gray-300 text-[#2A9D8F] focus:ring-[#2A9D8F]"
                        />
                        <span className="text-xs text-gray-600">Làm việc</span>
                      </div>

                      {formData.customSchedule[day.key].isWorking && (
                        <>
                          <div className="flex-1">
                            <input
                              type="time"
                              value={formData.customSchedule[day.key].startTime}
                              onChange={(e) =>
                                handleCustomScheduleChange(
                                  day.key,
                                  "startTime",
                                  e.target.value
                                )
                              }
                              className="w-full px-2 py-1 border rounded text-sm focus:outline-none focus:ring-1 focus:ring-[#2A9D8F]"
                            />
                          </div>
                          <span className="text-gray-500 text-sm">-</span>
                          <div className="flex-1">
                            <input
                              type="time"
                              value={formData.customSchedule[day.key].endTime}
                              onChange={(e) =>
                                handleCustomScheduleChange(
                                  day.key,
                                  "endTime",
                                  e.target.value
                                )
                              }
                              className="w-full px-2 py-1 border rounded text-sm focus:outline-none focus:ring-1 focus:ring-[#2A9D8F]"
                            />
                          </div>
                        </>
                      )}
                    </div>
                  ))}
                </div>
              )}
            </div>

            {/* Tên người đại diện */}
            <div className="relative">
              <input
                type="text"
                name="representativeName"
                value={formData.representativeName}
                onChange={handleInputChange}
                placeholder="Tên người đại diện/Chủ doanh nghiệp"
                className="w-full px-4 py-3 border rounded-lg pr-10 focus:outline-none focus:ring-2 focus:ring-[#2A9D8F] focus:border-transparent"
                required
              />
              <User className="absolute top-3.5 right-3 w-5 h-5 text-gray-400" />
            </div>

            {/* Nút đăng ký */}
            <button
              type="submit"
              className="w-full bg-[#2A9D8F] text-white py-3 rounded-lg hover:bg-[#228B7E] transition-all duration-200 font-medium shadow-md hover:shadow-lg"
            >
              Đăng ký tài khoản
            </button>
          </form>

          <p className="text-sm text-center mt-6">
            <a
              href="/login"
              className="text-[#2A9D8F] font-semibold hover:underline transition-all duration-200"
            >
              Đã có tài khoản? Đăng nhập ngay
            </a>
          </p>
        </div>
      </div>

      {/* Bên trái: Logo + mô tả */}
      <div className="w-1/2 bg-[#E7F3F5] flex flex-col justify-center items-center">
        <div className="w-full max-w-4xl mx-auto p-4 md:p-6 lg:p-8 rounded-lg">
          <img
            src="/public/image/ranbowlogo.png"
            alt="Logo"
            className="w-full h-auto object-contain max-w-full"
            style={{
              maxWidth: "100%",
              width: "auto",
              height: "auto",
              objectFit: "contain",
              userSelect: "none",
              transform: "scale(1)",
              transformOrigin: "center center",
            }}
          />
        </div>
      </div>
    </div>
  );
}

```

### pages\RegisterType\index.tsx
```tsx
// File: src/pages/RegisterPage.tsx
import { User, Home, Store } from "lucide-react";
import { useNavigate } from "react-router-dom";

export default function RegisterType() {
  const navigate = useNavigate();

  return (
    <div className="min-h-screen flex bg-white relative">
      {/* Icon quay về trang homepage */}
      <button
        onClick={() => navigate("/")}
        className="absolute top-4 right-4 text-[#2A9D8F] hover:text-[#228B7E] transition-colors duration-200"
        title="Quay lại trang chính"
      >
        <Home className="w-6 h-6" />
      </button>

      {/* Bên phải: Form đăng ký */}
      <div className="w-full md:w-1/2 flex items-center justify-center p-8">
        <div className="w-full max-w-sm bg-white p-8 rounded-xl shadow-lg border">
          <h2 className="text-2xl font-bold mb-2 text-center">Đăng ký</h2>
          <p className="text-sm text-gray-600 mb-6 text-center">
            Chọn loại tài khoản mới để bắt đầu
          </p>

          <form className="space-y-4">
            {/* Nút Khách Hàng */}
            <button
              onClick={() => navigate("/register")}
              type="button"
              className="w-full bg-[#2A9D8F] text-white py-3 px-4 rounded-lg hover:bg-[#228B7E] transition-all duration-200 flex items-center justify-center space-x-3 font-medium shadow-md hover:shadow-lg"
            >
              <User className="w-5 h-5" />
              <span>Khách Hàng</span>
            </button>

            {/* Nút Cửa Hàng */}
            <button
              onClick={() => navigate("/registershop")}
              type="button"
              className="w-full bg-[#2A9D8F] text-white py-3 px-4 rounded-lg hover:bg-[#228B7E] transition-all duration-200 flex items-center justify-center space-x-3 font-medium shadow-md hover:shadow-lg"
            >
              <Store className="w-5 h-5" />
              <span>Cửa Hàng</span>
            </button>
          </form>

          <p className="text-sm text-center mt-6">
            <a
              href="/login"
              className="text-[#2A9D8F] font-semibold hover:underline transition-all duration-200"
            >
              Quay lại đăng nhập
            </a>
          </p>
        </div>
      </div>

      {/* Bên trái: Logo + mô tả */}
      <div className="w-1/2 bg-[#E7F3F5] flex flex-col justify-center items-center">
        <div className="w-full max-w-4xl mx-auto p-4 md:p-6 lg:p-8 rounded-lg">
          <img
            src="/public/image/ranbowlogo.png"
            alt="Logo"
            className="w-full h-auto object-contain max-w-full"
            style={{
              maxWidth: "100%",
              width: "auto",
              height: "auto",
              objectFit: "contain",
              userSelect: "none",
              transform: "scale(1)",
              transformOrigin: "center center",
            }}
          />
        </div>
      </div>
    </div>
  );
}

```

### pages\ServiceDetail\ServiceDetail.tsx
```tsx
import React, { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import AppLayoutForUser from "../../layout/AppLayoutForUser";
import ServiceImages from "./components/ServiceImages";
import ServiceInfo from "./components/ServiceInfo";
import ServiceActions from "./components/ServiceActions";
import type { Service } from "@/types/services";

const mockService: Service = {
  id: "1",
  name: "Cắt tỉa lông",
  images: [
    "/image/pet-grooming-1.jpg",
    "/image/pet-grooming-2.jpg",
    "/image/pet-grooming-3.jpg",
  ],
  rating: 5,
  reviewCount: 20,
  bookingCount: 100,
  category: "Grooming",
  originalPrice: 230000,
  currentPrice: 200000,
  discount: 15,
  petTypes: ["Thỏ", "Mèo", "Chó"],
  duration: 60,
  description: "Dịch vụ cắt tỉa lông chuyên nghiệp cho thú cưng...",
};

const ServiceDetail: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const [service, setService] = useState<Service | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchService = async () => {
      try {
        setLoading(true);
        setError(null);

        // Simulate API call với mock data
        await new Promise((resolve) => setTimeout(resolve, 1000)); // 1 giây để test

        // Giả lập tìm service theo id
        if (id === "1" || id) {
          // Accept any id for demo
          setService(mockService);
        } else {
          setError("Service không tồn tại");
        }
      } catch (err) {
        console.error("Error fetching service:", err);
        setError("Có lỗi xảy ra khi tải dữ liệu");
      } finally {
        setLoading(false); // ✅ Luôn reset loading
      }
    };

    if (id) {
      fetchService();
    } else {
      setLoading(false);
      setError("Không có ID service");
    }
  }, [id]); // ✅ Dependency array đúng

  const handleAddToCart = () => {
    console.log("Added to cart:", service?.id);
  };

  const handleBookNow = () => {
    if (service?.id) {
      navigate(`/booking/${service.id}`);
    }
  };

  // Loading state
  if (loading) {
    return (
      <AppLayoutForUser>
        <div className="flex items-center justify-center min-h-[400px]">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-teal-600 mx-auto mb-4"></div>
            <p className="text-gray-600">Đang tải thông tin dịch vụ...</p>
          </div>
        </div>
      </AppLayoutForUser>
    );
  }

  // Error state
  if (error || !service) {
    return (
      <AppLayoutForUser>
        <div className="flex items-center justify-center min-h-[400px]">
          <div className="text-center">
            <h2 className="text-2xl font-bold text-gray-900 mb-2">
              {error || "Không tìm thấy dịch vụ"}
            </h2>
            <p className="text-gray-600 mb-4">
              Dịch vụ bạn tìm kiếm không tồn tại hoặc đã bị xóa.
            </p>
            <button
              onClick={() => navigate("/services")}
              className="px-4 py-2 bg-teal-600 text-white rounded-lg hover:bg-teal-700"
            >
              Quay lại danh sách dịch vụ
            </button>
          </div>
        </div>
      </AppLayoutForUser>
    );
  }

  // Success state
  return (
    <AppLayoutForUser>
      <div className="min-h-screen bg-gray-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <div>
              <ServiceImages
                images={service.images}
                serviceName={service.name}
              />
            </div>
            <div className="space-y-6">
              <ServiceInfo service={service} />
              <ServiceActions
                onAddToCart={handleAddToCart}
                onBookNow={handleBookNow}
              />
            </div>
          </div>
        </div>
      </div>
    </AppLayoutForUser>
  );
};

export default ServiceDetail;

```

### pages\ServiceDetail\components\ServiceActions.tsx
```tsx
import React from "react";
import Button from "../../../components/ui/Button";

interface ServiceActionsProps {
  onAddToCart: () => void;
  onBookNow: () => void;
}

const ServiceActions: React.FC<ServiceActionsProps> = ({
  onAddToCart,
  onBookNow,
}) => {
  return (
    <div className="flex gap-3">
      <Button
        variant="outline"
        onClick={onAddToCart}
        className="flex-1 flex items-center justify-center gap-2 border-2 border-teal-600 text-teal-600 hover:bg-teal-50"
      >
        <svg
          className="h-5 w-5"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-2.5 5M7 13l2.5 5m6.5-5v6a2 2 0 01-2 2H9a2 2 0 01-2-2v-6m8 0V9a2 2 0 00-2-2H9a2 2 0 00-2 2v4.01"
          />
        </svg>
        Thêm vào giỏ
      </Button>

      <Button
        variant="primary"
        onClick={onBookNow}
        className="flex-1 bg-teal-600 hover:bg-teal-700"
      >
        Đặt ngay
      </Button>
    </div>
  );
};

export default ServiceActions;

```

### pages\ServiceDetail\components\ServiceImages.tsx
```tsx
import React, { useState } from "react";

interface ServiceImagesProps {
  images: string[];
  serviceName: string;
}

const ServiceImages: React.FC<ServiceImagesProps> = ({
  images,
  serviceName,
}) => {
  const [selectedImage, setSelectedImage] = useState(0);

  return (
    <div className="space-y-4">
      {/* Ảnh chính */}
      <div className="aspect-square w-full overflow-hidden rounded-lg bg-gray-100">
        <img
          src={images[selectedImage]}
          alt={serviceName}
          className="h-full w-full object-cover"
        />
      </div>

      {/* Ảnh thu nhỏ */}
      <div className="flex space-x-2">
        {images.map((image, index) => (
          <button
            key={index}
            onClick={() => setSelectedImage(index)}
            className={`aspect-square w-20 overflow-hidden rounded-md border-2 ${
              selectedImage === index ? "border-orange-500" : "border-gray-200"
            }`}
          >
            <img
              src={image}
              alt={`${serviceName} ${index + 1}`}
              className="h-full w-full object-cover"
            />
          </button>
        ))}
      </div>
    </div>
  );
};

export default ServiceImages;

```

### pages\ServiceDetail\components\ServiceInfo.tsx
```tsx
import React from "react";
import Badge from "../../../components/ui/Badge";
import type { Service } from "../../../types/service";

interface ServiceInfoProps {
  service: Service;
}

const ServiceInfo: React.FC<ServiceInfoProps> = ({ service }) => {
  return (
    <div className="space-y-4">
      {/* Tên và category */}
      <div className="flex items-center gap-3">
        <h1 className="text-2xl font-bold text-gray-900">{service.name}</h1>
        <Badge variant="secondary">{service.category}</Badge>
      </div>

      {/* Rating và thống kê */}
      <div className="flex items-center gap-4 text-sm text-gray-600">
        <div className="flex items-center gap-1">
          <div className="flex text-yellow-400">
            {[...Array(5)].map((_, i) => (
              <svg
                key={i}
                className={`h-4 w-4 ${
                  i < service.rating ? "fill-current" : "fill-gray-200"
                }`}
                viewBox="0 0 20 20"
              >
                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
              </svg>
            ))}
          </div>
          <span>{service.rating}</span>
        </div>
        <span>{service.reviewCount} đánh giá</span>
        <span>Lượt đặt {service.bookingCount}</span>
      </div>

      {/* Giá */}
      <div className="space-y-2">
        <p className="text-sm font-medium text-gray-600">Giá sốc</p>
        <div className="flex items-center gap-3">
          <span className="text-3xl font-bold text-gray-900">
            {service.currentPrice.toLocaleString("vi-VN")}đ
          </span>
          {service.discount && (
            <>
              <span className="text-lg text-gray-500 line-through">
                {service.originalPrice.toLocaleString("vi-VN")}đ
              </span>
              <Badge variant="destructive">-{service.discount}%</Badge>
            </>
          )}
        </div>
      </div>

      {/* Thông tin dịch vụ */}
      <div className="space-y-3">
        <div className="flex items-center gap-2">
          <span className="text-sm font-medium text-gray-700">Loại thú:</span>
          <div className="flex gap-2">
            {service.petTypes.map((type) => (
              <Badge key={type} variant="outline">
                {type}
              </Badge>
            ))}
          </div>
        </div>

        <div className="flex items-center gap-2">
          <span className="text-sm font-medium text-gray-700">
            Thời gian thực hiện:
          </span>
          <div className="flex items-center gap-1 rounded-full bg-gray-100 px-3 py-1">
            <svg
              className="h-4 w-4 text-gray-500"
              fill="currentColor"
              viewBox="0 0 20 20"
            >
              <path
                fillRule="evenodd"
                d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z"
                clipRule="evenodd"
              />
            </svg>
            <span className="text-sm text-gray-700">
              {service.duration} phút
            </span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ServiceInfo;

```

### pages\Services\Service.tsx
```tsx
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import FilterBar from "@/components/common/FilterBar";

// Mock data service
const mockServices = Array.from({ length: 12 }).map((_, idx) => ({
  id: idx + 1,
  name: "Cắt tỉa lông",
  price: 200000,
  sold: 143,
  location: "Hồ Chí Minh",
}));

const ServicesPage: React.FC = () => {
  const [services, setServices] = useState(mockServices);
  const navigate = useNavigate();

  // Xử lý filter (hiện tại chỉ filter giả lập)
  const handleFilter = (filters: Record<string, string>) => {
    // TODO: Sau này fetch API với filters, hiện tại chỉ mock
    setServices(mockServices); // Giữ nguyên
  };

  // Khi click vào service
  const handleServiceClick = (id: number) => {
    navigate(`/service-detail/${id}`);
  };

  return (
    <div className="container mx-auto px-4 py-6">
      <FilterBar onFilter={handleFilter} />
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mt-4">
        {services.map((service) => (
          <div
            key={service.id}
            onClick={() => handleServiceClick(service.id)}
            className="cursor-pointer bg-white rounded-lg shadow p-4 flex flex-col items-center hover:shadow-lg transition"
          >
            <div className="w-full h-28 bg-gray-100 rounded mb-3"></div>
            <div className="text-center">
              <div className="font-medium text-gray-800">{service.name}</div>
              <div className="text-orange-600 font-semibold mt-1">
                {service.price.toLocaleString()} đ
              </div>
              <div className="text-xs text-gray-400 mt-1">
                Đã bán: {service.sold} &nbsp;|&nbsp; {service.location}
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default ServicesPage;

```

### pages\Settings\index.tsx
```tsx

```

### pages\SignUp\SignUp.tsx
```tsx
import { useState } from "react";
import { Link } from "react-router-dom";
import { ChevronLeftIcon, EyeCloseIcon, EyeIcon } from "@/components/icons";
import Label from "@/components/form/Label";
import Input from "@/components/form/input/InputField";
import Checkbox from "@/components/form/input/Checkbox";
import Button from "@/components/ui/Button";

export default function SignUpForm() {
  const [showPassword, setShowPassword] = useState(false);
  const [isChecked, setIsChecked] = useState(false);
  return (
    <div className="flex flex-col flex-1">
      <div className="w-full max-w-md pt-10 mx-auto">
        <Link
          to="/"
          className="inline-flex items-center text-sm text-gray-500 transition-colors hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
        >
          <ChevronLeftIcon className="size-5" />
          Back to dashboard
        </Link>
      </div>
      <div className="flex flex-col justify-center flex-1 w-full max-w-md mx-auto">
        <div>
          <div className="mb-5 sm:mb-8">
            <h1 className="mb-2 font-semibold text-gray-800 text-title-sm dark:text-white/90 sm:text-title-md">
              Sign In
            </h1>
            <p className="text-sm text-gray-500 dark:text-gray-400">
              Enter your email and password to sign in!
            </p>
          </div>
          <div>
            <div className="grid grid-cols-1 gap-3 sm:grid-cols-2 sm:gap-5">
              <button className="inline-flex items-center justify-center gap-3 py-3 text-sm font-normal text-gray-700 transition-colors bg-gray-100 rounded-lg px-7 hover:bg-gray-200 hover:text-gray-800 dark:bg-white/5 dark:text-white/90 dark:hover:bg-white/10">
                <svg
                  width="20"
                  height="20"
                  viewBox="0 0 20 20"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M18.7511 10.1944C18.7511 9.47495 18.6915 8.94995 18.5626 8.40552H10.1797V11.6527H15.1003C15.0011 12.4597 14.4654 13.675 13.2749 14.4916L13.2582 14.6003L15.9087 16.6126L16.0924 16.6305C17.7788 15.1041 18.7511 12.8583 18.7511 10.1944Z"
                    fill="#4285F4"
                  />
                  <path
                    d="M10.1788 18.75C12.5895 18.75 14.6133 17.9722 16.0915 16.6305L13.274 14.4916C12.5201 15.0068 11.5081 15.3666 10.1788 15.3666C7.81773 15.3666 5.81379 13.8402 5.09944 11.7305L4.99473 11.7392L2.23868 13.8295L2.20264 13.9277C3.67087 16.786 6.68674 18.75 10.1788 18.75Z"
                    fill="#34A853"
                  />
                  <path
                    d="M5.10014 11.7305C4.91165 11.186 4.80257 10.6027 4.80257 9.99992C4.80257 9.3971 4.91165 8.81379 5.09022 8.26935L5.08523 8.1534L2.29464 6.02954L2.20333 6.0721C1.5982 7.25823 1.25098 8.5902 1.25098 9.99992C1.25098 11.4096 1.5982 12.7415 2.20333 13.9277L5.10014 11.7305Z"
                    fill="#FBBC05"
                  />
                  <path
                    d="M10.1789 4.63331C11.8554 4.63331 12.9864 5.34303 13.6312 5.93612L16.1511 3.525C14.6035 2.11528 12.5895 1.25 10.1789 1.25C6.68676 1.25 3.67088 3.21387 2.20264 6.07218L5.08953 8.26943C5.81381 6.15972 7.81776 4.63331 10.1789 4.63331Z"
                    fill="#EB4335"
                  />
                </svg>
                Sign in with Google
              </button>
              <button className="inline-flex items-center justify-center gap-3 py-3 text-sm font-normal text-gray-700 transition-colors bg-gray-100 rounded-lg px-7 hover:bg-gray-200 hover:text-gray-800 dark:bg-white/5 dark:text-white/90 dark:hover:bg-white/10">
                <svg
                  width="21"
                  className="fill-current"
                  height="20"
                  viewBox="0 0 21 20"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path d="M15.6705 1.875H18.4272L12.4047 8.75833L19.4897 18.125H13.9422L9.59717 12.4442L4.62554 18.125H1.86721L8.30887 10.7625L1.51221 1.875H7.20054L11.128 7.0675L15.6705 1.875ZM14.703 16.475H16.2305L6.37054 3.43833H4.73137L14.703 16.475Z" />
                </svg>
                Sign in with X
              </button>
            </div>
            <div className="relative py-3 sm:py-5">
              <div className="absolute inset-0 flex items-center">
                <div className="w-full border-t border-gray-200 dark:border-gray-800"></div>
              </div>
              <div className="relative flex justify-center text-sm">
                <span className="p-2 text-gray-400 bg-white dark:bg-gray-900 sm:px-5 sm:py-2">
                  Or
                </span>
              </div>
            </div>
            <form>
              <div className="space-y-6">
                <div>
                  <Label>
                    Email <span className="text-error-500">*</span>{" "}
                  </Label>
                  <Input placeholder="info@gmail.com" />
                </div>
                <div>
                  <Label>
                    Password <span className="text-error-500">*</span>{" "}
                  </Label>
                  <div className="relative">
                    <Input
                      type={showPassword ? "text" : "password"}
                      placeholder="Enter your password"
                    />
                    <span
                      onClick={() => setShowPassword(!showPassword)}
                      className="absolute z-30 -translate-y-1/2 cursor-pointer right-4 top-1/2"
                    >
                      {showPassword ? (
                        <EyeIcon className="fill-gray-500 dark:fill-gray-400 size-5" />
                      ) : (
                        <EyeCloseIcon className="fill-gray-500 dark:fill-gray-400 size-5" />
                      )}
                    </span>
                  </div>
                </div>
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <Checkbox checked={isChecked} onChange={setIsChecked} />
                    <span className="block font-normal text-gray-700 text-theme-sm dark:text-gray-400">
                      Keep me logged in
                    </span>
                  </div>
                  <Link
                    to="/reset-password"
                    className="text-sm text-brand-500 hover:text-brand-600 dark:text-brand-400"
                  >
                    Forgot password?
                  </Link>
                </div>
                <div>
                  <Button className="w-full" size="sm">
                    Sign in
                  </Button>
                </div>
              </div>
            </form>

            <div className="mt-5">
              <p className="text-sm font-normal text-center text-gray-700 dark:text-gray-400 sm:text-start">
                Don&apos;t have an account? {""}
                <Link
                  to="/signup"
                  className="text-brand-500 hover:text-brand-600 dark:text-brand-400"
                >
                  Sign Up
                </Link>
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

```

### pages\Tables\BasicTables.tsx
```tsx
import PageBreadcrumb from "../../components/common/PageBreadCrumb";
import ComponentCard from "../../components/common/ComponentCard";
import BasicTableOne from "../../pages/Tables/BasicTables";

export default function BasicTables() {
  return (
    <>
      <PageBreadcrumb pageTitle="Basic Tables" />
      <div className="space-y-6">
        <ComponentCard title="Basic Table 1">
          <BasicTableOne />
        </ComponentCard>
      </div>
    </>
  );
}

```

### pages\UiElements\Alerts.tsx
```tsx
import PageBreadcrumb from "../../components/common/PageBreadCrumb";
import ComponentCard from "../../components/common/ComponentCard";
import Alert from "../../components/ui/Alert";

export default function Alerts() {
  return (
    <>
      <PageBreadcrumb pageTitle="Alerts" />
      <div className="space-y-5 sm:space-y-6">
        <ComponentCard title="Success Alert">
          <Alert
            variant="success"
            title="Success Message"
            message="Be cautious when performing this action."
            showLink={true}
            linkHref="/"
            linkText="Learn more"
          />
          <Alert
            variant="success"
            title="Success Message"
            message="Be cautious when performing this action."
            showLink={false}
          />
        </ComponentCard>
        <ComponentCard title="Warning Alert">
          <Alert
            variant="warning"
            title="Warning Message"
            message="Be cautious when performing this action."
            showLink={true}
            linkHref="/"
            linkText="Learn more"
          />
          <Alert
            variant="warning"
            title="Warning Message"
            message="Be cautious when performing this action."
            showLink={false}
          />
        </ComponentCard>{" "}
        <ComponentCard title="Error Alert">
          <Alert
            variant="error"
            title="Error Message"
            message="Be cautious when performing this action."
            showLink={true}
            linkHref="/"
            linkText="Learn more"
          />
          <Alert
            variant="error"
            title="Error Message"
            message="Be cautious when performing this action."
            showLink={false}
          />
        </ComponentCard>{" "}
        <ComponentCard title="Info Alert">
          <Alert
            variant="info"
            title="Info Message"
            message="Be cautious when performing this action."
            showLink={true}
            linkHref="/"
            linkText="Learn more"
          />
          <Alert
            variant="info"
            title="Info Message"
            message="Be cautious when performing this action."
            showLink={false}
          />
        </ComponentCard>
      </div>
    </>
  );
}

```

### pages\UiElements\Avatars.tsx
```tsx
import PageBreadcrumb from "../../components/common/PageBreadCrumb";
import ComponentCard from "../../components/common/ComponentCard";
import Avatar from "../../components/ui/Avatar";

export default function Avatars() {
  return (
    <>
      <PageBreadcrumb pageTitle="Avatars" />
      <div className="space-y-5 sm:space-y-6">
        <ComponentCard title="Default Avatar">
          {/* Default Avatar (No Status) */}
          <div className="flex flex-col items-center justify-center gap-5 sm:flex-row">
            <Avatar src="/images/user/user-01.jpg" size="xsmall" />
            <Avatar src="/images/user/user-01.jpg" size="small" />
            <Avatar src="/images/user/user-01.jpg" size="medium" />
            <Avatar src="/images/user/user-01.jpg" size="large" />
            <Avatar src="/images/user/user-01.jpg" size="xlarge" />
            <Avatar src="/images/user/user-01.jpg" size="xxlarge" />
          </div>
        </ComponentCard>
        <ComponentCard title="Avatar with online indicator">
          <div className="flex flex-col items-center justify-center gap-5 sm:flex-row">
            <Avatar
              src="/images/user/user-01.jpg"
              size="xsmall"
              status="online"
            />
            <Avatar
              src="/images/user/user-01.jpg"
              size="small"
              status="online"
            />
            <Avatar
              src="/images/user/user-01.jpg"
              size="medium"
              status="online"
            />
            <Avatar
              src="/images/user/user-01.jpg"
              size="large"
              status="online"
            />
            <Avatar
              src="/images/user/user-01.jpg"
              size="xlarge"
              status="online"
            />
            <Avatar
              src="/images/user/user-01.jpg"
              size="xxlarge"
              status="online"
            />
          </div>
        </ComponentCard>
        <ComponentCard title="Avatar with Offline indicator">
          <div className="flex flex-col items-center justify-center gap-5 sm:flex-row">
            <Avatar
              src="/images/user/user-01.jpg"
              size="xsmall"
              status="offline"
            />
            <Avatar
              src="/images/user/user-01.jpg"
              size="small"
              status="offline"
            />
            <Avatar
              src="/images/user/user-01.jpg"
              size="medium"
              status="offline"
            />
            <Avatar
              src="/images/user/user-01.jpg"
              size="large"
              status="offline"
            />
            <Avatar
              src="/images/user/user-01.jpg"
              size="xlarge"
              status="offline"
            />
            <Avatar
              src="/images/user/user-01.jpg"
              size="xxlarge"
              status="offline"
            />
          </div>
        </ComponentCard>{" "}
        <ComponentCard title="Avatar with busy indicator">
          <div className="flex flex-col items-center justify-center gap-5 sm:flex-row">
            <Avatar
              src="/images/user/user-01.jpg"
              size="xsmall"
              status="busy"
            />
            <Avatar src="/images/user/user-01.jpg" size="small" status="busy" />
            <Avatar
              src="/images/user/user-01.jpg"
              size="medium"
              status="busy"
            />
            <Avatar src="/images/user/user-01.jpg" size="large" status="busy" />
            <Avatar
              src="/images/user/user-01.jpg"
              size="xlarge"
              status="busy"
            />
            <Avatar
              src="/images/user/user-01.jpg"
              size="xxlarge"
              status="busy"
            />
          </div>
        </ComponentCard>
      </div>
    </>
  );
}

```

### pages\UiElements\Badges.tsx
```tsx
import PageBreadcrumb from "../../components/common/PageBreadCrumb";
import Badge from "../../components/ui/Badge";
import { PlusIcon } from "../../components/icons";
import ComponentCard from "../../components/common/ComponentCard";

export default function Badges() {
  return (
    <div>
      <PageBreadcrumb pageTitle="Badges" />
      <div className="space-y-5 sm:space-y-6">
        <ComponentCard title="With Light Background">
          <div className="flex flex-wrap gap-4 sm:items-center sm:justify-center">
            {/* Light Variant */}
            <Badge variant="light" color="primary">
              Primary
            </Badge>
            <Badge variant="light" color="success">
              Success
            </Badge>{" "}
            <Badge variant="light" color="error">
              Error
            </Badge>{" "}
            <Badge variant="light" color="warning">
              Warning
            </Badge>{" "}
            <Badge variant="light" color="info">
              Info
            </Badge>
            <Badge variant="light" color="light">
              Light
            </Badge>
            <Badge variant="light" color="dark">
              Dark
            </Badge>
          </div>
        </ComponentCard>
        <ComponentCard title="With Solid Background">
          <div className="flex flex-wrap gap-4 sm:items-center sm:justify-center">
            {/* Light Variant */}
            <Badge variant="solid" color="primary">
              Primary
            </Badge>
            <Badge variant="solid" color="success">
              Success
            </Badge>{" "}
            <Badge variant="solid" color="error">
              Error
            </Badge>{" "}
            <Badge variant="solid" color="warning">
              Warning
            </Badge>{" "}
            <Badge variant="solid" color="info">
              Info
            </Badge>
            <Badge variant="solid" color="light">
              Light
            </Badge>
            <Badge variant="solid" color="dark">
              Dark
            </Badge>
          </div>
        </ComponentCard>
        <ComponentCard title="Light Background with Left Icon">
          <div className="flex flex-wrap gap-4 sm:items-center sm:justify-center">
            <Badge variant="light" color="primary" startIcon={<PlusIcon />}>
              Primary
            </Badge>
            <Badge variant="light" color="success" startIcon={<PlusIcon />}>
              Success
            </Badge>{" "}
            <Badge variant="light" color="error" startIcon={<PlusIcon />}>
              Error
            </Badge>{" "}
            <Badge variant="light" color="warning" startIcon={<PlusIcon />}>
              Warning
            </Badge>{" "}
            <Badge variant="light" color="info" startIcon={<PlusIcon />}>
              Info
            </Badge>
            <Badge variant="light" color="light" startIcon={<PlusIcon />}>
              Light
            </Badge>
            <Badge variant="light" color="dark" startIcon={<PlusIcon />}>
              Dark
            </Badge>
          </div>
        </ComponentCard>
        <ComponentCard title="Solid Background with Left Icon">
          <div className="flex flex-wrap gap-4 sm:items-center sm:justify-center">
            <Badge variant="solid" color="primary" startIcon={<PlusIcon />}>
              Primary
            </Badge>
            <Badge variant="solid" color="success" startIcon={<PlusIcon />}>
              Success
            </Badge>{" "}
            <Badge variant="solid" color="error" startIcon={<PlusIcon />}>
              Error
            </Badge>{" "}
            <Badge variant="solid" color="warning" startIcon={<PlusIcon />}>
              Warning
            </Badge>{" "}
            <Badge variant="solid" color="info" startIcon={<PlusIcon />}>
              Info
            </Badge>
            <Badge variant="solid" color="light" startIcon={<PlusIcon />}>
              Light
            </Badge>
            <Badge variant="solid" color="dark" startIcon={<PlusIcon />}>
              Dark
            </Badge>
          </div>
        </ComponentCard>
        <ComponentCard title="Light Background with Right Icon">
          <div className="flex flex-wrap gap-4 sm:items-center sm:justify-center">
            <Badge variant="light" color="primary" endIcon={<PlusIcon />}>
              Primary
            </Badge>
            <Badge variant="light" color="success" endIcon={<PlusIcon />}>
              Success
            </Badge>{" "}
            <Badge variant="light" color="error" endIcon={<PlusIcon />}>
              Error
            </Badge>{" "}
            <Badge variant="light" color="warning" endIcon={<PlusIcon />}>
              Warning
            </Badge>{" "}
            <Badge variant="light" color="info" endIcon={<PlusIcon />}>
              Info
            </Badge>
            <Badge variant="light" color="light" endIcon={<PlusIcon />}>
              Light
            </Badge>
            <Badge variant="light" color="dark" endIcon={<PlusIcon />}>
              Dark
            </Badge>
          </div>
        </ComponentCard>
        <ComponentCard title="Solid Background with Right Icon">
          <div className="flex flex-wrap gap-4 sm:items-center sm:justify-center">
            <Badge variant="solid" color="primary" endIcon={<PlusIcon />}>
              Primary
            </Badge>
            <Badge variant="solid" color="success" endIcon={<PlusIcon />}>
              Success
            </Badge>{" "}
            <Badge variant="solid" color="error" endIcon={<PlusIcon />}>
              Error
            </Badge>{" "}
            <Badge variant="solid" color="warning" endIcon={<PlusIcon />}>
              Warning
            </Badge>{" "}
            <Badge variant="solid" color="info" endIcon={<PlusIcon />}>
              Info
            </Badge>
            <Badge variant="solid" color="light" endIcon={<PlusIcon />}>
              Light
            </Badge>
            <Badge variant="solid" color="dark" endIcon={<PlusIcon />}>
              Dark
            </Badge>
          </div>
        </ComponentCard>
      </div>
    </div>
  );
}

```

### pages\UiElements\Buttons.tsx
```tsx
import ComponentCard from "../../components/common/ComponentCard";
import PageBreadcrumb from "../../components/common/PageBreadCrumb";
import Button from "../../components/ui/Button";
import { BoxIcon } from "../../components/icons";

export default function Buttons() {
  return (
    <div>
      <PageBreadcrumb pageTitle="Buttons" />
      <div className="space-y-5 sm:space-y-6">
        {/* Primary Button */}
        <ComponentCard title="Primary Button">
          <div className="flex items-center gap-5">
            <Button size="sm" variant="primary">
              Button Text
            </Button>
            <Button size="md" variant="primary">
              Button Text
            </Button>
          </div>
        </ComponentCard>
        {/* Primary Button with Start Icon */}
        <ComponentCard title="Primary Button with Left Icon">
          <div className="flex items-center gap-5">
            <Button
              size="sm"
              variant="primary"
              startIcon={<BoxIcon className="size-5" />}
            >
              Button Text
            </Button>
            <Button
              size="md"
              variant="primary"
              startIcon={<BoxIcon className="size-5" />}
            >
              Button Text
            </Button>
          </div>
        </ComponentCard>
        {/* Primary Button with Start Icon */}
        <ComponentCard title="Primary Button with Right Icon">
          <div className="flex items-center gap-5">
            <Button
              size="sm"
              variant="primary"
              endIcon={<BoxIcon className="size-5" />}
            >
              Button Text
            </Button>
            <Button
              size="md"
              variant="primary"
              endIcon={<BoxIcon className="size-5" />}
            >
              Button Text
            </Button>
          </div>
        </ComponentCard>
        {/* Outline Button */}
        <ComponentCard title="Secondary Button">
          <div className="flex items-center gap-5">
            {/* Outline Button */}
            <Button size="sm" variant="outline">
              Button Text
            </Button>
            <Button size="md" variant="outline">
              Button Text
            </Button>
          </div>
        </ComponentCard>
        {/* Outline Button with Start Icon */}
        <ComponentCard title="Outline Button with Left Icon">
          <div className="flex items-center gap-5">
            <Button
              size="sm"
              variant="outline"
              startIcon={<BoxIcon className="size-5" />}
            >
              Button Text
            </Button>
            <Button
              size="md"
              variant="outline"
              startIcon={<BoxIcon className="size-5" />}
            >
              Button Text
            </Button>
          </div>
        </ComponentCard>{" "}
        {/* Outline Button with Start Icon */}
        <ComponentCard title="Outline Button with Right Icon">
          <div className="flex items-center gap-5">
            <Button
              size="sm"
              variant="outline"
              endIcon={<BoxIcon className="size-5" />}
            >
              Button Text
            </Button>
            <Button
              size="md"
              variant="outline"
              endIcon={<BoxIcon className="size-5" />}
            >
              Button Text
            </Button>
          </div>
        </ComponentCard>
      </div>
    </div>
  );
}

```

### routes\index.tsx
```tsx
import { Routes, Route, Navigate } from "react-router-dom";
import { ProtectedRoute } from "../services/ProtectedRoute";
import LoginPage from "../pages/Login";
import HomePage from "../pages/Home";
import AppLayoutForUser from "../layout/AppLayoutForUser";

const AppRoutes = () => {
  return (
    <Routes>
      <Route path="/login" element={<LoginPage />} />

      {/* Wrap HomePage with layout components */}
      <Route
        path="/home"
        element={
          <ProtectedRoute>
            <AppLayoutForUser>
              <HomePage />
            </AppLayoutForUser>
          </ProtectedRoute>
        }
      />

      <Route path="/" element={<Navigate to="/home" />} />
    </Routes>
  );
};

export default AppRoutes;

```

### routes\privateRoutes.ts
```ts

```

### routes\publicRoutes.ts
```ts

```

### services\authService.ts
```ts
import apiClient from "../config/axios";

interface LoginCredentials {
  email: string;
  password: string;
  rememberMe: boolean;
}

interface LoginResponse {
  user: {
    id: string;
    email: string;
    username: string;
  };
  token: string;
  rememberMe: boolean;
}

const authService = {
  login: async (credentials: LoginCredentials): Promise<LoginResponse> => {
    const response = await apiClient.post("/auth/login", credentials);
    return response.data;
  },

  logout: async (): Promise<void> => {
    await apiClient.post("/auth/logout");
    localStorage.removeItem("token");
  },

  getCurrentUser: async () => {
    const response = await apiClient.get("/auth/me");
    return response.data;
  },
};

export default authService;

```

### services\ProtectedRoute.tsx
```tsx
// src/services/ProtectedRoute.tsx
import { useSelector } from "react-redux";
import { Navigate, useLocation } from "react-router-dom";
import type { RootState } from "../store/store";

interface ProtectedRouteProps {
  children: React.ReactNode;
}

export const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ children }) => {
  const { isAuthenticated, loading } = useSelector(
    (state: RootState) => state.auth
  );
  const location = useLocation();

  if (loading) {
    return <div>Loading...</div>;
  }

  if (!isAuthenticated) {
    return <Navigate to="/login" state={{ from: location }} replace />;
  }

  return <>{children}</>;
};

```

### store\store.ts
```ts
// src/store/store.ts
import { configureStore } from "@reduxjs/toolkit";
import authReducer from "./slices/authSlice";

export const store = configureStore({
  reducer: {
    auth: authReducer,
  },
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware({
      serializableCheck: {
        ignoredActions: ["persist/PERSIST"],
      },
    }),
});

export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;

```

### store\slices\authSlice.ts
```ts
// src/store/slices/authSlice.ts
import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import type { PayloadAction } from "@reduxjs/toolkit";
import api from "@/config/axios";
import { jwtDecode } from "jwt-decode";

// Interfaces
export interface User {
  id: string;
  email: string;
  name?: string;
  role?: string;
  username?: string;
}

interface UserState {
  isAuthenticated: boolean;
  user: User | null;
  token: string | null;
  loading: boolean;
  error: {
    code: number;
    message: string;
  } | null;
}

interface DecodedToken {
  "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress": string;
  "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name": string;
  "http://schemas.microsoft.com/ws/2008/06/identity/claims/role": string;
  exp: number;
  iss: string;
  aud: string;
}

interface AuthResponse {
  user: User;
  token: string;
}

interface LoginRequest {
  username: string;
  password: string;
}

interface ErrorResponse {
  error: number;
  message: string;
}

// Initial state
const initialState: UserState = {
  isAuthenticated: false,
  user: null,
  token: null,
  error: null,
  loading: false,
};

// Helper functions
const saveAuthData = (data: AuthResponse) => {
  localStorage.setItem("authToken", data.token);
  localStorage.setItem("user", JSON.stringify(data.user));
};

const clearAuthData = () => {
  localStorage.removeItem("authToken");
  localStorage.removeItem("user");
  sessionStorage.removeItem("authToken");
  sessionStorage.removeItem("user");
};

const createUserFromToken = (token: string): User => {
  try {
    const decoded: DecodedToken = jwtDecode(token);

    return {
      id: decoded["http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name"],
      email:
        decoded[
          "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress"
        ],
      name: decoded[
        "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name"
      ],
      username:
        decoded["http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name"],
      role: decoded[
        "http://schemas.microsoft.com/ws/2008/06/identity/claims/role"
      ],
    };
  } catch (error) {
    console.error("Error decoding token:", error);
    throw new Error("Token không hợp lệ");
  }
};

// ✅ ASYNC THUNKS với GET request và query parameters
// ✅ ASYNC THUNKS với GET request và query parameters
export const Login = createAsyncThunk<
  AuthResponse,
  LoginRequest,
  { rejectValue: ErrorResponse }
>("auth/login", async (credentials, { rejectWithValue }) => {
  try {
    console.log("🚀 Login request payload:", credentials); // Debug log

    const res = await api.post(
      "account/login",
      // Request body directly
      {
        username: credentials.username,
        password: credentials.password,
      },
      // Request config as third parameter
      {
        headers: {
          "Content-Type": "application/json",
          accept: "*/*",
        },
      }
    );

    console.log("✅ Response:", res.data); // Debug log

    if (!res.data || !res.data.data) {
      return rejectWithValue({
        error: 1,
        message: "Phản hồi từ server không hợp lệ",
      });
    }

    const token = res.data.data;
    const user = createUserFromToken(token);

    return { user, token };
  } catch (err: any) {
    console.error("❌ Error status:", err.response?.status);
    console.error("❌ Error data:", err.response?.data);

    if (err.response && err.response.data) {
      return rejectWithValue({
        error: 1,
        message: err.response.data.message || "Đăng nhập thất bại",
      });
    }

    return rejectWithValue({
      error: 1,
      message: err.message || "Không thể kết nối đến máy chủ",
    });
  }
});

export const LoginNoRemember = createAsyncThunk<
  AuthResponse,
  LoginRequest,
  { rejectValue: ErrorResponse }
>("authNoRemember/login", async (credentials, { rejectWithValue }) => {
  try {
    console.log("🚀 Login request payload:", credentials); // Debug log

    const res = await api.post(
      "account/login",
      // Request body directly
      {
        username: credentials.username,
        password: credentials.password,
      },
      // Request config as third parameter
      {
        headers: {
          "Content-Type": "application/json",
          accept: "*/*",
        },
      }
    );

    console.log("✅ Response:", res.data); // Debug log

    if (!res.data || !res.data.data) {
      return rejectWithValue({
        error: 1,
        message: "Phản hồi từ server không hợp lệ",
      });
    }

    const token = res.data.data;
    const user = createUserFromToken(token);

    return { user, token };
  } catch (err: any) {
    console.error("❌ Error status:", err.response?.status);
    console.error("❌ Error data:", err.response?.data);

    if (err.response && err.response.data) {
      return rejectWithValue({
        error: 1,
        message: err.response.data.message || "Đăng nhập thất bại",
      });
    }

    return rejectWithValue({
      error: 1,
      message: err.message || "Không thể kết nối đến máy chủ",
    });
  }
});

// Slice (giữ nguyên)
const userSlice = createSlice({
  name: "auth",
  initialState,
  reducers: {
    logout(state) {
      Object.assign(state, initialState);
      clearAuthData();
    },
    restoreAuth(state) {
      const token = localStorage.getItem("authToken");
      const userStr = localStorage.getItem("user");

      if (token && userStr) {
        try {
          const user = JSON.parse(userStr);
          state.isAuthenticated = true;
          state.token = token;
          state.user = user;
        } catch (error) {
          console.error("Error restoring auth:", error);
          clearAuthData();
        }
      }
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(Login.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(
        Login.fulfilled,
        (state, action: PayloadAction<AuthResponse>) => {
          state.loading = false;
          state.isAuthenticated = true;
          state.user = action.payload.user;
          state.token = action.payload.token;
          saveAuthData(action.payload);
          state.error = null;
        }
      )
      .addCase(Login.rejected, (state, action) => {
        state.loading = false;
        state.isAuthenticated = false;
        if (action.payload) {
          state.error = {
            code: action.payload.error,
            message: action.payload.message,
          };
        } else {
          state.error = {
            code: 1,
            message: action.error.message || "Đăng nhập thất bại",
          };
        }
      })
      .addCase(LoginNoRemember.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(
        LoginNoRemember.fulfilled,
        (state, action: PayloadAction<AuthResponse>) => {
          state.loading = false;
          state.isAuthenticated = true;
          state.token = action.payload.token;
          state.user = action.payload.user;
          state.error = null;
        }
      )
      .addCase(LoginNoRemember.rejected, (state, action) => {
        state.loading = false;
        state.isAuthenticated = false;
        if (action.payload) {
          state.error = {
            code: action.payload.error,
            message: action.payload.message,
          };
        } else {
          state.error = {
            code: 1,
            message: action.error.message || "Đăng nhập thất bại",
          };
        }
      });
  },
});

export const { logout, restoreAuth } = userSlice.actions;
export default userSlice.reducer;

```

### types\auth.ts
```ts

```

### types\services.ts
```ts
export interface Service {
  id: string;
  name: string;
  images: string[];
  rating: number;
  reviewCount: number;
  bookingCount: number;
  category: string;
  originalPrice: number;
  currentPrice: number;
  discount?: number;
  petTypes: string[];
  duration: number; // phút
  description?: string;
}

```

### types\user.ts
```ts

```
