# TỔNG HỢP MÃ NGUỒN DỰ ÁN
# ==================================================
# Đường dẫn: D:\KÌ 7\SWD392_CareNest_FE\src\pages
# Công nghệ phát hiện: react, typescript
# ==================================================

## CẤU TRÚC THƯ MỤC
```
pages/
├── Checkout/
│   └── index.tsx
├── Dashboard/
│   ├── component/
│   │   ├── Wallet/
│   │   │   ├── walletHistory.tsx
│   │   │   └── walletModal.tsx
│   │   ├── DaskboardContent.tsx
│   │   ├── MainDashboard.tsx
│   │   ├── PomodoroForm.tsx
│   │   └── PomodoroTimer.tsx
│   ├── DashboardPage.tsx
│   ├── ServicePackage.tsx
│   ├── TaskManager.tsx
│   ├── TimeManagement.tsx
│   ├── Wallet.tsx
│   ├── employeeManagement.tsx
│   ├── index.tsx
│   └── taskReport.tsx
├── Forms/
│   └── FormElements.tsx
├── Home/
│   ├── components/
│   │   ├── HeroBanner.tsx
│   │   ├── HighestRating.tsx
│   │   ├── LatestServices.tsx
│   │   ├── MostBuy.tsx
│   │   ├── ServiceCard.tsx
│   │   └── ServiceCategories.tsx
│   ├── HomePage.tsx
│   └── index.tsx
├── Login/
│   ├── components/
│   │   ├── AuthWrapper.tsx
│   │   ├── EnterOTPCode.tsx
│   │   ├── ForgotPassword.tsx
│   │   ├── LoginForm.tsx
│   │   └── SocialLogin.tsx
│   ├── hooks/
│   │   └── useLoginForm.ts
│   ├── utils/
│   │   └── loginValidation.ts
│   └── index.tsx
├── NotFound/
│   └── index.tsx
├── Profile/
│   └── index.tsx
├── Register/
│   └── index.tsx
├── RegisterShop/
│   └── index.tsx
├── RegisterType/
│   └── index.tsx
├── ServiceDetail/
│   ├── components/
│   │   ├── ServiceActions.tsx
│   │   ├── ServiceImages.tsx
│   │   └── ServiceInfo.tsx
│   └── ServiceDetail.tsx
├── Services/
│   └── Service.tsx
├── Settings/
│   └── index.tsx
├── SignUp/
│   ├── components/
│   ├── hooks/
│   ├── utils/
│   └── SignUp.tsx
├── Tables/
│   └── BasicTables.tsx
└── UiElements/
    ├── Alerts.tsx
    ├── Avatars.tsx
    ├── Badges.tsx
    └── Buttons.tsx
```

## NỘI DUNG CÁC FILE

### Checkout\index.tsx
```tsx

```

### Dashboard\DashboardPage.tsx
```tsx
import React from "react";
// import AppLayout from "@/layout/AppLayout";
import MainDashboard from "@/pages/Dashboard/component/MainDashboard";
import DashboardContent from "@/pages/Dashboard/component/DaskboardContent";
import AppLayoutForUser from "@/layout/AppLayoutForUser";

const DashboardPage: React.FC = () => {
  return (
    <AppLayoutForUser>
      <div className="p-4 mx-auto max-w-screen-2xl md:p-6">
        <MainDashboard />
        <DashboardContent />
      </div>
    </AppLayoutForUser>
  );
};

export default DashboardPage;

```

### Dashboard\employeeManagement.tsx
```tsx
import { useState, useEffect } from 'react';

type Task = {
  id: number;
  title: string;
  description: string;
  deadline: string; // ISO string, ví dụ: "2025-05-31T14:30"
};

type List = {
  id: number;
  title: string;
  tasks: Task[];
};

export default function EmployeeManagement() {
  const [lists, setLists] = useState<List[]>([
    {
      id: 1,
      title: 'Todo',
      tasks: [],
    },
  ]);

  const [view, setView] = useState<'form' | 'board'>('form');

  // Form tạo task ban đầu (view 'form')
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [deadline, setDeadline] = useState('');

  // State thêm thẻ mới trong từng list
  const [addingCardListId, setAddingCardListId] = useState<number | null>(null);
  const [newCardTitle, setNewCardTitle] = useState('');
  const [newCardDescription, setNewCardDescription] = useState('');

  // State thêm danh sách mới
  const [addingList, setAddingList] = useState(false);
  const [newListTitle, setNewListTitle] = useState('');

  // State menu 3 chấm của danh sách
  const [listMenuOpenId, setListMenuOpenId] = useState<number | null>(null);

  // State modal sửa danh sách
  const [editingList, setEditingList] = useState<{ id: number; title: string } | null>(null);
  const [editListTitle, setEditListTitle] = useState('');

  // State modal sửa thẻ chi tiết
  const [editingTaskModal, setEditingTaskModal] = useState<
    { listId: number; task: Task } | null
  >(null);

  // Modal chỉnh sửa thẻ: state form
  const [modalEditTitle, setModalEditTitle] = useState('');
  const [modalEditDescription, setModalEditDescription] = useState('');
  const [modalEditDeadline, setModalEditDeadline] = useState('');

  // Sync modal form khi mở modal chỉnh sửa thẻ
  useEffect(() => {
    if (editingTaskModal) {
      setModalEditTitle(editingTaskModal.task.title);
      setModalEditDescription(editingTaskModal.task.description);
      setModalEditDeadline(editingTaskModal.task.deadline);
    }
  }, [editingTaskModal]);

  // Thêm task từ form tạo mới (view 'form')
  const handleAddTask = () => {
    if (title.trim() === '') return;
    const newTask: Task = {
      id: Date.now(),
      title,
      description,
      deadline,
    };
    setLists(prev =>
      prev.map(l =>
        l.id === 1 ? { ...l, tasks: [...l.tasks, newTask] } : l // Thêm mặc định vào list id=1 (Todo)
      )
    );
    setTitle('');
    setDescription('');
    setDeadline('');
    setView('board');
  };

  // Xóa task theo listId và taskId
  const handleDeleteTask = (listId: number, taskId: number) => {
    setLists(prev =>
      prev.map(l =>
        l.id === listId ? { ...l, tasks: l.tasks.filter(t => t.id !== taskId) } : l
      )
    );
  };

  // Thêm thẻ mới vào list
  const handleAddCard = (listId: number) => {
    if (newCardTitle.trim() === '') return;
    const newTask: Task = {
      id: Date.now(),
      title: newCardTitle.trim(),
      description: newCardDescription.trim(),
      deadline: '',
    };
    setLists(prev =>
      prev.map(l => (l.id === listId ? { ...l, tasks: [...l.tasks, newTask] } : l))
    );
    setNewCardTitle('');
    setNewCardDescription('');
    setAddingCardListId(null);
  };

  // Thêm danh sách mới
  const handleAddList = () => {
    if (newListTitle.trim() === '') return;
    const newList: List = {
      id: Date.now(),
      title: newListTitle.trim(),
      tasks: [],
    };
    setLists(prev => [...prev, newList]);
    setNewListTitle('');
    setAddingList(false);
  };

  // Xóa danh sách
  const handleDeleteList = (listId: number) => {
    if (!window.confirm('Bạn có chắc muốn xóa danh sách này?')) return;
    setLists(prev => prev.filter(l => l.id !== listId));
    setListMenuOpenId(null);
  };

  // Mở modal sửa danh sách
  const openEditListModal = (list: List) => {
    setEditingList({ id: list.id, title: list.title });
    setEditListTitle(list.title);
    setListMenuOpenId(null);
  };

  // Lưu sửa danh sách
  const handleSaveEditList = () => {
    if (editListTitle.trim() === '') return;
    setLists(prev =>
      prev.map(l => (l.id === editingList!.id ? { ...l, title: editListTitle.trim() } : l))
    );
    setEditingList(null);
  };

  // Hủy sửa danh sách
  const handleCancelEditList = () => {
    setEditingList(null);
  };

  // Mở modal chỉnh sửa thẻ chi tiết
  const openEditTaskModal = (listId: number, task: Task) => {
    setEditingTaskModal({ listId, task });
  };

  // Đóng modal chỉnh sửa thẻ
  const closeEditTaskModal = () => {
    setEditingTaskModal(null);
  };

  // Lưu cập nhật thẻ từ modal
  const handleUpdateTask = () => {
    if (!editingTaskModal) return;
    if (modalEditTitle.trim() === '') {
      alert('Tiêu đề không được để trống');
      return;
    }
    setLists(prev =>
      prev.map(list =>
        list.id === editingTaskModal.listId
          ? {
              ...list,
              tasks: list.tasks.map(t =>
                t.id === editingTaskModal.task.id
                  ? {
                      ...t,
                      title: modalEditTitle.trim(),
                      description: modalEditDescription,
                      deadline: modalEditDeadline,
                    }
                  : t
              ),
            }
          : list
      )
    );
    closeEditTaskModal();
  };

  /* --- Component con --- */

  // Nút menu 3 chấm góc phải danh sách
  const ListMenu = ({ listId }: { listId: number }) => {
    const isOpen = listMenuOpenId === listId;
    return (
      <div className="relative inline-block text-left">
        <button
          onClick={e => {
            e.stopPropagation();
            setListMenuOpenId(isOpen ? null : listId);
          }}
          aria-haspopup="true"
          aria-expanded={isOpen}
          className="p-1 rounded-full hover:bg-gray-200 transition"
          title="Tùy chọn danh sách"
        >
          <svg
            className="w-6 h-6 text-gray-600"
            fill="currentColor"
            viewBox="0 0 20 20"
            aria-hidden="true"
          >
            <path d="M6 10a2 2 0 11-4 0 2 2 0 014 0zm6-2a2 2 0 100 4 2 2 0 000-4zm6 2a2 2 0 11-4 0 2 2 0 014 0z" />
          </svg>
        </button>
        {isOpen && (
          <div
            className="origin-top-right absolute right-0 mt-2 w-36 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none z-20"
            onClick={e => e.stopPropagation()}
          >
            <div className="py-1">
              <button
                onClick={() => {
                  const list = lists.find(l => l.id === listId);
                  if (list) openEditListModal(list);
                  setListMenuOpenId(null);
                }}
                className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
              >
                Sửa danh sách
              </button>
              <button
                onClick={() => handleDeleteList(listId)}
                className="block w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-red-100"
              >
                Xóa danh sách
              </button>
            </div>
          </div>
        )}
      </div>
    );
  };

  // Component Task Card (nhấn mở modal chỉnh sửa chi tiết)
  const TaskCard = ({ task, listId }: { task: Task; listId: number }) => {
    return (
      <div
        className="bg-blue-50 p-5 rounded-xl mb-4 flex justify-between items-start shadow-md hover:shadow-xl transition-shadow cursor-pointer"
        onClick={() => openEditTaskModal(listId, task)}
      >
        <div className="flex flex-col flex-grow max-w-[75%]">
          <p className="font-semibold text-blue-900 break-words">{task.title}</p>
          {task.description && (
            <p className="text-gray-700 text-sm mt-1 whitespace-pre-line break-words">{task.description}</p>
          )}
          {task.deadline && (
            <p className="text-sm text-gray-600 mt-1">
              Deadline: <time dateTime={task.deadline}>{task.deadline}</time>
            </p>
          )}
        </div>
        <button
          onClick={e => {
            e.stopPropagation();
            handleDeleteTask(listId, task.id);
          }}
          className="text-red-600 hover:text-white hover:bg-red-600 font-semibold text-lg rounded-full p-2 border border-red-600 transition flex items-center justify-center w-7 h-7 select-none"
          aria-label="Xóa công việc"
          title="Xóa công việc"
        >
          ✕
        </button>
      </div>
    );
  };

  // Form thêm thẻ mới
  const AddCardForm = ({ listId }: { listId: number }) => {
    const isAdding = addingCardListId === listId;

    if (!isAdding) {
      return (
        <button
          onClick={() => setAddingCardListId(listId)}
          className="mt-6 text-blue-600 font-semibold hover:underline text-left transition-all"
          aria-label="Thêm thẻ mới"
        >
          + Thêm thẻ
        </button>
      );
    }

    return (
      <div className="mt-6 flex flex-col gap-3 bg-blue-50 backdrop-blur-sm p-4 rounded-lg shadow-inner">
        <input
          type="text"
          className="px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 placeholder-gray-400"
          placeholder="Tiêu đề thẻ mới"
          value={newCardTitle}
          onChange={e => setNewCardTitle(e.target.value)}
          autoFocus
          onKeyDown={e => {
            if (e.key === 'Enter' && !e.shiftKey) {
              e.preventDefault();
              handleAddCard(listId);
            } else if (e.key === 'Escape') {
              setAddingCardListId(null);
              setNewCardTitle('');
              setNewCardDescription('');
            }
          }}
        />
        <textarea
          className="px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 placeholder-gray-400 resize-none"
          placeholder="Mô tả thẻ mới (tuỳ chọn)"
          rows={3}
          value={newCardDescription}
          onChange={e => setNewCardDescription(e.target.value)}
          onKeyDown={e => {
            if (e.key === 'Escape') {
              setAddingCardListId(null);
              setNewCardTitle('');
              setNewCardDescription('');
            }
          }}
        />
        <div className="flex gap-3">
          <button
            onClick={() => handleAddCard(listId)}
            className="bg-blue-600 text-white px-5 py-2 rounded-lg font-semibold hover:bg-blue-700 transition"
            aria-label="Thêm thẻ"
          >
            Thêm
          </button>
          <button
            onClick={() => {
              setAddingCardListId(null);
              setNewCardTitle('');
              setNewCardDescription('');
            }}
            className="px-5 py-2 rounded-lg border border-gray-300 hover:bg-gray-100 transition"
            aria-label="Hủy thêm thẻ"
          >
            Hủy
          </button>
        </div>
      </div>
    );
  };

  // Form thêm danh sách mới
  const AddListForm = () => {
    if (!addingList) {
      return (
        <div
          onClick={() => setAddingList(true)}
          className="w-64 p-6 rounded-2xl shadow bg-white text-gray-500 flex items-center justify-center cursor-pointer select-none hover:bg-gray-100 transition text-center"
          aria-label="Thêm danh sách mới"
          role="button"
        >
          + Thêm danh sách khác
        </div>
      );
    }

    return (
      <div className="w-64 p-4 rounded-2xl shadow bg-white flex flex-col">
        <input
          type="text"
          className="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 mb-3"
          placeholder="Tên danh sách"
          value={newListTitle}
          onChange={e => setNewListTitle(e.target.value)}
          autoFocus
          onKeyDown={e => {
            if (e.key === 'Enter') {
              e.preventDefault();
              handleAddList();
            }
            if (e.key === 'Escape') setAddingList(false);
          }}
        />
        <div className="flex gap-2">
          <button
            onClick={handleAddList}
            className="bg-blue-600 text-white px-4 py-1 rounded hover:bg-blue-700 transition flex-grow"
          >
            Thêm
          </button>
          <button
            onClick={() => setAddingList(false)}
            className="px-4 py-1 rounded border border-gray-300 hover:bg-gray-100 transition"
          >
            Hủy
          </button>
        </div>
      </div>
    );
  };

  // Modal chỉnh sửa danh sách
  const EditListModal = () => {
    const isOpen = editingList !== null;

    if (!isOpen) return null;

    return (
      <div
        className="fixed inset-0 z-40 flex items-center justify-center bg-opacity-10 backdrop-blur-sm"
        onClick={() => setEditingList(null)}
      >
        <div
          onClick={e => e.stopPropagation()}
          className={`bg-white rounded-lg shadow-lg p-6 w-96 max-w-full transform transition-opacity duration-300 ease-out ${
            isOpen ? 'opacity-100 scale-100' : 'opacity-0 scale-95 pointer-events-none'
          }`}
        >
          <h3 className="text-xl font-semibold mb-4">Sửa danh sách</h3>
          <input
            type="text"
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 mb-4"
            value={editListTitle}
            onChange={e => setEditListTitle(e.target.value)}
            onKeyDown={e => {
              if (e.key === 'Enter') handleSaveEditList();
              if (e.key === 'Escape') handleCancelEditList();
            }}
            autoFocus
          />
          <div className="flex justify-end gap-3">
            <button
              onClick={handleCancelEditList}
              className="px-4 py-2 rounded border border-gray-300 hover:bg-gray-100 transition"
            >
              Hủy
            </button>
            <button
              onClick={handleSaveEditList}
              className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition"
            >
              Lưu
            </button>
          </div>
        </div>
      </div>
    );
  };

  // Modal chỉnh sửa thẻ chi tiết
  const EditTaskModal = () => {
    const isOpen = editingTaskModal !== null;

    if (!isOpen) return null;

    return (
      <div
        className="fixed inset-0 z-40 flex items-center justify-center backdrop-blur-sm bg-opacity-10"
        onClick={closeEditTaskModal}
      >
        <div
          onClick={e => e.stopPropagation()}
          className={`bg-white rounded-lg shadow-lg p-6 w-96 max-w-full transform transition-opacity duration-300 ease-out ${
            isOpen ? 'opacity-100 scale-100' : 'opacity-0 scale-95 pointer-events-none'
          }`}
        >
          {/* Nút đóng góc trên cùng bên phải */}
          <button
            onClick={closeEditTaskModal}
            className="absolute top-3 right-3 text-gray-500 hover:text-gray-700 font-bold text-lg p-1 rounded focus:outline-none"
            aria-label="Đóng"
            title="Đóng"
          >
            ✕
          </button>
          <h3 className="text-xl font-semibold mb-4">Chỉnh sửa công việc</h3>
          <label className="block font-semibold mb-1">Tiêu đề:</label>
          <input
            type="text"
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 mb-4"
            value={modalEditTitle}
            onChange={e => setModalEditTitle(e.target.value)}
          />

          <label className="block font-semibold mb-1">Mô tả:</label>
          <textarea
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 mb-4 resize-none"
            rows={4}
            value={modalEditDescription}
            onChange={e => setModalEditDescription(e.target.value)}
          />

          <label className="block font-semibold mb-1">Deadline:</label>
          <input
            type="datetime-local"
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 mb-6"
            value={modalEditDeadline}
            onChange={e => setModalEditDeadline(e.target.value)}
          />

          <div className="w-full">
            <button
              onClick={handleUpdateTask}
              className="w-full px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition"
            >
              Cập nhật
            </button>                 
          </div>
        </div>
      </div>
    );
  };

  /* --- Render chính --- */

  if (view === 'form') {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100 p-6">
        <div className="bg-white p-6 rounded-lg shadow-lg w-full max-w-md">
          <h2 className="text-2xl font-bold text-center text-blue-600 mb-6">Quản lý Task Nhân viên</h2>
          <div className="space-y-5">
            <div>
              <label className="block font-semibold mb-1">Tiêu đề:</label>
              <input
                type="text"
                value={title}
                onChange={e => setTitle(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Nhập tiêu đề công việc"
              />
            </div>
            <div>
              <label className="block font-semibold mb-1">Mô tả:</label>
              <textarea
                value={description}
                onChange={e => setDescription(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Nhập mô tả công việc"
                rows={4}
              />
            </div>
            <div>
              <label className="block font-semibold mb-1">Deadline:</label>
              <input
                type="datetime-local"
                value={deadline}
                onChange={e => setDeadline(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
            <button
              onClick={handleAddTask}
              className="w-full bg-blue-600 text-white font-semibold py-2 rounded-md hover:bg-blue-700 transition"
            >
              Thêm công việc
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-100 p-6">
      <button
        onClick={() => setView('form')}
        className="mb-6 text-sm text-blue-600 hover:underline flex items-center gap-2 font-medium"
        aria-label="Quay lại tạo công việc"
      >
        <span className="text-2xl leading-none">←</span> Quay lại tạo công việc
      </button>

      <div className="flex gap-8 max-w-7xl mx-auto overflow-x-auto p-2">
        {lists.map(list => (
          <div
            key={list.id}
            className="bg-white p-6 rounded-2xl shadow-lg w-80 flex flex-col max-h-[80vh]"
          >
            <div className="flex justify-between items-center mb-4 border-b border-gray-300 pb-2">
              <h3 className="font-semibold text-xl text-gray-800">{list.title}</h3>
              <ListMenu listId={list.id} />
            </div>
            <div className="flex-grow overflow-y-auto pr-2 scrollbar-thin scrollbar-thumb-blue-400 scrollbar-track-gray-100">
              {list.tasks.length === 0 ? (
                <p className="text-gray-400 text-center mt-12 italic select-none">
                  Chưa có công việc nào. Hãy thêm ngay!
                </p>
              ) : (
                list.tasks.map(task => <TaskCard key={task.id} task={task} listId={list.id} />)
              )}
            </div>
            <AddCardForm listId={list.id} />
          </div>
        ))}

        <AddListForm />
      </div>

      {/* Modal sửa danh sách */}
      <EditListModal />

      {/* Modal sửa task chi tiết */}
      <EditTaskModal />
    </div>
  );
}
```

### Dashboard\index.tsx
```tsx
import React from "react";
import { useDispatch } from "react-redux";
import { logout } from "../../store/slices/authSlice";
import Button from "../../components/ui/Button";

const Dashboard: React.FC = () => {
  const dispatch = useDispatch();
  // Bỏ comment user nếu không sử dụng
  // const { user } = useSelector((state: RootState) => state.auth);

  const handleLogout = () => {
    dispatch(logout());
  };

  return (
    <div className="min-h-screen bg-gray-50 py-12">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="bg-white shadow rounded-lg">
          <div className="px-4 py-5 sm:p-6">
            <div className="flex items-center justify-between mb-6">
              <div>
                <h1 className="text-3xl font-bold text-gray-900">
                  Dashboard - Quản lý Task
                </h1>
                <p className="mt-1 text-sm text-gray-600">
                  Chào mừng bạn đến với hệ thống quản lý task
                </p>
              </div>
              <Button variant="outline" onClick={handleLogout}>
                Đăng xuất
              </Button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Dashboard;

```

### Dashboard\ServicePackage.tsx
```tsx
import React, { useState } from "react";
// Import icon Star từ thư viện lucide-react để dùng làm biểu tượng
import { Star } from "lucide-react"; 
// Import dữ liệu danh sách gói dịch vụ từ file JSON nội bộ
import listpackage from "@/data/listpackage.json";

const ServicePackage: React.FC = () => {
  const [showModal, setShowModal] = useState(false); // Quản lý trạng thái hiển thị modal
  const [modalType, setModalType] = useState<"renew" | "cancel" | null>(null); // Quản lý loại modal đang hiển thị: 'renew' hoặc 'cancel'

  const activeList = listpackage.find((plan) => plan.isActive);

  // Mở modal gia hạn
  const handleOpenRenewModal = () => {
    setModalType("renew");
    setShowModal(true);
  };

   // Mở modal hủy gia hạn
  const handleOpenCancelModal = () => {
    setModalType("cancel");
    setShowModal(true);
  };

  // Đóng modal
  const handleCloseModal = () => {
    setShowModal(false);
    setModalType(null);
  };

   // Xác nhận gia hạn
  const handleConfirmRenew = () => {
    alert(`Gia hạn gói ${activeList?.name} thành công!`);
    handleCloseModal();
  };

  // Xác nhận hủy gia hạn
  const handleConfirmCancel = () => {
    alert(`Đã hủy gia hạn gói ${activeList?.name} thành công!`);
    handleCloseModal();
  };

  return (
    <div className="max-w-7xl mx-auto px-4 py-8 space-y-10">
      {/* Header Section */}
      <div className="bg-gradient-to-r from-yellow-100 via-yellow-50 to-yellow-100 border border-yellow-200 rounded-2xl shadow-md p-6 space-y-3">
        {/* Số điểm */}
        <p className="text-base font-medium">
          Số điểm hiện tại trong tài khoản: <span className="text-blue-600 font-bold">100.000đ</span>
        </p>
        <div className="flex items-center gap-2 text-sm font-medium text-gray-800">
          <Star className="w-5 h-5 text-yellow-500" />
          Gói hiện tại: <span className="font-bold text-blue-700">Pro</span>
        </div>
        <p className="text-sm text-gray-600">Hết hạn: 30/06/2025</p>
        <div className="flex gap-3 pt-3">
          <button
            onClick={handleOpenRenewModal}
            className="bg-blue-600 hover:bg-blue-700 text-white text-sm px-4 py-2 rounded-lg shadow-md transition duration-300"
          >
            Gia hạn
          </button>
          <button
            onClick={handleOpenCancelModal}
            className="bg-red-600 hover:bg-red-700 text-white text-sm px-4 py-2 rounded-lg shadow-md transition duration-300"
          >
            Hủy gia hạn
          </button>
        </div>
      </div>

      {/* Danh sách các gói dịch vụ */}
      <div>
        <h2 className="text-3xl font-extrabold text-center text-blue-700 mb-12">
          Gói dịch vụ của bạn
        </h2>
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-10">
          {listpackage.map((list) => (
            // Hiển thị từng gói
            <div
              key={list.name}
              className={`rounded-2xl border p-6 shadow-sm flex flex-col h-full transition-all duration-300 ${
                list.isActive
                  ? "border-blue-600 shadow-lg bg-blue-50"
                  : "border-gray-300 hover:shadow-md bg-white"
              }`}
            >
              <h3 className="text-gray-900 text-2xl font-bold mb-4 text-center">
                {list.name}
              </h3>

              <p className="text-blue-600 font-bold mb-4 text-2xl text-center">
                {list.price}
              </p>

              {/* Danh sách tính năng */}
              <ul className="text-sm text-gray-600 space-y-2 mb-6 flex-grow">
                {list.features.map((feature, index) => (
                  <li key={index}>• {feature}</li>
                ))}
              </ul>

              <div className="mt-auto pt-4">
                <button
                  className={`w-full py-2 rounded-lg text-white font-medium transition ${
                    list.isActive
                      ? "bg-gray-300 text-gray-500 cursor-default"
                      : "bg-blue-600 hover:bg-blue-700"
                  }`}
                  disabled={list.isActive}
                >
                  {list.buttonLabel}
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Modal xác nhận gia hạn hoặc hủy gia hạn */}
      {showModal && activeList && (
        <div
          className="fixed inset-0 bg-opacity-30 backdrop-blur-sm flex items-center justify-center z-50"
          onClick={handleCloseModal}
        >
          <div
            className="bg-white rounded-xl p-8 max-w-md w-full shadow-xl border border-gray-200 relative"
            onClick={(e) => e.stopPropagation()}
          >
            {/* Modal gia hạn */}
            {modalType === "renew" && (
              <>
                <h2 className="text-xl font-bold text-blue-700 mb-4 text-center">
                  Gia Hạn Gói {activeList.name}
                </h2>
                <p className="text-center text-gray-700 mb-6">
                  Bạn muốn gia hạn gói <span className="font-semibold">{activeList.name}</span> thêm 1 tháng với giá <span className="font-semibold">{activeList.price}</span>?
                </p>
                <div className="flex justify-center gap-4">
                  <button
                    onClick={handleConfirmRenew}
                    className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg transition"
                  >
                    Gia hạn
                  </button>
                  <button
                    onClick={handleCloseModal}
                    className="bg-gray-300 hover:bg-gray-400 text-gray-800 px-6 py-2 rounded-lg transition"
                  >
                    Hủy
                  </button>
                </div>
              </>
            )}

            {/* Modal hủy gia hạn */}
            {modalType === "cancel" && (
              <>
                <h2 className="text-xl font-bold text-red-600 mb-4 text-center">
                  Hủy Gia Hạn Gói {activeList.name}
                </h2>
                <p className="text-center text-gray-700 mb-6">
                  Bạn có chắc muốn hủy gia hạn tự động của gói <span className="font-semibold">{activeList.name}</span> không?
                </p>
                <div className="flex justify-center gap-4">
                  <button
                    onClick={handleConfirmCancel}
                    className="bg-red-600 hover:bg-red-700 text-white px-6 py-2 rounded-lg transition"
                  >
                    Xác nhận hủy
                  </button>
                  <button
                    onClick={handleCloseModal}
                    className="bg-gray-300 hover:bg-gray-400 text-gray-800 px-6 py-2 rounded-lg transition"
                  >
                    Đóng
                  </button>
                </div>
              </>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default ServicePackage;

```

### Dashboard\TaskManager.tsx
```tsx
import { useState } from "react";

export default function TaskManager() {
  const [activeTab, setActiveTab] = useState<"list" | "create">("create");
  const [tasks, setTasks] = useState<
    {
      id: number;
      title: string;
      description: string;
      datetime: string;
      type: string;
    }[]
  >([]);

  const [form, setForm] = useState({
    title: "",
    description: "",
    datetime: "",
    type: "Cá nhân",
  });

  function handleInputChange(
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>
  ) {
    const { name, value } = e.target;
    setForm((f) => ({ ...f, [name]: value }));
  }

  function handleCreateTask(e: React.FormEvent) {
    e.preventDefault();

    // Validation
    if (!form.title.trim()) {
      alert("❌ Vui lòng nhập tiêu đề công việc!");
      return;
    }
    if (!form.datetime) {
      alert("❌ Vui lòng chọn thời gian cho công việc!");
      return;
    }

    // Thêm task mới
    const newTask = {
      id: tasks.length + 1,
      title: form.title,
      description: form.description,
      datetime: form.datetime,
      type: form.type,
    };

    setTasks((prev) => [...prev, newTask]);
    alert("✅ Tạo công việc thành công!");
    setForm({ title: "", description: "", datetime: "", type: "Cá nhân" });
    setActiveTab("list");
  }

  return (
    <div className="max-w-4xl mx-auto p-8 bg-white rounded-lg shadow-lg mt-10 border border-gray-200">
      <h1 className="text-4xl font-extrabold text-blue-700 mb-8 text-center">
        Task Manager
      </h1>

      {/* Tabs */}
      <div className="flex justify-center mb-8 space-x-6 border-b border-gray-300">
        <button
          onClick={() => setActiveTab("list")}
          className={`relative pb-3 font-semibold text-lg ${
            activeTab === "list"
              ? "text-blue-600 border-b-4 border-blue-600"
              : "text-gray-500 hover:text-blue-500"
          } transition-colors`}
        >
          Task List
        </button>
        <button
          onClick={() => setActiveTab("create")}
          className={`relative pb-3 font-semibold text-lg ${
            activeTab === "create"
              ? "text-blue-600 border-b-4 border-blue-600"
              : "text-gray-500 hover:text-blue-500"
          } transition-colors`}
        >
          Create Task
        </button>
      </div>

      {/* Content */}
      {activeTab === "list" && (
        <div>
          <h2 className="text-2xl font-semibold mb-6 text-gray-800">
            Danh sách công việc
          </h2>
          {tasks.length === 0 ? (
            <p className="text-gray-400 italic text-center py-20">
              Chưa có công việc nào.
            </p>
          ) : (
            <ul className="space-y-6">
              {tasks.map((task, idx) => (
                <li
                  key={task.id}
                  className="p-6 border rounded-xl shadow-sm hover:shadow-md transition-shadow duration-300 bg-gray-50"
                >
                  <h3 className="text-blue-700 font-bold text-xl mb-1">
                    {idx + 1}. {task.title}
                  </h3>
                  <p className="text-gray-700 mb-2 whitespace-pre-line">
                    {task.description || (
                      <span className="italic text-gray-400">Không có mô tả</span>
                    )}
                  </p>
                  <div className="flex items-center text-gray-600 text-sm space-x-6">
                    <div>
                      <span className="font-semibold">Thời gian:</span>{" "}
                      {new Date(task.datetime).toLocaleString("vi-VN", {
                        dateStyle: "medium",
                        timeStyle: "short",
                      })}
                    </div>
                    <div>
                      <span className="font-semibold">Loại công việc:</span> {task.type}
                    </div>
                  </div>
                </li>
              ))}
            </ul>
          )}
        </div>
      )}

      {activeTab === "create" && (
        <form onSubmit={handleCreateTask} className="max-w-xl mx-auto">
          <h2 className="text-2xl font-semibold mb-6 text-gray-800">Tạo công việc mới</h2>

          <label htmlFor="title" className="block mb-2 font-medium text-gray-700">
            Tiêu đề:
          </label>
          <input
            id="title"
            name="title"
            type="text"
            value={form.title}
            onChange={handleInputChange}
            placeholder="Nhập tiêu đề công việc"
            className="w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 mb-6 transition"
          />

          <label htmlFor="description" className="block mb-2 font-medium text-gray-700">
            Mô tả:
          </label>
          <textarea
            id="description"
            name="description"
            value={form.description}
            onChange={handleInputChange}
            rows={5}
            placeholder="Nhập mô tả chi tiết"
            className="w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 mb-6 transition resize-none"
          />

          <label htmlFor="datetime" className="block mb-2 font-medium text-gray-700">
            Thời gian:
          </label>
          <input
            id="datetime"
            name="datetime"
            type="datetime-local"
            value={form.datetime}
            onChange={handleInputChange}
            className="w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 mb-6 transition"
          />

          <label htmlFor="type" className="block mb-2 font-medium text-gray-700">
            Loại công việc:
          </label>
          <select
            id="type"
            name="type"
            value={form.type}
            onChange={handleInputChange}
            className="w-full px-4 py-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 mb-8 transition bg-white"
          >
            <option>Cá nhân</option>
            <option>Nhóm</option>
            <option>Dự án</option>
          </select>

          <button
            type="submit"
            className="w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 rounded-lg shadow-md transition-colors"
          >
            Tạo công việc
          </button>
        </form>
      )}
    </div>
  );
}   
```

### Dashboard\taskReport.tsx
```tsx
import { useState } from "react";

type Task = {
  title: string;
  created: string;
  deadline: string;
  progress: string;
  status: string;
};

export default function TaskReport() {
  // Khởi tạo tasks rỗng, quản lý bằng state
  const [tasks, setTasks] = useState<Task[]>([]);

  const [showForm, setShowForm] = useState(false);

  // Form nhập task mới
  const [taskForm, setTaskForm] = useState<Task>({
    title: "",
    created: "",
    deadline: "",
    progress: "",
    status: "",
  });

  // trạng thái
  const totalTasks = tasks.length;
  const inProgressTasks = tasks.filter((t) => t.status === "Đang thực hiện").length;
  const doneTasks = tasks.filter((t) => t.status === "Đã hoàn thành").length;

  // Xử lý thay đổi input form
  function handleInputChange(e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) {
    const { name, value } = e.target;
    setTaskForm((prev) => ({ ...prev, [name]: value }));
  }

  // Submit form tạo task mới
  function handleSubmitForm(e: React.FormEvent) {
    e.preventDefault();

    // Kiểm tra yêu cầu tối thiểu 
    if (!taskForm.title || !taskForm.created || !taskForm.deadline) {
      alert("Vui lòng nhập đầy đủ Tiêu đề, Ngày tạo và Deadline");
      return;
    }

    // Thêm task mới vào danh sách
    setTasks((prev) => [...prev, taskForm]);

    // Reset form
    setTaskForm({
      title: "",
      created: "",
      deadline: "",
      progress: "",
      status: "",
    });

    setShowForm(false);
  }

  return (
    <div className="max-w-5xl mx-auto mt-10 p-8 bg-white rounded-xl shadow-lg border border-gray-200 relative">
      {/* Tiêu đề và nút tạo báo cáo */}
      <div className="flex items-center justify-between mb-6">
        <h1 className="text-3xl font-bold text-blue-700">Báo cáo công việc</h1>
        <button
          onClick={() => setShowForm(true)}
          className="bg-blue-600 hover:bg-blue-700 text-white font-semibold px-5 py-2 rounded-lg shadow transition"
        >
          Tạo báo cáo
        </button>
      </div>

      {/* Bảng danh sách task */}
      <div className="overflow-x-auto">
        <table className="min-w-full border border-gray-300 rounded-lg overflow-hidden">
          <thead className="bg-blue-100 text-blue-700">
            <tr>
              <th className="text-left px-4 py-2">Tiêu đề</th>
              <th className="text-left px-4 py-2">Ngày tạo</th>
              <th className="text-left px-4 py-2">Deadline</th>
              <th className="text-left px-4 py-2">Tiến độ</th>
              <th className="text-left px-4 py-2">Trạng thái</th>
            </tr>
          </thead>
          <tbody className="text-gray-700">
            {tasks.length === 0 ? (
              <tr>
                <td colSpan={5} className="text-center py-4 text-gray-400 italic">
                  Chưa có task nào
                </td>
              </tr>
            ) : (
              tasks.map((task, idx) => (
                <tr
                  key={idx}
                  className="even:bg-gray-50 hover:bg-blue-50 transition-colors"
                >
                  <td className="px-4 py-3 font-medium">{task.title}</td>
                  <td className="px-4 py-3">{task.created}</td>
                  <td className="px-4 py-3">{task.deadline}</td>
                  <td className="px-4 py-3">{task.progress}</td>
                  <td className="px-4 py-3">{task.status}</td>
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>

      {/* Tổng kết */}
      <div className="mt-8 bg-blue-50 p-4 rounded-lg shadow-inner border border-blue-200">
        <h3 className="text-blue-600 font-semibold text-lg mb-2">Tổng kết</h3>
        <p className="text-sm text-gray-800">Tổng số task: {totalTasks}</p>
        <p className="text-sm text-gray-800">Đang tiến hành: {inProgressTasks}</p>
        <p className="text-sm text-gray-800">Đã hoàn thành: {doneTasks}</p>
      </div>

      {/* Form nhập báo cáo (popup modal) */}
      {showForm && (
        <div className="fixed inset-0  bg-opacity-20 backdrop-blur-sm flex items-center justify-center z-50 p-4">
          <div className="bg-white p-6 rounded-xl shadow-xl w-full max-w-md relative">
            {/* Nút đóng */}
            <button
              onClick={() => setShowForm(false)}
              className="absolute top-3 right-3 text-gray-500 hover:text-red-600 text-2xl font-bold"
              aria-label="Đóng biểu mẫu"
            >
              ×
            </button>

            <form onSubmit={handleSubmitForm}>
              <h3 className="text-xl font-semibold text-gray-800 mb-4 text-center">
                Thêm báo cáo
              </h3>

              <label className="block mb-2 font-medium text-gray-700">Tiêu đề:</label>
              <input
                type="text"
                name="title"
                value={taskForm.title}
                onChange={handleInputChange}
                className="w-full px-4 py-2 border rounded-lg mb-4 focus:outline-none focus:ring-2 focus:ring-blue-500"
                required
              />

              <label className="block mb-2 font-medium text-gray-700">Ngày tạo:</label>
              <input
                type="date"
                name="created"
                value={taskForm.created}
                onChange={handleInputChange}
                className="w-full px-4 py-2 border rounded-lg mb-4 focus:outline-none focus:ring-2 focus:ring-blue-500"
                required
              />

              <label className="block mb-2 font-medium text-gray-700">Deadline:</label>
              <input
                type="date"
                name="deadline"
                value={taskForm.deadline}
                onChange={handleInputChange}
                className="w-full px-4 py-2 border rounded-lg mb-4 focus:outline-none focus:ring-2 focus:ring-blue-500"
                required
              />

              <label className="block mb-2 font-medium text-gray-700">Tiến độ (%):</label>
              <input
                type="number"
                name="progress"
                value={taskForm.progress}
                onChange={handleInputChange}
                min="0"
                max="100"
                className="w-full px-4 py-2 border rounded-lg mb-4 focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="VD: 80"
              />

              <label className="block mb-2 font-medium text-gray-700">Trạng thái:</label>
              <select
                name="status"
                value={taskForm.status}
                onChange={handleInputChange}
                className="w-full px-4 py-2 border rounded-lg mb-6 focus:outline-none focus:ring-2 focus:ring-blue-500"
                required
              >
                <option value="">-- Chọn trạng thái --</option>
                <option value="Đang thực hiện">Đang thực hiện</option>
                <option value="Đã hoàn thành">Đã hoàn thành</option>
                <option value="Chưa bắt đầu">Chưa bắt đầu</option>
              </select>

              <button
                type="submit"
                className="w-full bg-blue-600 hover:bg-blue-700 text-white py-3 rounded-lg font-semibold transition"
              >
                Thêm task
              </button>
            </form>
          </div>
        </div>
      )}
    </div>
  );
}
```

### Dashboard\TimeManagement.tsx
```tsx
import React, { useState } from "react";
import PomodoroForm, { type PomodoroConfig } from "./component/PomodoroForm";
import PomodoroTimer from "./component/PomodoroTimer";
import AppLayout from "@/layout/AppLayout";

const TimeManagement: React.FC = () => {
  const [config, setConfig] = useState<PomodoroConfig | null>(null);

  return (
    <AppLayout>
      <div className="min-h-screen flex items-center justify-center bg-gray-100">
        {!config ? (
          <PomodoroForm onCreate={setConfig} />
        ) : (
          <PomodoroTimer config={config} />
        )}
      </div>
    </AppLayout>
  );
};

export default TimeManagement;

```

### Dashboard\Wallet.tsx
```tsx
import { useState } from 'react';
import WalletModal from './component/Wallet/walletModal';
import WalletHistoryModal from './component/Wallet/walletHistory';
import WalletImage from '@/assets/wallet-svgrepo-com.svg';

const WalletPage = () => {
  const [showTopUp, setShowTopUp] = useState(false);
  const [showHistory, setShowHistory] = useState(false);

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col items-center p-6">
      <h1 className="text-3xl font-bold text-blue-600 mb-6">Ví của bạn</h1>

      <div className="bg-white border rounded-lg shadow-lg p-6 w-full max-w-5xl flex gap-6">
        {/* Left */}
        <div className="flex-1 space-y-4">
          <div>
            <h2 className="font-bold text-lg">NGUYEN VAN A</h2>
            <p className="text-gray-600">Mã tài khoản: <span className="text-blue-600 cursor-pointer">CF450T</span></p>
          </div>

          <div className="flex items-center space-x-2 text-gray-800">
            <span className="text-yellow-400 text-xl">⭐</span>
            <span>Số dư hiện tại trong tài khoản: <span className="text-blue-600 font-semibold">100.000₫</span></span>
          </div>

          <div className="flex flex-col sm:flex-row gap-3">
            <button
              onClick={() => setShowHistory(true)}
              className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition"
            >
              Xem lại lịch sử giao dịch
            </button>
            <button
              onClick={() => setShowTopUp(true)}
              className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700 transition"
            >
              Nạp tiền
            </button>
          </div>
        </div>

        {/* Right */}
        <div className="flex-1 flex justify-center items-center">
          <img
            src={WalletImage}
            alt="Wallet illustration"
            className="w-3/4 max-w-xs object-contain"
          />
        </div>
      </div>

      {showTopUp && <WalletModal onClose={() => setShowTopUp(false)} />}
      {showHistory && <WalletHistoryModal onClose={() => setShowHistory(false)} />}
    </div>
  );
};

export default WalletPage;

```

### Dashboard\component\DaskboardContent.tsx
```tsx
// import React from 'react';
import tasksData from '../../../data/tasks.json'; // Import dữ liệu từ file JSON

const DashboardContent = () => {
  const getStatusColor = (status: string) => {
    switch (status) {
      case 'Đang làm':
        return 'bg-yellow-100 text-yellow-800';
      case 'Hoàn thành':
        return 'bg-green-100 text-green-800';
      case 'Chưa làm':
        return 'bg-gray-100 text-gray-800';
      default:
        return 'bg-blue-100 text-blue-800';
    }
  };

  return (
    <div className="bg-white dark:bg-gray-900 rounded-lg shadow p-6">
      <h1 className="text-4xl font-medium text-blue-600 dark:text-white mb-6">
        Danh sách công việc
      </h1>

      <div className="space-y-4">
        {tasksData.map((task) => (
          <div
            key={task.id}
            className="p-4 border border-gray-200 dark:border-gray-700 rounded-lg hover:shadow-md transition-shadow"
          >
            <div className="flex justify-between items-center">
              <h3 className="text-lg font-medium text-gray-800 dark:text-gray-200">
                {task.title}
              </h3>
              <span
                className={`px-3 py-1 text-sm rounded-full ${
                  getStatusColor(task.status ?? '')
                }`}
              >
                {task.status ?? 'Không rõ trạng thái'}
              </span>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default DashboardContent;

```

### Dashboard\component\MainDashboard.tsx
```tsx
import React from "react";

const MainDashboard = () => {
  return (
    <div className=" bg-white dark:bg-gray-900 rounded-lg shadow p-6">
      <h1 className="text-4xl font-bold text-blue-600 dark:text-white mb-6">
        Dashboard
      </h1>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mt-12">
        <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md border border-gray-200 dark:border-gray-700">
          <h3 className="text-xl font-semibold text-gray-900 dark:text-white mb-4">
            Hôm nay
          </h3>
          <p className="text-gray-600 dark:text-gray-300">
            5 task
          </p>
        </div>

        <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md border border-gray-200 dark:border-gray-700">
          <h3 className="text-xl font-semibold text-gray-900 dark:text-white mb-4">
            Đang làm
          </h3>
          <p className="text-gray-600 dark:text-gray-300">
            3 Task
          </p>
        </div>

        <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md border border-gray-200 dark:border-gray-700">
          <h3 className="text-xl font-semibold text-gray-900 dark:text-white mb-4">
                Hoàn thành
          </h3>
          <p className="text-gray-600 dark:text-gray-300">
                2 Task
          </p>
        </div>
      </div>
    </div>
  );
};

export default MainDashboard;

```

### Dashboard\component\PomodoroForm.tsx
```tsx
import React, { useState } from "react";

type PomodoroProps = {
  onCreate: (config: PomodoroConfig) => void;
};

export type PomodoroConfig = {
  title: string;
  workDuration: number;
  shortBreak: number;
  longBreak: number;
  longBreakInterval: number;
};

const PomodoroForm: React.FC<PomodoroProps> = ({ onCreate }) => {
  const [formData, setFormData] = useState<PomodoroConfig>({
    title: "",
    workDuration: 25,
    shortBreak: 5,
    longBreak: 15,
    longBreakInterval: 4,
  });

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: name === "title" ? value : Number(value),
    });
  };

  return (
    <div className="bg-white rounded-2xl shadow-2xl px-8 py-10 w-full max-w-xl mx-auto space-y-6">
      <h2 className="text-3xl font-extrabold text-center text-blue-700 mb-6">
        Tạo Pomodoro Time
      </h2>

      <div className="space-y-4">
        <InputField
          label="Tiêu đề công việc"
          name="title"
          type="text"
          value={formData.title}
          onChange={handleChange}
        />
        <InputField
          label="Thời gian làm việc (phút)"
          name="workDuration"
          type="number"
          value={formData.workDuration}
          onChange={handleChange}
        />
        <InputField
          label="Thời gian nghỉ ngắn (phút)"
          name="shortBreak"
          type="number"
          value={formData.shortBreak}
          onChange={handleChange}
        />
        <InputField
          label="Thời gian nghỉ dài (phút)"
          name="longBreak"
          type="number"
          value={formData.longBreak}
          onChange={handleChange}
        />
        <InputField
          label="Chu kỳ nghỉ dài (ví dụ: 4)"
          name="longBreakInterval"
          type="number"
          value={formData.longBreakInterval}
          onChange={handleChange}
        />
      </div>

      <button
        onClick={() => onCreate(formData)}
        className="w-full py-3 rounded-xl bg-blue-600 hover:bg-blue-700 text-white font-semibold transition duration-300 shadow-md"
      >
        Bắt đầu Pomodoro
      </button>
    </div>
  );
};

// Tách input thành 1 component để dễ tái sử dụng 
const InputField = ({
  label,
  name,
  type,
  value,
  onChange,
}: {
  label: string;
  name: string;
  type: string;
  value: string | number;
  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
}) => (
  <div>
    <label htmlFor={name} className="block text-sm font-medium text-gray-700 mb-1">
      {label}
    </label>
    <input
      type={type}
      name={name}
      value={value}
      onChange={onChange}
      className="w-full px-4 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-blue-500 focus:outline-none transition"
    />
  </div>
);

export default PomodoroForm;

```

### Dashboard\component\PomodoroTimer.tsx
```tsx
import React, { useEffect, useState } from "react";
import type { PomodoroConfig } from "./PomodoroForm";

type TimerProps = {
  config: PomodoroConfig;
};

const PomodoroTimer: React.FC<TimerProps> = ({ config }) => {
  const [secondsLeft, setSecondsLeft] = useState(config.workDuration * 60);
  const [isRunning, setIsRunning] = useState(false);
  const [phase, setPhase] = useState("làm việc");

  useEffect(() => {
    let timer: NodeJS.Timeout;
    if (isRunning && secondsLeft > 0) {
      timer = setInterval(() => setSecondsLeft((prev) => prev - 1), 1000);
    }
    return () => clearInterval(timer);
  }, [isRunning, secondsLeft]);

  const formatTime = () => {
    const minutes = Math.floor(secondsLeft / 60);
    const seconds = secondsLeft % 60;
    return `${minutes.toString().padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`;
  };

  const handleReset = () => {
    setIsRunning(false);
    setSecondsLeft(config.workDuration * 60);
    setPhase("làm việc");
  };

  return (
    <div className="bg-white rounded-2xl shadow-xl px-8 py-10 max-w-xl mx-auto text-center space-y-8">
      <h2 className="text-3xl font-extrabold text-blue-700">⏱ Pomodoro Timer</h2>

      <div className="text-6xl font-mono font-bold text-gray-800 tracking-widest">
        {formatTime()}
      </div>

      <div className="flex justify-center gap-4 mt-4">
        <button
          onClick={() => setIsRunning(true)}
          className="px-6 py-2 rounded-xl bg-green-600 hover:bg-green-700 text-white font-semibold shadow-md transition"
        >
          ▶ Bắt đầu
        </button>
        <button
          onClick={() => setIsRunning(false)}
          className="px-6 py-2 rounded-xl bg-yellow-500 hover:bg-yellow-600 text-white font-semibold shadow-md transition"
        >
          ⏸ Tạm dừng
        </button>
        <button
          onClick={handleReset}
          className="px-6 py-2 rounded-xl bg-red-600 hover:bg-red-700 text-white font-semibold shadow-md transition"
        >
          🔁 Reset
        </button>
      </div>

      <p className="text-gray-600 text-lg">
        🕓 Phiên hiện tại: <span className="font-semibold text-blue-800">{phase}</span>
      </p>
    </div>
  );
};

export default PomodoroTimer;

```

### Dashboard\component\Wallet\walletHistory.tsx
```tsx
import React from 'react';

type HistoryItem = {
  id: number;
  date: string;
  time: string;
  amount: string;
  type: string;
  method: string;
  transactionId: string;
};

const dummyHistory: HistoryItem[] = [
  {
    id: 1,
    date: '2025-06-01',
    time: '14:35',
    amount: '+50,000₫',
    type: 'Nạp tiền',
    method: 'Momo',
    transactionId: 'MOMO123456789',
  },
  {
    id: 2,
    date: '2025-05-20',
    time: '09:20',
    amount: '-20,000₫',
    type: 'Thanh toán',
    method: 'ZaloPay',
    transactionId: 'ZALO0987654321',
  },
];

type WalletHistoryModalProps = {
  onClose: () => void;
};

const WalletHistoryModal: React.FC<WalletHistoryModalProps> = ({ onClose }) => {
  return (
    <div className="fixed inset-0 bg-opacity-30 backdrop-blur-sm flex justify-center items-center z-50">
      <div className="bg-white p-6 rounded-xl w-full max-w-2xl shadow-2xl">
        <h2 className="text-2xl font-bold text-center text-blue-600 mb-6">Lịch sử giao dịch</h2>

        <div className="overflow-y-auto max-h-[400px] divide-y">
          {dummyHistory.map((item) => (
            <div key={item.id} className="py-4 px-2 grid grid-cols-1 md:grid-cols-2 gap-3 text-sm md:text-base">
              <div>
                <p className="font-semibold text-gray-800">{item.type}</p>
                <p className="text-gray-500">{item.date} lúc {item.time}</p>
              </div>
              <div className="flex flex-col items-end md:items-start">
                <p className={`font-bold ${item.amount.startsWith('+') ? 'text-green-600' : 'text-red-600'}`}>
                  {item.amount}
                </p>
                <p className="text-gray-500">Phương thức: {item.method}</p>
                <p className="text-gray-400 text-xs break-all">Mã GD: {item.transactionId}</p>
              </div>
            </div>
          ))}
        </div>

        <div className="flex justify-end mt-6">
          <button
            onClick={onClose}
            className="bg-gray-300 text-gray-800 font-medium px-4 py-2 rounded hover:bg-gray-400 transition"
          >
            Đóng
          </button>
        </div>
      </div>
    </div>
  );
};

export default WalletHistoryModal;

```

### Dashboard\component\Wallet\walletModal.tsx
```tsx
import React, { useState } from 'react';
// import MomoIcon from'@/assets/iconMomo.svg'
// import ZaloPayIcon from'@/assets/zalopay-seeklogo.svg';
import MomoPayQR from'@/assets/momoPay.jpg';
import ZaloPayQR from'@/assets/ZaloPay.jpg'; 

type WalletModalProps = {
  onClose: () => void;
};

const paymentMethods = [
  { id: 'momo', name: 'Momo', icon: '💸' },
  { id: 'visa', name: 'Visa Card', icon: '💳' },
  { id: 'zalopay', name: 'ZaloPay', icon: '🟦' },
];

const quickAmounts = [50000, 100000, 200000, 500000];

const WalletModal: React.FC<WalletModalProps> = ({ onClose }) => {
  const [selectedAmount, setSelectedAmount] = useState<number | null>(null);
  const [customAmount, setCustomAmount] = useState('');
  const [paymentMethod, setPaymentMethod] = useState('momo');

  const handleConfirm = () => {
    const amount = selectedAmount || parseInt(customAmount);
    if (!amount || amount <= 0) {
      alert('Vui lòng quét mã & nhập thông tin hợp lệ!');
      return;
    }

    alert(`Nạp ${amount.toLocaleString()}đ bằng ${paymentMethod}`);
    onClose();
  };

  const renderPaymentUI = () => {
    switch (paymentMethod) {
      case 'momo':
        return (
          <div className="flex flex-col items-center mt-4">
            <img src={MomoPayQR} alt="QR Momo" className="w-40 h-40 rounded shadow-md" />
            <p className="mt-2 text-sm text-gray-600">Hãy quét mã qr trên để thực hiện thanh toán</p>
          </div>
        );
      case 'visa':
        return (
          <div className="mt-4 space-y-3">
            <input type="text" placeholder="Số thẻ" className="input-style" />
            <input type="text" placeholder="Tên chủ thẻ" className="input-style" />
            <div className="flex space-x-2">
              <input type="text" placeholder="MM/YY" className="input-style w-1/2" />
              <input type="text" placeholder="CVV" className="input-style w-1/2" />
            </div>
          </div>
        );
      case 'zalopay':
        return (
          <div className="flex flex-col items-center mt-4">
            <img src={ZaloPayQR} alt="QR ZaloPay" className="w-40 h-40 rounded shadow-md" />
            <p className="mt-2 text-sm text-gray-600">Hãy quét mã qr trên để thực hiện thanh toán</p>
          </div>
        );
    }
  };

  return (
    <div className="fixed inset-0  bg-opacity-30 backdrop-blur-sm flex justify-center items-center z-50">
      <div className="bg-white p-6 rounded-lg w-full max-w-md shadow-xl relative">
        <h2 className="text-2xl font-bold mb-4 text-center text-blue-600">Nạp tiền vào tài khoản</h2>

        {/* Bảng giá */}
        <div className="grid grid-cols-2 gap-2 mb-4">
          {quickAmounts.map((amt) => (
            <button
              key={amt}
              onClick={() => {
                setSelectedAmount(amt);
                setCustomAmount('');
              }}
              className={`border px-4 py-2 rounded text-center font-medium ${
                selectedAmount === amt ? 'bg-blue-600 text-white' : 'hover:bg-blue-100'
              }`}
            >
              {amt.toLocaleString()}đ
            </button>
          ))}
        </div>

        {/* Nhập số tiền */}
        <input
          type="number"
          placeholder="Hoặc nhập số tiền (VND)"
          className="w-full border rounded px-3 py-2 mb-4 focus:outline-none focus:ring focus:border-blue-500"
          value={customAmount}
          onChange={(e) => {
            setCustomAmount(e.target.value);
            setSelectedAmount(null);
          }}
        />

        {/* Chọn phương thức thanh toán */}
        <div className="mb-4">
          <p className="font-semibold mb-2">Chọn phương thức thanh toán:</p>
          <div className="flex space-x-2">
            {paymentMethods.map((method) => (
              <button
                key={method.id}
                onClick={() => setPaymentMethod(method.id)}
                className={`flex-1 border rounded px-3 py-2 flex items-center justify-center space-x-2 ${
                  paymentMethod === method.id ? 'bg-blue-600 text-white' : 'hover:bg-blue-100'
                }`}
              >
                <span>{method.icon}</span>
                <span>{method.name}</span>
              </button>
            ))}
          </div>
        </div>

        {/* Giao diện từng loại thanh toán */}
        {renderPaymentUI()}

        {/* Nút hành động */}
        <div className="flex justify-end space-x-3 mt-6">
          <button onClick={onClose} className="bg-gray-300 px-4 py-2 rounded hover:bg-gray-400">
            Hủy
          </button>
          <button onClick={handleConfirm} className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">
            Xác nhận
          </button>
        </div>
      </div>
    </div>
  );
};

export default WalletModal;

```

### Forms\FormElements.tsx
```tsx
import PageBreadcrumb from "../../components/common/PageBreadCrumb";
import DefaultInputs from "../../components/form/form-elements/DefaultInputs";
import InputGroup from "../../components/form/form-elements/InputGroup";
import DropzoneComponent from "../../components/form/form-elements/DropZone";
import CheckboxComponents from "../../components/form/form-elements/CheckboxComponents";
import RadioButtons from "../../components/form/form-elements/RadioButtons";
import ToggleSwitch from "../../components/form/form-elements/ToggleSwitch";
import FileInputExample from "../../components/form/form-elements/FileInputExample";
import SelectInputs from "../../components/form/form-elements/SelectInputs";
import TextAreaInput from "../../components/form/form-elements/TextAreaInput";
import InputStates from "../../components/form/form-elements/InputStates";

export default function FormElements() {
  return (
    <div>
      <PageBreadcrumb pageTitle="From Elements" />
      <div className="grid grid-cols-1 gap-6 xl:grid-cols-2">
        <div className="space-y-6">
          <DefaultInputs />
          <SelectInputs />
          <TextAreaInput />
          <InputStates />
        </div>
        <div className="space-y-6">
          <InputGroup />
          <FileInputExample />
          <CheckboxComponents />
          <RadioButtons />
          <ToggleSwitch />
          <DropzoneComponent />
        </div>
      </div>
    </div>
  );
}

```

### Home\HomePage.tsx
```tsx
import BannerPage from '@/components/layout/BannerPage';
import Footer from '@/components/layout/Footer';
import NavHome from '@/components/layout/NavHome';
import React from 'react';


const HomePage: React.FC = () => {


  return (
    <>
          <NavHome></NavHome>
          <BannerPage></BannerPage>
          <Footer></Footer>
    </>
  );
};

export default HomePage;
```

### Home\index.tsx
```tsx
// pages/Home/HomePage.tsx
import React from "react";
import ServiceCategories from "./components/ServiceCategories";
import LatestServices from "./components/LatestServices";
import HeroBanner from "./components/HeroBanner";
import HighestRating from "./components/HighestRating";
import MostBuy from "./components/MostBuy";

const HomePage: React.FC = () => {
  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
      {/* Hero Banner */}
      <HeroBanner />

      {/* Service Categories */}
      <ServiceCategories />

      {/* Latest Services */}
      <LatestServices />
      {/* Highest Rating */}
      <HighestRating></HighestRating>
      {/* Most Buy */}
      <MostBuy></MostBuy>
    </div>
  );
};

export default HomePage;

```

### Home\components\HeroBanner.tsx
```tsx
// pages/Home/components/HeroBanner.tsx
import React from "react";

const HeroBanner: React.FC = () => {
  return (
    <section className="bg-gradient-to-r from-[#2A9D8F] to-[#8518c4] text-white py-16">
      <div className="container mx-auto px-4 text-center">
        <h1 className="text-4xl md:text-6xl font-bold mb-6">
          Chăm sóc thú cưng <br />
          <span className="text-orange-300">chuyên nghiệp</span>
        </h1>
        <p className="text-xl md:text-2xl mb-8 text-white/90">
          Tìm kiếm dịch vụ chăm sóc tốt nhất cho bé cưng của bạn
        </p>
        <button className="bg-orange-500 hover:bg-orange-600 text-white px-8 py-4 rounded-lg font-semibold text-lg transition-colors duration-200">
          Khám phá ngay
        </button>
      </div>
    </section>
  );
};

export default HeroBanner;

```

### Home\components\HighestRating.tsx
```tsx
// pages/Home/components/LatestServices.tsx
import React from "react";
import Card from "../../../components/ui/Card";
import Button from "../../../components/ui/Button";

interface Service {
  id: number;
  title: string;
  price: string;
  image: string;
  rating?: number;
  reviews?: number;
}

const highestRating: Service[] = [
  {
    id: 1,
    title: "Cắt tỉa lông",
    price: "200.000 đ",
    image: "/public/image/service1.jpg",
    rating: 4.8,
    reviews: 124,
  },
  {
    id: 2,
    title: "Cắt tỉa lông",
    price: "200.000 đ",
    image: "/public/image/service2.jpg",
    rating: 4.9,
    reviews: 89,
  },
  {
    id: 3,
    title: "Cắt tỉa lông",
    price: "200.000 đ",
    image: "/public/image/service3.jpg",
    rating: 4.7,
    reviews: 156,
  },
  {
    id: 4,
    title: "Cắt tỉa lông",
    price: "200.000 đ",
    image: "/public/image/service4.jpg",
    rating: 4.8,
    reviews: 203,
  },
  {
    id: 5,
    title: "Cắt tỉa lông",
    price: "200.000 đ",
    image: "/public/image/service5.jpg",
    rating: 4.9,
    reviews: 178,
  },
  {
    id: 6,
    title: "Cắt tỉa lông",
    price: "200.000 đ",
    image: "/public/image/service6.jpg",
    rating: 4.6,
    reviews: 92,
  },
];

const HighestRating: React.FC = () => {
  return (
    <section className="py-12 bg-gray-50">
      <div className="container mx-auto px-4">
        {/* Header */}
        <div className="text-center mb-8">
          <div className="relative pb-3 w-full">
            {" "}
            {/* Changed to full width and added padding bottom */}
            <h2 className="text-2xl md:text-3xl font-bold text-gray-900 mb-2">
              ĐÁNH GIÁ CAO NHẤT 💯
            </h2>
            <div className="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-400 h-3 bg-[#2A9D8F] rounded"></div>
          </div>
        </div>

        {/* Services Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-6">
          {highestRating.map((service) => (
            <ServiceCard key={service.id} service={service} />
          ))}
        </div>

        {/* View More Button */}
        <div className="text-center mt-8">
          <Button
            variant="outline"
            size="md"
            className="border-[#2A9D8F] text-[#2A9D8F] hover:bg-[#2A9D8F] hover:text-white"
          >
            Xem thêm dịch vụ
          </Button>
        </div>
      </div>
    </section>
  );
};

// Service Card Component
interface ServiceCardProps {
  service: Service;
}

const ServiceCard: React.FC<ServiceCardProps> = ({ service }) => {
  return (
    <Card className="overflow-hidden hover:shadow-lg transition-shadow duration-200 cursor-pointer group">
      {/* Image */}
      <div className="relative overflow-hidden">
        <img
          src={service.image}
          alt={service.title}
          className="w-full h-48 object-cover group-hover:scale-105 transition-transform duration-200"
          onError={(e) => {
            // Fallback image
            (e.target as HTMLImageElement).src =
              "https://i.pinimg.com/736x/26/c7/35/26c7355fe46f62d84579857c6f8c4ea5.jpg";
          }}
        />
        {service.rating && (
          <div className="absolute top-2 right-2 bg-white/90 backdrop-blur-sm px-2 py-1 rounded-full flex items-center gap-1">
            <span className="text-yellow-500 text-sm">⭐</span>
            <span className="text-xs font-medium">{service.rating}</span>
          </div>
        )}
      </div>

      {/* Content */}
      <div className="p-4">
        <h3 className="font-semibold text-gray-900 mb-2 group-hover:text-[#2A9D8F] transition-colors duration-200">
          {service.title}
        </h3>
        <div className="flex items-center justify-between">
          <span className="text-lg font-bold text-[#2A9D8F]">
            {service.price}
          </span>
          {service.reviews && (
            <span className="text-xs text-gray-500">
              ({service.reviews} đánh giá)
            </span>
          )}
        </div>
        <Button
          variant="primary"
          size="sm"
          className="w-full mt-3 bg-[#2A9D8F] hover:bg-[#238276]"
        >
          Đặt ngay
        </Button>
      </div>
    </Card>
  );
};

export default HighestRating;

```

### Home\components\LatestServices.tsx
```tsx
// pages/Home/components/LatestServices.tsx
import React from "react";
import Card from "../../../components/ui/Card";
import Button from "../../../components/ui/Button";

interface Service {
  id: number;
  title: string;
  price: string;
  image: string;
  rating?: number;
  reviews?: number;
}

const latestServices: Service[] = [
  {
    id: 1,
    title: "Cắt tỉa lông",
    price: "200.000 đ",
    image: "/public/image/service1.jpg",
    rating: 4.8,
    reviews: 124,
  },
  {
    id: 2,
    title: "Cắt tỉa lông",
    price: "200.000 đ",
    image: "/public/image/service2.jpg",
    rating: 4.9,
    reviews: 89,
  },
  {
    id: 3,
    title: "Cắt tỉa lông",
    price: "200.000 đ",
    image: "/public/image/service3.jpg",
    rating: 4.7,
    reviews: 156,
  },
  {
    id: 4,
    title: "Cắt tỉa lông",
    price: "200.000 đ",
    image: "/public/image/service4.jpg",
    rating: 4.8,
    reviews: 203,
  },
  {
    id: 5,
    title: "Cắt tỉa lông",
    price: "200.000 đ",
    image: "/public/image/service5.jpg",
    rating: 4.9,
    reviews: 178,
  },
  {
    id: 6,
    title: "Cắt tỉa lông",
    price: "200.000 đ",
    image: "/public/image/service6.jpg",
    rating: 4.6,
    reviews: 92,
  },
];

const LatestServices: React.FC = () => {
  return (
    <section className="py-12 bg-gray-50">
      <div className="container mx-auto px-4">
        {/* Header */}
        <div className="text-center mb-8">
          <div className="relative pb-3 w-full">
            {/* Changed to full width and added padding bottom */}
            <h2 className="text-2xl md:text-3xl font-bold text-gray-900 mb-2">
              DỊCH VỤ MỚI NHẤT 📰
            </h2>
            <div className="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-400 h-3 bg-[#2A9D8F] rounded"></div>
          </div>
        </div>

        {/* Services Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-6">
          {latestServices.map((service) => (
            <ServiceCard key={service.id} service={service} />
          ))}
        </div>

        {/* View More Button */}
        <div className="text-center mt-8">
          <Button
            variant="outline"
            size="md"
            className="border-[#2A9D8F] text-[#2A9D8F] hover:bg-[#2A9D8F] hover:text-white"
          >
            Xem thêm dịch vụ
          </Button>
        </div>
      </div>
    </section>
  );
};

// Service Card Component
interface ServiceCardProps {
  service: Service;
}

const ServiceCard: React.FC<ServiceCardProps> = ({ service }) => {
  return (
    <Card className="overflow-hidden hover:shadow-lg transition-shadow duration-200 cursor-pointer group">
      {/* Image */}
      <div className="relative overflow-hidden">
        <img
          src={service.image}
          alt={service.title}
          className="w-full h-48 object-cover group-hover:scale-105 transition-transform duration-200"
          onError={(e) => {
            // Fallback image
            (e.target as HTMLImageElement).src =
              "https://i.pinimg.com/736x/38/f4/f2/38f4f2d8652c7aa795f5e3ee75b5919c.jpg";
          }}
        />
        {service.rating && (
          <div className="absolute top-2 right-2 bg-white/90 backdrop-blur-sm px-2 py-1 rounded-full flex items-center gap-1">
            <span className="text-yellow-500 text-sm">⭐</span>
            <span className="text-xs font-medium">{service.rating}</span>
          </div>
        )}
      </div>

      {/* Content */}
      <div className="p-4">
        <h3 className="font-semibold text-gray-900 mb-2 group-hover:text-[#2A9D8F] transition-colors duration-200">
          {service.title}
        </h3>
        <div className="flex items-center justify-between">
          <span className="text-lg font-bold text-[#2A9D8F]">
            {service.price}
          </span>
          {service.reviews && (
            <span className="text-xs text-gray-500">
              ({service.reviews} đánh giá)
            </span>
          )}
        </div>
        <Button
          variant="primary"
          size="sm"
          className="w-full mt-3 bg-[#2A9D8F] hover:bg-[#238276]"
        >
          Đặt ngay
        </Button>
      </div>
    </Card>
  );
};

export default LatestServices;

```

### Home\components\MostBuy.tsx
```tsx
// pages/Home/components/LatestServices.tsx
import React from "react";
import Card from "../../../components/ui/Card";
import Button from "../../../components/ui/Button";

interface Service {
  id: number;
  title: string;
  price: string;
  image: string;
  rating?: number;
  reviews?: number;
}

const mostBuy: Service[] = [
  {
    id: 1,
    title: "Cắt tỉa lông",
    price: "200.000 đ",
    image: "/public/image/service1.jpg",
    rating: 4.8,
    reviews: 124,
  },
  {
    id: 2,
    title: "Cắt tỉa lông",
    price: "200.000 đ",
    image: "/public/image/service2.jpg",
    rating: 4.9,
    reviews: 89,
  },
  {
    id: 3,
    title: "Cắt tỉa lông",
    price: "200.000 đ",
    image: "/public/image/service3.jpg",
    rating: 4.7,
    reviews: 156,
  },
  {
    id: 4,
    title: "Cắt tỉa lông",
    price: "200.000 đ",
    image: "/public/image/service4.jpg",
    rating: 4.8,
    reviews: 203,
  },
  {
    id: 5,
    title: "Cắt tỉa lông",
    price: "200.000 đ",
    image: "/public/image/service5.jpg",
    rating: 4.9,
    reviews: 178,
  },
  {
    id: 6,
    title: "Cắt tỉa lông",
    price: "200.000 đ",
    image: "/public/image/service6.jpg",
    rating: 4.6,
    reviews: 92,
  },
];

const MostBuy: React.FC = () => {
  return (
    <section className="py-12 bg-gray-50">
      <div className="container mx-auto px-4">
        {/* Header */}
        <div className="text-center mb-8">
          <div className="relative pb-3 w-full">
            {" "}
            {/* Changed to full width and added padding bottom */}
            <h2 className="text-2xl md:text-3xl font-bold text-gray-900 mb-2">
              LƯỢT ĐẶT NHIỀU NHẤT 👍
            </h2>
            <div className="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-400 h-3 bg-[#2A9D8F] rounded"></div>
          </div>
        </div>

        {/* Services Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-6">
          {mostBuy.map((service) => (
            <ServiceCard key={service.id} service={service} />
          ))}
        </div>

        {/* View More Button */}
        <div className="text-center mt-8">
          <Button
            variant="outline"
            size="md"
            className="border-[#2A9D8F] text-[#2A9D8F] hover:bg-[#2A9D8F] hover:text-white"
          >
            Xem thêm dịch vụ
          </Button>
        </div>
      </div>
    </section>
  );
};

// Service Card Component
interface ServiceCardProps {
  service: Service;
}

const ServiceCard: React.FC<ServiceCardProps> = ({ service }) => {
  return (
    <Card className="overflow-hidden hover:shadow-lg transition-shadow duration-200 cursor-pointer group">
      {/* Image */}
      <div className="relative overflow-hidden">
        <img
          src={service.image}
          alt={service.title}
          className="w-full h-48 object-cover group-hover:scale-105 transition-transform duration-200"
          onError={(e) => {
            // Fallback image
            (e.target as HTMLImageElement).src =
              "https://i.pinimg.com/736x/c3/4c/dc/c34cdcf73b7bea6856f82d93c200f874.jpg";
          }}
        />
        {service.rating && (
          <div className="absolute top-2 right-2 bg-white/90 backdrop-blur-sm px-2 py-1 rounded-full flex items-center gap-1">
            <span className="text-yellow-500 text-sm">⭐</span>
            <span className="text-xs font-medium">{service.rating}</span>
          </div>
        )}
      </div>

      {/* Content */}
      <div className="p-4">
        <h3 className="font-semibold text-gray-900 mb-2 group-hover:text-[#2A9D8F] transition-colors duration-200">
          {service.title}
        </h3>
        <div className="flex items-center justify-between">
          <span className="text-lg font-bold text-[#2A9D8F]">
            {service.price}
          </span>
          {service.reviews && (
            <span className="text-xs text-gray-500">
              ({service.reviews} đánh giá)
            </span>
          )}
        </div>
        <Button
          variant="primary"
          size="sm"
          className="w-full mt-3 bg-[#2A9D8F] hover:bg-[#238276]"
        >
          Đặt ngay
        </Button>
      </div>
    </Card>
  );
};

export default MostBuy;

```

### Home\components\ServiceCard.tsx
```tsx
// pages/Home/components/ServiceCard.tsx
import React from "react";
import Card from "../../../components/ui/Card";
import Button from "../../../components/ui/Button";
import { Link } from "react-router-dom";

interface Service {
  id: number;
  title: string;
  price: string;
  image: string;
  rating?: number;
  reviews?: number;
  description?: string;
}

interface ServiceCardProps {
  service: Service;
  className?: string;
}

const ServiceCard: React.FC<ServiceCardProps> = ({
  service,
  className = "",
}) => {
  return (
    <Card
      className={`overflow-hidden hover:shadow-lg transition-shadow duration-200 cursor-pointer group ${className}`}
    >
      {/* Image Container */}
      <div className="relative overflow-hidden">
        <img
          src={service.image}
          alt={service.title}
          className="w-full h-48 object-cover group-hover:scale-105 transition-transform duration-200"
          onError={(e) => {
            // Fallback image nếu không load được
            (e.target as HTMLImageElement).src =
              "hhttps://i.pinimg.com/736x/38/f4/f2/38f4f2d8652c7aa795f5e3ee75b5919c.jpg";
          }}
        />

        {/* Rating Badge */}
        {service.rating && (
          <div className="absolute top-2 right-2 bg-white/90 backdrop-blur-sm px-2 py-1 rounded-full flex items-center gap-1">
            <span className="text-yellow-500 text-sm">⭐</span>
            <span className="text-xs font-medium">{service.rating}</span>
          </div>
        )}

        {/* Overlay khi hover */}
        <div className="absolute inset-0 bg-black/0 group-hover:bg-black/10 transition-colors duration-200"></div>
      </div>

      {/* Content */}
      <div className="p-4">
        <h3 className="font-semibold text-gray-900 mb-2 group-hover:text-[#2A9D8F] transition-colors duration-200 line-clamp-2">
          {service.title}
        </h3>

        {service.description && (
          <p className="text-sm text-gray-600 mb-3 line-clamp-2">
            {service.description}
          </p>
        )}

        {/* Price and Reviews */}
        <div className="flex items-center justify-between mb-3">
          <span className="text-lg font-bold text-[#2A9D8F]">
            {service.price}
          </span>
          {service.reviews && (
            <span className="text-xs text-gray-500">
              ({service.reviews} đánh giá)
            </span>
          )}
        </div>

        {/* Action Buttons */}
        <div className="flex gap-2">
          <Button
            variant="primary"
            size="sm"
            className="flex-1 bg-[#2A9D8F] hover:bg-[#238276]"
            onClick={() => console.log("Đặt dịch vụ:", service.id)}
          >
            Đặt ngay
          </Button>
          <Link to={`/service/${service.id}`}>
            <Button
              variant="outline"
              size="sm"
              className="border-[#2A9D8F] text-[#2A9D8F] hover:bg-[#2A9D8F] hover:text-white"
            >
              Chi tiết
            </Button>
          </Link>
        </div>
      </div>
    </Card>
  );
};

export default ServiceCard;

```

### Home\components\ServiceCategories.tsx
```tsx
// pages/Home/components/ServiceCategories.tsx
import React from "react";
import ComponentCard from "../../../components/common/ComponentCard";

interface ServiceCategory {
  id: number;
  name: string;
  icon: string;
  description?: string;
}

const serviceCategories: ServiceCategory[] = [
  { id: 1, name: "Massage", icon: "💆" },
  { id: 2, name: "Grooming", icon: "✂️" },
  { id: 3, name: "Lưu trú", icon: "🏠" },
  { id: 4, name: "Dịch vụ thú y", icon: "🏥" },
  { id: 5, name: "Huấn luyện", icon: "🎯" },
  { id: 6, name: "Chụp ảnh", icon: "📸" },
  { id: 7, name: "Tổ chức tiệc", icon: "🎉" },
  { id: 8, name: "Chăm sóc đặc biệt", icon: "⭐" },
];

const ServiceCategories: React.FC = () => {
  return (
    <section className="py-12 bg-white">
      <div className="container mx-auto px-4">
        <ComponentCard
          title="Danh mục dịch vụ"
          className="border-0 shadow-none bg-transparent"
        >
          <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-8 gap-4">
            {serviceCategories.map((category) => (
              <div
                key={category.id}
                className="flex flex-col items-center p-4 rounded-lg border border-gray-200 hover:border-[#2A9D8F] hover:shadow-md transition-all duration-200 cursor-pointer group"
              >
                <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center text-2xl mb-3 group-hover:bg-[#2A9D8F]/10 transition-colors duration-200">
                  {category.icon}
                </div>
                <span className="text-sm font-medium text-gray-700 text-center group-hover:text-[#2A9D8F] transition-colors duration-200">
                  {category.name}
                </span>
              </div>
            ))}
          </div>
        </ComponentCard>
      </div>
    </section>
  );
};

export default ServiceCategories;

```

### Login\index.tsx
```tsx
// src/pages/Login/index.tsx
import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { FiEye, FiEyeOff } from "react-icons/fi";
import { useLoginForm } from "./hooks/useLoginForm";
import ForgotPassword from "./components/ForgotPassword";

export default function LoginPage() {
  const navigate = useNavigate();
  const [showForgotPassword, setShowForgotPassword] = useState(false);

  const {
    formData,
    formErrors,
    showPassword,
    loading,
    error,
    isAuthenticated,
    handleInputChange,
    handleSubmit,
    setShowPassword,
  } = useLoginForm();

  useEffect(() => {
    if (isAuthenticated) {
      navigate("/", { replace: true });
    }
  }, [isAuthenticated, navigate]);

  return (
    <>
      <div className="flex h-screen relative">
        <button
          onClick={() => navigate("/")}
          className="absolute top-6 right-6 p-2 rounded hover:bg-gray-200"
          aria-label="Trang chủ"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className="h-6 w-6 text-[#2A9D8F]"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
            strokeWidth={2}
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              d="M3 9.75L12 3l9 6.75v10.5a.75.75 0 01-.75.75h-5.25a.75.75 0 01-.75-.75v-5.25H9v5.25a.75.75 0 01-.75.75H3.75a.75.75 0 01-.75-.75V9.75z"
            />
          </svg>
        </button>

        <div className="w-1/2 flex items-center justify-center bg-white">
          <div className="w-full max-w-md p-8 shadow-lg rounded-xl border">
            <h2 className="text-2xl font-bold text-center mb-6">Đăng nhập</h2>
            <p className="text-center text-gray-600 mb-6">
              Chào mừng bạn trở lại!
            </p>

            {error && (
              <div className="mb-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded">
                {error.message}
              </div>
            )}

            <form onSubmit={handleSubmit} className="space-y-4">
              <div>
                <input
                  type="text"
                  placeholder="Tên đăng nhập"
                  className={`w-full px-4 py-3 border rounded-md ${
                    formErrors.username ? "border-red-500" : "border-gray-300"
                  }`}
                  value={formData.username}
                  onChange={(e) =>
                    handleInputChange("username", e.target.value)
                  }
                  disabled={loading}
                />
                {formErrors.username && (
                  <p className="text-red-500 text-sm mt-1">
                    {formErrors.username}
                  </p>
                )}
              </div>

              <div>
                <div className="relative">
                  <input
                    type={showPassword ? "text" : "password"}
                    placeholder="Mật khẩu"
                    className={`w-full px-4 py-3 border rounded-md ${
                      formErrors.password ? "border-red-500" : "border-gray-300"
                    }`}
                    value={formData.password}
                    onChange={(e) =>
                      handleInputChange("password", e.target.value)
                    }
                    disabled={loading}
                  />
                  <span
                    className="absolute right-4 top-3 cursor-pointer text-gray-600"
                    onClick={() => setShowPassword(!showPassword)}
                  >
                    {showPassword ? (
                      <FiEyeOff size={20} />
                    ) : (
                      <FiEye size={20} />
                    )}
                  </span>
                </div>
                {formErrors.password && (
                  <p className="text-red-500 text-sm mt-1">
                    {formErrors.password}
                  </p>
                )}
              </div>

              <div className="flex items-center justify-between text-sm">
                <label className="flex items-center gap-2">
                  <input
                    type="checkbox"
                    className="accent-blue-600"
                    checked={formData.rememberMe}
                    onChange={(e) =>
                      handleInputChange("rememberMe", e.target.checked)
                    }
                    disabled={loading}
                  />
                  Ghi nhớ mật khẩu?
                </label>
                <button
                  type="button"
                  className="text-[#2A9D8F] hover:underline"
                  onClick={() => setShowForgotPassword(true)}
                >
                  Quên mật khẩu?
                </button>
              </div>

              <button
                type="submit"
                disabled={loading}
                className={`w-full py-3 text-white rounded-md transition ${
                  loading
                    ? "bg-gray-400 cursor-not-allowed"
                    : "bg-[#2A9D8F] hover:bg-[#228B7E]"
                }`}
              >
                {loading ? "Đang đăng nhập..." : "Đăng nhập"}
              </button>

              <p className="text-center text-sm mt-4">
                Chưa có tài khoản?{" "}
                <button
                  type="button"
                  onClick={() => navigate("/registertype")}
                  className="text-[#2A9D8F] font-medium hover:underline"
                >
                  Đăng ký ngay!
                </button>
              </p>
            </form>
          </div>
        </div>

        <div className="w-1/2 bg-[#E7F3F5] flex flex-col justify-center items-center">
          <div className="w-full max-w-4xl mx-auto p-4 md:p-6 lg:p-8 rounded-lg fixed-size">
            <img
              src="/public/image/ranbowlogo.png"
              alt="Logo"
              className="w-full h-auto object-contain max-w-full"
              style={{
                maxWidth: "100%",
                width: "auto",
                height: "auto",
                objectFit: "contain",
                userSelect: "none",
                transform: "scale(1)",
                transformOrigin: "center center",
              }}
            />
          </div>
        </div>
      </div>

      {showForgotPassword && (
        <div className="fixed inset-0 bg-black/30 backdrop-blur-sm flex justify-center items-center z-50">
          <ForgotPassword onClose={() => setShowForgotPassword(false)} />
        </div>
      )}
    </>
  );
}

```

### Login\components\AuthWrapper.tsx
```tsx
// src/components/AuthWrapper.tsx
import { useEffect } from "react";
import { useDispatch } from "react-redux";
import { restoreAuth } from "../../../store/slices/authSlice";
import type { AppDispatch } from "../../../store/store";

interface AuthWrapperProps {
  children: React.ReactNode;
}

export const AuthWrapper: React.FC<AuthWrapperProps> = ({ children }) => {
  const dispatch = useDispatch<AppDispatch>();

  useEffect(() => {
    dispatch(restoreAuth());
  }, [dispatch]);

  return <>{children}</>;
};

```

### Login\components\EnterOTPCode.tsx
```tsx
import React, { useEffect, useRef, useState } from "react";

interface EnterOTPCodeProps {
  onClose: () => void;
}

const EnterOTPCode: React.FC<EnterOTPCodeProps> = ({ onClose }) => {
  const [otp, setOtp] = useState<string[]>(["", "", "", "", ""]);
  const [countdown, setCountdown] = useState(56);
  const inputRefs = useRef<(HTMLInputElement | null)[]>([]);

  // Countdown timer
  useEffect(() => {
    if (countdown > 0) {
      const timer = setTimeout(() => setCountdown(countdown - 1), 1000);
      return () => clearTimeout(timer);
    }
  }, [countdown]);

  // Xử lý thay đổi input OTP
  const handleOtpChange = (index: number, value: string) => {
    // Chỉ cho phép nhập số
    if (!/^\d*$/.test(value)) return;

    const newOtp = [...otp];
    newOtp[index] = value;
    setOtp(newOtp);

    // Tự động chuyển sang ô tiếp theo
    if (value && index < 4) {
      inputRefs.current[index + 1]?.focus();
    }
  };

  // Xử lý phím Backspace
  const handleKeyDown = (index: number, e: React.KeyboardEvent) => {
    if (e.key === "Backspace" && !otp[index] && index > 0) {
      inputRefs.current[index - 1]?.focus();
    }
  };

  // Xử lý paste
  const handlePaste = (e: React.ClipboardEvent) => {
    e.preventDefault();
    const pastedData = e.clipboardData.getData("text").slice(0, 5);
    const newOtp = pastedData.split("").concat(Array(5).fill("")).slice(0, 5);
    setOtp(newOtp);

    // Focus vào ô cuối cùng có dữ liệu
    const lastFilledIndex = Math.min(pastedData.length - 1, 4);
    inputRefs.current[lastFilledIndex]?.focus();
  };

  // Xử lý submit
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    const otpCode = otp.join("");

    if (otpCode.length !== 5) {
      alert("Vui lòng nhập đầy đủ mã OTP!");
      return;
    }

    // TODO: Xử lý xác thực OTP
    alert(`Mã OTP đã nhập: ${otpCode}`);
    onClose();
  };

  // Gửi lại mã OTP
  const handleResendOTP = () => {
    setCountdown(56);
    setOtp(["", "", "", "", ""]);
    inputRefs.current[0]?.focus();
    // TODO: Gọi API gửi lại OTP
    alert("Đã gửi lại mã OTP!");
  };

  // Format thời gian countdown
  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, "0")}:${secs
      .toString()
      .padStart(2, "0")}`;
  };

  return (
    <div className="bg-white rounded-lg shadow-lg p-6 w-[400px] relative">
      {/* Nút đóng popup */}
      <button
        onClick={onClose}
        className="absolute top-4 right-4 text-gray-600 hover:text-gray-900 font-bold text-xl"
        aria-label="Đóng"
      >
        ✕
      </button>

      <h3 className="text-xl font-semibold mb-2 text-center">Quên mật khẩu</h3>

      <p className="text-sm text-gray-600 mb-6 text-center">Nhập mã OTP</p>

      <form onSubmit={handleSubmit} className="space-y-6">
        {/* 5 ô nhập OTP */}
        <div className="flex justify-center space-x-3">
          {otp.map((digit, index) => (
            <input
              key={index}
              ref={(el) => (inputRefs.current[index] = el)}
              type="text"
              maxLength={1}
              value={digit}
              onChange={(e) => handleOtpChange(index, e.target.value)}
              onKeyDown={(e) => handleKeyDown(index, e)}
              onPaste={index === 0 ? handlePaste : undefined}
              className="w-12 h-12 text-center text-lg font-semibold border-2 border-gray-300 rounded-lg focus:border-[#2A9D8F] focus:outline-none transition-colors"
              autoComplete="off"
            />
          ))}
        </div>

        {/* Nút xác nhận */}
        <button
          type="submit"
          className="w-full py-3 bg-[#2A9D8F] text-white rounded-lg hover:bg-[#228B7E] transition-colors font-medium"
        >
          Xác nhận
        </button>

        {/* Gửi lại mã OTP */}
        <div className="text-center">
          {countdown > 0 ? (
            <p className="text-sm text-gray-600">
              Gửi lại mã sau ({formatTime(countdown)})
            </p>
          ) : (
            <button
              type="button"
              onClick={handleResendOTP}
              className="text-sm text-[#2A9D8F] hover:underline font-medium"
            >
              Gửi lại mã OTP
            </button>
          )}
        </div>
      </form>
    </div>
  );
};

export default EnterOTPCode;

```

### Login\components\ForgotPassword.tsx
```tsx
import React, { useState } from "react";
import EnterOTPCode from "./EnterOTPCode";

interface ForgotPasswordProps {
  onClose: () => void;
}

const ForgotPassword: React.FC<ForgotPasswordProps> = ({ onClose }) => {
  const [email, setEmail] = useState("");
  const [enterOtpCode, setEnterOtpCode] = useState(false);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();

    // Kiểm tra email có hợp lệ không
    if (!email.trim()) {
      alert("Vui lòng nhập email!");
      return;
    }

    // TODO: Xử lý gửi email khôi phục mật khẩu ở đây
    // Giả sử API call thành công

    // Hiển thị modal EnterOTPCode thay vì đóng modal hiện tại
    setEnterOtpCode(true);

    // Không gọi onClose() ở đây nữa
    // onClose(); // ← Xóa dòng này
  };

  return (
    <>
      <div className="bg-white rounded-lg shadow-lg p-6 w-[400px] relative">
        {/* Nút đóng popup */}
        <button
          onClick={onClose}
          className="absolute top-4 right-4 text-gray-600 hover:text-gray-900 font-bold"
          aria-label="Đóng"
        >
          ✕
        </button>

        <h3 className="text-xl font-semibold mb-4 text-center">
          Quên mật khẩu
        </h3>
        <p className="text-x2 text-[#323333] mb-4 text-center">
          Vui lòng nhập email của bạn
        </p>

        <form onSubmit={handleSubmit} className="space-y-4">
          {/* Trường nhập email */}
          <div className="relative">
            <input
              type="email"
              placeholder="Email của bạn"
              className="w-full px-4 py-2 border rounded-md"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
          </div>

          {/* Nút submit */}
          <button
            type="submit"
            className="w-full py-3 bg-[#2A9D8F] text-white rounded-md hover:bg-[#228B7E] transition"
          >
            Gửi mã OTP
          </button>
        </form>
      </div>

      {/* Modal nhập mã OTP */}
      {enterOtpCode && (
        <div className="fixed inset-0 bg-black/30 backdrop-blur-sm flex justify-center items-center z-50">
          <EnterOTPCode
            onClose={() => {
              setEnterOtpCode(false);
              onClose(); // Đóng cả modal ForgotPassword khi đóng EnterOTPCode
            }}
          />
        </div>
      )}
    </>
  );
};

export default ForgotPassword;

```

### Login\components\LoginForm.tsx
```tsx

```

### Login\components\SocialLogin.tsx
```tsx

```

### Login\hooks\useLoginForm.ts
```ts
// src/pages/Login/hooks/useLoginForm.ts
import { useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { useNavigate, useLocation } from "react-router-dom";
import { Login, LoginNoRemember } from "../../../store/slices/authSlice";
import type { RootState, AppDispatch } from "../../../store/store";

interface LoginFormData {
  username: string;
  password: string;
  rememberMe: boolean;
}

interface FormErrors {
  username?: string;
  password?: string;
}

export const useLoginForm = () => {
  const dispatch = useDispatch<AppDispatch>();
  const navigate = useNavigate();
  const location = useLocation();

  const { loading, error, isAuthenticated, user } = useSelector(
    (state: RootState) => state.auth
  );

  const [formData, setFormData] = useState<LoginFormData>({
    username: "",
    password: "",
    rememberMe: false,
  });
  const [formErrors, setFormErrors] = useState<FormErrors>({});
  const [showPassword, setShowPassword] = useState(false);

  const handleInputChange = (
    field: keyof LoginFormData,
    value: string | boolean
  ) => {
    setFormData((prev) => ({ ...prev, [field]: value }));

    if (field in formErrors && formErrors[field as keyof FormErrors]) {
      setFormErrors((prev: FormErrors) => ({ ...prev, [field]: undefined }));
    }
  };

  const validateForm = () => {
    const errors: FormErrors = {};

    if (!formData.username) {
      errors.username = "Tên đăng nhập không được để trống";
    } else if (formData.username.length < 3) {
      errors.username = "Tên đăng nhập phải có ít nhất 3 ký tự";
    }

    if (!formData.password) {
      errors.password = "Mật khẩu không được để trống";
    } else if (formData.password.length < 6) {
      errors.password = "Mật khẩu phải có ít nhất 6 ký tự";
    }

    return errors;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    const errors = validateForm();
    if (Object.keys(errors).length > 0) {
      setFormErrors(errors);
      return;
    }

    try {
      const loginAction = formData.rememberMe ? Login : LoginNoRemember;

      await dispatch(
        loginAction({
          username: formData.username,
          password: formData.password,
        })
      ).unwrap();

      const from = (location.state as any)?.from?.pathname || "/dashboard";
      navigate(from, { replace: true });
    } catch (error: any) {
      console.error("Login failed:", error);
    }
  };

  return {
    formData,
    formErrors,
    showPassword,
    loading,
    error,
    isAuthenticated,
    user,
    handleInputChange,
    handleSubmit,
    setShowPassword,
  };
};

```

### Login\utils\loginValidation.ts
```ts
// utils/loginValidation.ts
interface LoginFormData {
  username: string; // ✅ Đổi từ email sang username
  password: string;
}

interface LoginFormErrors {
  username?: string; // ✅ Đổi từ email sang username
  password?: string;
}

export const validateLogin = (data: LoginFormData): LoginFormErrors => {
  const errors: LoginFormErrors = {};

  // ✅ Validate username thay vì email
  if (!data.username) {
    errors.username = "Tên đăng nhập không được để trống";
  } else if (data.username.length < 3) {
    errors.username = "Tên đăng nhập phải có ít nhất 3 ký tự";
  }

  // Validate password
  if (!data.password) {
    errors.password = "Mật khẩu không được để trống";
  } else if (data.password.length < 6) {
    errors.password = "Mật khẩu phải có ít nhất 6 ký tự";
  }

  return errors;
};

```

### NotFound\index.tsx
```tsx
import React from "react";
import { Link } from "react-router-dom";
import Button from "../../components/ui/Button";

const NotFound: React.FC = () => {
  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50">
      <div className="max-w-md w-full text-center">
        <div className="text-9xl font-bold text-blue-600">404</div>
        <h1 className="text-2xl font-bold text-gray-900 mt-4">
          Trang không tìm thấy
        </h1>
        <p className="text-gray-600 mt-2">
          Trang bạn đang tìm kiếm không tồn tại.
        </p>
        <div className="mt-6">
          <Link to="/">
            <Button variant="primary">Về trang chủ</Button>
          </Link>
        </div>
      </div>
    </div>
  );
};

export default NotFound;

```

### Profile\index.tsx
```tsx

```

### Register\index.tsx
```tsx
// File: src/pages/RegisterPage.tsx
import { useState } from "react";
import {
  Eye,
  EyeOff,
  User,
  Mail,
  Home,
  Calendar,
  ChevronDown,
} from "lucide-react";
import { useNavigate } from "react-router-dom";

export default function RegisterPage() {
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);

  const [username, setUsername] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [fullName, setFullName] = useState("");
  const [birthDate, setBirthDate] = useState("");
  const [gender, setGender] = useState("");
  const [errors, setErrors] = useState({
    username: "",
    email: "",
    password: "",
    confirmPassword: "",
    fullName: "",
    birthDate: "",
    gender: "",
  });

  const navigate = useNavigate();

  const validateEmail = (email: string) => {
    return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
  };

  const validatePassword = (password: string) => {
    return /^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{6,}$/.test(password);
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    const newErrors = {
      username: "",
      email: "",
      password: "",
      confirmPassword: "",
      fullName: "",
      birthDate: "",
      gender: "",
    };
    let valid = true;

    if (!username.trim()) {
      newErrors.username = "Tên người dùng không được để trống";
      valid = false;
    }
    if (!validateEmail(email)) {
      newErrors.email = "Email không hợp lệ";
      valid = false;
    }
    if (!validatePassword(password)) {
      newErrors.password = "Mật khẩu phải từ 6 ký tự, gồm chữ và số";
      valid = false;
    }
    if (password !== confirmPassword) {
      newErrors.confirmPassword = "Mật khẩu xác nhận không khớp";
      valid = false;
    }

    setErrors(newErrors);

    if (valid) {
      alert("Đăng ký thành công!");
      // TODO: gửi dữ liệu tới server tại đây
    }
  };

  return (
    <div className="min-h-screen flex bg-white relative">
      {/* Icon quay về trang homepage */}
      <button
        onClick={() => navigate("/")}
        className="absolute top-4 right-4 text-[#2A9D8F] hover:text-[#2A9D8F]"
        title="Quay lại trang chính"
      >
        <Home className="w-6 h-6" />
      </button>

      {/* Bên phải: Form đăng ký */}
      <div className="w-full md:w-1/2 flex items-center justify-center p-8">
        <div className="w-full max-w-sm bg-white p-8 rounded-xl shadow-lg border">
          <h2 className="text-2xl font-bold mb-2 text-center">Đăng ký</h2>
          <p className="text-sm text-gray-600 mb-6 text-center">
            Tạo tài khoản mới để bắt đầu
          </p>

          <form className="space-y-4" onSubmit={handleSubmit}>
            {/* Ô nhập tên người dùng */}
            <div className="relative">
              <input
                type="text"
                value={fullName}
                onChange={(e) => setFullName(e.target.value)}
                placeholder="Họ và tên"
                className="w-full px-4 py-2 border rounded pr-10 focus:outline-none focus:ring-2 focus:ring-blue-400"
              />
              <User className="absolute top-2.5 right-3 w-5 h-5 text-gray-400" />
              {errors.fullName && (
                <p className="text-red-500 text-sm mt-1">{errors.fullName}</p>
              )}
            </div>

            {/* Ô nhập ngày sinh */}
            <div className="relative">
              <input
                type="date"
                value={birthDate}
                onChange={(e) => setBirthDate(e.target.value)}
                placeholder="Ngày sinh"
                className="w-full px-4 py-2 border rounded pr-10 focus:outline-none focus:ring-2 focus:ring-blue-400"
              />
              <Calendar className="absolute top-2.5 right-3 w-5 h-5 text-gray-400" />
              {errors.birthDate && (
                <p className="text-red-500 text-sm mt-1">{errors.birthDate}</p>
              )}
            </div>

            {/* Ô nhập giới tính */}
            <div className="relative">
              <select
                value={gender}
                onChange={(e) => setGender(e.target.value)}
                className="w-full px-4 py-2 border rounded pr-10 focus:outline-none focus:ring-2 focus:ring-blue-400 appearance-none bg-white"
              >
                <option value="">Chọn giới tính</option>
                <option value="male">Nam</option>
                <option value="female">Nữ</option>
                <option value="other">Khác</option>
              </select>
              <ChevronDown className="absolute top-2.5 right-3 w-5 h-5 text-gray-400 pointer-events-none" />
              {errors.gender && (
                <p className="text-red-500 text-sm mt-1">{errors.gender}</p>
              )}
            </div>

            {/* Ô nhập username */}
            <div className="relative">
              <input
                type="text"
                value={username}
                onChange={(e) => setUsername(e.target.value)}
                placeholder="Tên người dùng"
                className="w-full px-4 py-2 border rounded pr-10 focus:outline-none focus:ring-2 focus:ring-blue-400"
              />
              <User className="absolute top-2.5 right-3 w-5 h-5 text-gray-400" />
              {errors.username && (
                <p className="text-red-500 text-sm mt-1">{errors.username}</p>
              )}
            </div>

            {/* Ô nhập email */}
            <div className="relative">
              <input
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                placeholder="Email"
                className="w-full px-4 py-2 border rounded pr-10 focus:outline-none focus:ring-2 focus:ring-blue-400"
              />
              <Mail className="absolute top-2.5 right-3 w-5 h-5 text-gray-400" />
              {errors.email && (
                <p className="text-red-500 text-sm mt-1">{errors.email}</p>
              )}
            </div>

            {/* Ô nhập mật khẩu */}
            <div className="relative">
              <input
                type={showPassword ? "text" : "password"}
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                placeholder="Mật khẩu"
                className="w-full px-4 py-2 border rounded pr-10 focus:outline-none focus:ring-2 focus:ring-blue-400"
              />
              <div
                onClick={() => setShowPassword(!showPassword)}
                className="absolute top-2.5 right-3 cursor-pointer text-gray-500"
              >
                {showPassword ? (
                  <EyeOff className="w-5 h-5" />
                ) : (
                  <Eye className="w-5 h-5" />
                )}
              </div>
              {errors.password && (
                <p className="text-red-500 text-sm mt-1">{errors.password}</p>
              )}
            </div>

            {/* Ô nhập xác nhận mật khẩu */}
            <div className="relative">
              <input
                type={showConfirmPassword ? "text" : "password"}
                value={confirmPassword}
                onChange={(e) => setConfirmPassword(e.target.value)}
                placeholder="Nhập lại mật khẩu"
                className="w-full px-4 py-2 border rounded pr-10 focus:outline-none focus:ring-2 focus:ring-blue-400"
              />
              <div
                onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                className="absolute top-2.5 right-3 cursor-pointer text-gray-500"
              >
                {showConfirmPassword ? (
                  <EyeOff className="w-5 h-5" />
                ) : (
                  <Eye className="w-5 h-5" />
                )}
              </div>
              {errors.confirmPassword && (
                <p className="text-red-500 text-sm mt-1">
                  {errors.confirmPassword}
                </p>
              )}
            </div>

            {/* Nút đăng ký */}
            <button
              type="submit"
              className="w-full bg-[#2A9D8F] text-white py-2 rounded hover:bg-[#228B7E] transition"
            >
              Đăng ký
            </button>
          </form>

          <p className="text-sm text-center mt-4">
            Đã có tài khoản?{" "}
            <a
              href="/login"
              className="text-[#2A9D8F] font-semibold hover:underline"
            >
              Đăng nhập ngay!
            </a>
          </p>
        </div>
      </div>

      {/* Bên trái: Logo + mô tả */}
      <div className="w-1/2 bg-[#E7F3F5] flex flex-col justify-center items-center">
        <div className="w-full max-w-4xl mx-auto p-4 md:p-6 lg:p-8 rounded-lg fixed-size">
          <img
            src="/public/image/ranbowlogo.png"
            alt="Logo"
            className="w-full h-auto object-contain max-w-full"
            style={{
              maxWidth: "100%",
              width: "auto",
              height: "auto",
              objectFit: "contain",
              userSelect: "none", // Không cho phép chọn
              transform: "scale(1)",
              transformOrigin: "center center",
            }}
          />
        </div>
      </div>
    </div>
  );
}

```

### RegisterShop\index.tsx
```tsx
// File: src/pages/RegisterPage.tsx (thêm vào form đăng ký)
import { useState } from "react";
import {
  User,
  Home,
  Store,
  Mail,
  Lock,
  Phone,
  MapPin,
  Building,
  Briefcase,
  Clock,
  ChevronDown,
} from "lucide-react";
import { useNavigate } from "react-router-dom";

export default function RegisterPage() {
  const navigate = useNavigate();

  interface FormData {
    businessName: string;
    businessAddress: string;
    phoneNumber: string;
    email: string;
    password: string;
    confirmPassword: string;
    businessFields: string[]; // Thay vì never[]
    representativeName: string;
    workScheduleType: string;
    allWeekHours: {
      startTime: string;
      endTime: string;
    };
    customSchedule: {
      monday: { isWorking: boolean; startTime: string; endTime: string };
      tuesday: { isWorking: boolean; startTime: string; endTime: string };
      wednesday: { isWorking: boolean; startTime: string; endTime: string };
      thursday: { isWorking: boolean; startTime: string; endTime: string };
      friday: { isWorking: boolean; startTime: string; endTime: string };
      saturday: { isWorking: boolean; startTime: string; endTime: string };
      sunday: { isWorking: boolean; startTime: string; endTime: string };
    };
  }

  type DayKey =
    | "monday"
    | "tuesday"
    | "wednesday"
    | "thursday"
    | "friday"
    | "saturday"
    | "sunday";

  // Sử dụng interface trong useState
  const [formData, setFormData] = useState<FormData>({
    businessName: "",
    businessAddress: "",
    phoneNumber: "",
    email: "",
    password: "",
    confirmPassword: "",
    businessFields: [] as string[], // Khởi tạo đúng kiểu
    representativeName: "",
    workScheduleType: "",
    allWeekHours: {
      startTime: "08:00",
      endTime: "17:00",
    },
    customSchedule: {
      monday: { isWorking: true, startTime: "08:00", endTime: "17:00" },
      tuesday: { isWorking: true, startTime: "08:00", endTime: "17:00" },
      wednesday: { isWorking: true, startTime: "08:00", endTime: "17:00" },
      thursday: { isWorking: true, startTime: "08:00", endTime: "17:00" },
      friday: { isWorking: true, startTime: "08:00", endTime: "17:00" },
      saturday: { isWorking: true, startTime: "08:00", endTime: "14:00" },
      sunday: { isWorking: false, startTime: "08:00", endTime: "17:00" },
    },
  });

  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  // const [errors, setErrors] = useState({});

  // Danh sách lĩnh vực kinh doanh
  const businessFieldOptions = [
    "Massage",
    "Grooming",
    "Lưu trú",
    "Dịch vụ thú y",
    "Huấn luyện",
    "Chụp ảnh",
    "Tổ chức tiệc",
    "Chăm sóc đặc biệt",
  ];

  // Danh sách các ngày trong tuần
  const daysOfWeek = [
    { key: "monday", label: "Thứ 2" },
    { key: "tuesday", label: "Thứ 3" },
    { key: "wednesday", label: "Thứ 4" },
    { key: "thursday", label: "Thứ 5" },
    { key: "friday", label: "Thứ 6" },
    { key: "saturday", label: "Thứ 7" },
    { key: "sunday", label: "Chủ nhật" },
  ];

  // Xử lý thay đổi checkbox cho lĩnh vực kinh doanh
  const handleBusinessFieldChange = (field: string) => {
    setFormData((prev) => ({
      ...prev,
      businessFields: prev.businessFields.includes(field)
        ? prev.businessFields.filter((f) => f !== field)
        : [...prev.businessFields, field],
    }));
  };

  // Xử lý thay đổi input thông thường
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  // Xử lý thay đổi loại lịch làm việc
  const handleWorkScheduleTypeChange = (e) => {
    setFormData((prev) => ({
      ...prev,
      workScheduleType: e.target.value,
    }));
  };

  // Xử lý thay đổi giờ làm việc toàn tuần
  const handleAllWeekHoursChange = (field, value) => {
    setFormData((prev) => ({
      ...prev,
      allWeekHours: {
        ...prev.allWeekHours,
        [field]: value,
      },
    }));
  };

  // Cập nhật function với đúng kiểu
  const handleCustomScheduleChange = (
    day: DayKey,
    field: "isWorking" | "startTime" | "endTime",
    value: boolean | string
  ) => {
    setFormData((prev) => ({
      ...prev,
      customSchedule: {
        ...prev.customSchedule,
        [day]: {
          ...prev.customSchedule[day],
          [field]: value,
        },
      },
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    console.log("Form data:", formData);
  };

  return (
    <div className="min-h-screen flex bg-white relative">
      {/* Icon quay về trang homepage */}
      <button
        onClick={() => navigate("/")}
        className="absolute top-4 right-4 text-[#2A9D8F] hover:text-[#228B7E] transition-colors duration-200 z-10"
        title="Quay lại trang chính"
      >
        <Home className="w-6 h-6" />
      </button>

      {/* Bên phải: Form đăng ký */}
      <div className="w-full md:w-1/2 flex items-center justify-center p-8 overflow-y-auto">
        <div className="w-full max-w-md bg-white p-8 rounded-xl shadow-lg border my-8">
          <h2 className="text-2xl font-bold mb-2 text-center">
            Đăng ký cửa hàng
          </h2>
          <p className="text-sm text-gray-600 mb-6 text-center">
            Điền thông tin để đăng ký tài khoản doanh nghiệp
          </p>

          <form className="space-y-4" onSubmit={handleSubmit}>
            {/* Tên doanh nghiệp/cửa hàng */}
            <div className="relative">
              <input
                type="text"
                name="businessName"
                value={formData.businessName}
                onChange={handleInputChange}
                placeholder="Tên doanh nghiệp/Tên cửa hàng"
                className="w-full px-4 py-3 border rounded-lg pr-10 focus:outline-none focus:ring-2 focus:ring-[#2A9D8F] focus:border-transparent"
                required
              />
              <Store className="absolute top-3.5 right-3 w-5 h-5 text-gray-400" />
            </div>

            {/* Địa chỉ doanh nghiệp */}
            <div className="relative">
              <textarea
                name="businessAddress"
                value={formData.businessAddress}
                onChange={handleInputChange}
                placeholder="Địa chỉ đầy đủ (số nhà, tên đường, phường/xã, quận/huyện, tỉnh/thành phố)"
                className="w-full px-4 py-3 border rounded-lg pr-10 focus:outline-none focus:ring-2 focus:ring-[#2A9D8F] focus:border-transparent resize-none"
                rows="3"
                required
              />
              <MapPin className="absolute top-3.5 right-3 w-5 h-5 text-gray-400" />
            </div>

            {/* Số điện thoại */}
            <div className="relative">
              <input
                type="tel"
                name="phoneNumber"
                value={formData.phoneNumber}
                onChange={handleInputChange}
                placeholder="Số điện thoại liên hệ chính"
                className="w-full px-4 py-3 border rounded-lg pr-10 focus:outline-none focus:ring-2 focus:ring-[#2A9D8F] focus:border-transparent"
                required
              />
              <Phone className="absolute top-3.5 right-3 w-5 h-5 text-gray-400" />
            </div>

            {/* Email */}
            <div className="relative">
              <input
                type="email"
                name="email"
                value={formData.email}
                onChange={handleInputChange}
                placeholder="Email liên hệ chính"
                className="w-full px-4 py-3 border rounded-lg pr-10 focus:outline-none focus:ring-2 focus:ring-[#2A9D8F] focus:border-transparent"
                required
              />
              <Mail className="absolute top-3.5 right-3 w-5 h-5 text-gray-400" />
            </div>

            {/* Mật khẩu */}
            <div className="relative">
              <input
                type={showPassword ? "text" : "password"}
                name="password"
                value={formData.password}
                onChange={handleInputChange}
                placeholder="Mật khẩu (ít nhất 8 ký tự)"
                className="w-full px-4 py-3 border rounded-lg pr-10 focus:outline-none focus:ring-2 focus:ring-[#2A9D8F] focus:border-transparent"
                required
                minLength="8"
              />
              <div
                onClick={() => setShowPassword(!showPassword)}
                className="absolute top-3.5 right-3 cursor-pointer text-gray-500"
              >
                <Lock className="w-5 h-5" />
              </div>
            </div>

            {/* Xác nhận mật khẩu */}
            <div className="relative">
              <input
                type={showConfirmPassword ? "text" : "password"}
                name="confirmPassword"
                value={formData.confirmPassword}
                onChange={handleInputChange}
                placeholder="Nhập lại mật khẩu"
                className="w-full px-4 py-3 border rounded-lg pr-10 focus:outline-none focus:ring-2 focus:ring-[#2A9D8F] focus:border-transparent"
                required
              />
              <div
                onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                className="absolute top-3.5 right-3 cursor-pointer text-gray-500"
              >
                <Lock className="w-5 h-5" />
              </div>
            </div>

            {/* Lĩnh vực kinh doanh */}
            <div className="space-y-3">
              <label className="flex items-center text-sm font-medium text-gray-700">
                <Briefcase className="w-4 h-4 mr-2" />
                Lĩnh vực kinh doanh (chọn nhiều):
              </label>
              <div className="grid grid-cols-2 gap-2 max-h-32 overflow-y-auto border rounded-lg p-3">
                {businessFieldOptions.map((field) => (
                  <label
                    key={field}
                    className="flex items-center space-x-2 text-sm"
                  >
                    <input
                      type="checkbox"
                      checked={formData.businessFields.includes(field)}
                      onChange={() => handleBusinessFieldChange(field)}
                      className="rounded border-gray-300 text-[#2A9D8F] focus:ring-[#2A9D8F]"
                    />
                    <span>{field}</span>
                  </label>
                ))}
              </div>
            </div>

            {/* Ngày làm việc */}
            <div className="space-y-4">
              <label className="flex items-center text-sm font-medium text-gray-700">
                <Clock className="w-4 h-4 mr-2" />
                Ngày làm việc:
              </label>

              {/* Dropdown chọn loại lịch */}
              <div className="relative">
                <select
                  value={formData.workScheduleType}
                  onChange={handleWorkScheduleTypeChange}
                  className="w-full px-4 py-3 border rounded-lg pr-10 focus:outline-none focus:ring-2 focus:ring-[#2A9D8F] focus:border-transparent appearance-none bg-white"
                  required
                >
                  <option value="">Chọn loại lịch làm việc</option>
                  <option value="all-week">Toàn bộ các ngày trong tuần</option>
                  <option value="custom">Tùy chỉnh</option>
                </select>
                <ChevronDown className="absolute top-3.5 right-3 w-5 h-5 text-gray-400 pointer-events-none" />
              </div>

              {/* Hiển thị component tương ứng */}
              {formData.workScheduleType === "all-week" && (
                <div className="border rounded-lg p-4 bg-gray-50">
                  <h4 className="text-sm font-medium text-gray-700 mb-3">
                    Giờ làm việc (áp dụng cho tất cả các ngày)
                  </h4>
                  <div className="flex items-center space-x-3">
                    <div className="flex-1">
                      <label className="block text-xs text-gray-600 mb-1">
                        Giờ bắt đầu
                      </label>
                      <input
                        type="time"
                        value={formData.allWeekHours.startTime}
                        onChange={(e) =>
                          handleAllWeekHoursChange("startTime", e.target.value)
                        }
                        className="w-full px-3 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-[#2A9D8F]"
                      />
                    </div>
                    <span className="text-gray-500 mt-6">-</span>
                    <div className="flex-1">
                      <label className="block text-xs text-gray-600 mb-1">
                        Giờ kết thúc
                      </label>
                      <input
                        type="time"
                        value={formData.allWeekHours.endTime}
                        onChange={(e) =>
                          handleAllWeekHoursChange("endTime", e.target.value)
                        }
                        className="w-full px-3 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-[#2A9D8F]"
                      />
                    </div>
                  </div>
                  <p className="text-xs text-gray-500 mt-2">
                    Ví dụ: 8:00 - 17:00. Muốn tùy chỉnh chi tiết hơn, hãy chọn
                    "Tùy chỉnh" ở trên.
                  </p>
                </div>
              )}

              {formData.workScheduleType === "custom" && (
                <div className="border rounded-lg p-4 bg-gray-50 space-y-3">
                  <h4 className="text-sm font-medium text-gray-700 mb-3">
                    Tùy chỉnh lịch làm việc theo từng ngày
                  </h4>
                  {daysOfWeek.map((day) => (
                    <div
                      key={day.key}
                      className="flex items-center space-x-3 p-3 bg-white rounded border"
                    >
                      <div className="w-20">
                        <span className="text-sm font-medium text-gray-700">
                          {day.label}
                        </span>
                      </div>

                      <div className="flex items-center space-x-2">
                        <input
                          type="checkbox"
                          checked={formData.customSchedule[day.key].isWorking}
                          onChange={(e) =>
                            handleCustomScheduleChange(
                              day.key,
                              "isWorking",
                              e.target.checked
                            )
                          }
                          className="rounded border-gray-300 text-[#2A9D8F] focus:ring-[#2A9D8F]"
                        />
                        <span className="text-xs text-gray-600">Làm việc</span>
                      </div>

                      {formData.customSchedule[day.key].isWorking && (
                        <>
                          <div className="flex-1">
                            <input
                              type="time"
                              value={formData.customSchedule[day.key].startTime}
                              onChange={(e) =>
                                handleCustomScheduleChange(
                                  day.key,
                                  "startTime",
                                  e.target.value
                                )
                              }
                              className="w-full px-2 py-1 border rounded text-sm focus:outline-none focus:ring-1 focus:ring-[#2A9D8F]"
                            />
                          </div>
                          <span className="text-gray-500 text-sm">-</span>
                          <div className="flex-1">
                            <input
                              type="time"
                              value={formData.customSchedule[day.key].endTime}
                              onChange={(e) =>
                                handleCustomScheduleChange(
                                  day.key,
                                  "endTime",
                                  e.target.value
                                )
                              }
                              className="w-full px-2 py-1 border rounded text-sm focus:outline-none focus:ring-1 focus:ring-[#2A9D8F]"
                            />
                          </div>
                        </>
                      )}
                    </div>
                  ))}
                </div>
              )}
            </div>

            {/* Tên người đại diện */}
            <div className="relative">
              <input
                type="text"
                name="representativeName"
                value={formData.representativeName}
                onChange={handleInputChange}
                placeholder="Tên người đại diện/Chủ doanh nghiệp"
                className="w-full px-4 py-3 border rounded-lg pr-10 focus:outline-none focus:ring-2 focus:ring-[#2A9D8F] focus:border-transparent"
                required
              />
              <User className="absolute top-3.5 right-3 w-5 h-5 text-gray-400" />
            </div>

            {/* Nút đăng ký */}
            <button
              type="submit"
              className="w-full bg-[#2A9D8F] text-white py-3 rounded-lg hover:bg-[#228B7E] transition-all duration-200 font-medium shadow-md hover:shadow-lg"
            >
              Đăng ký tài khoản
            </button>
          </form>

          <p className="text-sm text-center mt-6">
            <a
              href="/login"
              className="text-[#2A9D8F] font-semibold hover:underline transition-all duration-200"
            >
              Đã có tài khoản? Đăng nhập ngay
            </a>
          </p>
        </div>
      </div>

      {/* Bên trái: Logo + mô tả */}
      <div className="w-1/2 bg-[#E7F3F5] flex flex-col justify-center items-center">
        <div className="w-full max-w-4xl mx-auto p-4 md:p-6 lg:p-8 rounded-lg">
          <img
            src="/public/image/ranbowlogo.png"
            alt="Logo"
            className="w-full h-auto object-contain max-w-full"
            style={{
              maxWidth: "100%",
              width: "auto",
              height: "auto",
              objectFit: "contain",
              userSelect: "none",
              transform: "scale(1)",
              transformOrigin: "center center",
            }}
          />
        </div>
      </div>
    </div>
  );
}

```

### RegisterType\index.tsx
```tsx
// File: src/pages/RegisterPage.tsx
import { User, Home, Store } from "lucide-react";
import { useNavigate } from "react-router-dom";

export default function RegisterType() {
  const navigate = useNavigate();

  return (
    <div className="min-h-screen flex bg-white relative">
      {/* Icon quay về trang homepage */}
      <button
        onClick={() => navigate("/")}
        className="absolute top-4 right-4 text-[#2A9D8F] hover:text-[#228B7E] transition-colors duration-200"
        title="Quay lại trang chính"
      >
        <Home className="w-6 h-6" />
      </button>

      {/* Bên phải: Form đăng ký */}
      <div className="w-full md:w-1/2 flex items-center justify-center p-8">
        <div className="w-full max-w-sm bg-white p-8 rounded-xl shadow-lg border">
          <h2 className="text-2xl font-bold mb-2 text-center">Đăng ký</h2>
          <p className="text-sm text-gray-600 mb-6 text-center">
            Chọn loại tài khoản mới để bắt đầu
          </p>

          <form className="space-y-4">
            {/* Nút Khách Hàng */}
            <button
              onClick={() => navigate("/register")}
              type="button"
              className="w-full bg-[#2A9D8F] text-white py-3 px-4 rounded-lg hover:bg-[#228B7E] transition-all duration-200 flex items-center justify-center space-x-3 font-medium shadow-md hover:shadow-lg"
            >
              <User className="w-5 h-5" />
              <span>Khách Hàng</span>
            </button>

            {/* Nút Cửa Hàng */}
            <button
              onClick={() => navigate("/registershop")}
              type="button"
              className="w-full bg-[#2A9D8F] text-white py-3 px-4 rounded-lg hover:bg-[#228B7E] transition-all duration-200 flex items-center justify-center space-x-3 font-medium shadow-md hover:shadow-lg"
            >
              <Store className="w-5 h-5" />
              <span>Cửa Hàng</span>
            </button>
          </form>

          <p className="text-sm text-center mt-6">
            <a
              href="/login"
              className="text-[#2A9D8F] font-semibold hover:underline transition-all duration-200"
            >
              Quay lại đăng nhập
            </a>
          </p>
        </div>
      </div>

      {/* Bên trái: Logo + mô tả */}
      <div className="w-1/2 bg-[#E7F3F5] flex flex-col justify-center items-center">
        <div className="w-full max-w-4xl mx-auto p-4 md:p-6 lg:p-8 rounded-lg">
          <img
            src="/public/image/ranbowlogo.png"
            alt="Logo"
            className="w-full h-auto object-contain max-w-full"
            style={{
              maxWidth: "100%",
              width: "auto",
              height: "auto",
              objectFit: "contain",
              userSelect: "none",
              transform: "scale(1)",
              transformOrigin: "center center",
            }}
          />
        </div>
      </div>
    </div>
  );
}

```

### ServiceDetail\ServiceDetail.tsx
```tsx
import React, { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import AppLayoutForUser from "../../layout/AppLayoutForUser";
import ServiceImages from "./components/ServiceImages";
import ServiceInfo from "./components/ServiceInfo";
import ServiceActions from "./components/ServiceActions";
import type { Service } from "@/types/services";

const mockService: Service = {
  id: "1",
  name: "Cắt tỉa lông",
  images: [
    "/image/pet-grooming-1.jpg",
    "/image/pet-grooming-2.jpg",
    "/image/pet-grooming-3.jpg",
  ],
  rating: 5,
  reviewCount: 20,
  bookingCount: 100,
  category: "Grooming",
  originalPrice: 230000,
  currentPrice: 200000,
  discount: 15,
  petTypes: ["Thỏ", "Mèo", "Chó"],
  duration: 60,
  description: "Dịch vụ cắt tỉa lông chuyên nghiệp cho thú cưng...",
};

const ServiceDetail: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const [service, setService] = useState<Service | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchService = async () => {
      try {
        setLoading(true);
        setError(null);

        // Simulate API call với mock data
        await new Promise((resolve) => setTimeout(resolve, 1000)); // 1 giây để test

        // Giả lập tìm service theo id
        if (id === "1" || id) {
          // Accept any id for demo
          setService(mockService);
        } else {
          setError("Service không tồn tại");
        }
      } catch (err) {
        console.error("Error fetching service:", err);
        setError("Có lỗi xảy ra khi tải dữ liệu");
      } finally {
        setLoading(false); // ✅ Luôn reset loading
      }
    };

    if (id) {
      fetchService();
    } else {
      setLoading(false);
      setError("Không có ID service");
    }
  }, [id]); // ✅ Dependency array đúng

  const handleAddToCart = () => {
    console.log("Added to cart:", service?.id);
  };

  const handleBookNow = () => {
    if (service?.id) {
      navigate(`/booking/${service.id}`);
    }
  };

  // Loading state
  if (loading) {
    return (
      <AppLayoutForUser>
        <div className="flex items-center justify-center min-h-[400px]">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-teal-600 mx-auto mb-4"></div>
            <p className="text-gray-600">Đang tải thông tin dịch vụ...</p>
          </div>
        </div>
      </AppLayoutForUser>
    );
  }

  // Error state
  if (error || !service) {
    return (
      <AppLayoutForUser>
        <div className="flex items-center justify-center min-h-[400px]">
          <div className="text-center">
            <h2 className="text-2xl font-bold text-gray-900 mb-2">
              {error || "Không tìm thấy dịch vụ"}
            </h2>
            <p className="text-gray-600 mb-4">
              Dịch vụ bạn tìm kiếm không tồn tại hoặc đã bị xóa.
            </p>
            <button
              onClick={() => navigate("/services")}
              className="px-4 py-2 bg-teal-600 text-white rounded-lg hover:bg-teal-700"
            >
              Quay lại danh sách dịch vụ
            </button>
          </div>
        </div>
      </AppLayoutForUser>
    );
  }

  // Success state
  return (
    <AppLayoutForUser>
      <div className="min-h-screen bg-gray-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <div>
              <ServiceImages
                images={service.images}
                serviceName={service.name}
              />
            </div>
            <div className="space-y-6">
              <ServiceInfo service={service} />
              <ServiceActions
                onAddToCart={handleAddToCart}
                onBookNow={handleBookNow}
              />
            </div>
          </div>
        </div>
      </div>
    </AppLayoutForUser>
  );
};

export default ServiceDetail;

```

### ServiceDetail\components\ServiceActions.tsx
```tsx
import React from "react";
import Button from "../../../components/ui/Button";

interface ServiceActionsProps {
  onAddToCart: () => void;
  onBookNow: () => void;
}

const ServiceActions: React.FC<ServiceActionsProps> = ({
  onAddToCart,
  onBookNow,
}) => {
  return (
    <div className="flex gap-3">
      <Button
        variant="outline"
        onClick={onAddToCart}
        className="flex-1 flex items-center justify-center gap-2 border-2 border-teal-600 text-teal-600 hover:bg-teal-50"
      >
        <svg
          className="h-5 w-5"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-2.5 5M7 13l2.5 5m6.5-5v6a2 2 0 01-2 2H9a2 2 0 01-2-2v-6m8 0V9a2 2 0 00-2-2H9a2 2 0 00-2 2v4.01"
          />
        </svg>
        Thêm vào giỏ
      </Button>

      <Button
        variant="primary"
        onClick={onBookNow}
        className="flex-1 bg-teal-600 hover:bg-teal-700"
      >
        Đặt ngay
      </Button>
    </div>
  );
};

export default ServiceActions;

```

### ServiceDetail\components\ServiceImages.tsx
```tsx
import React, { useState } from "react";

interface ServiceImagesProps {
  images: string[];
  serviceName: string;
}

const ServiceImages: React.FC<ServiceImagesProps> = ({
  images,
  serviceName,
}) => {
  const [selectedImage, setSelectedImage] = useState(0);

  return (
    <div className="space-y-4">
      {/* Ảnh chính */}
      <div className="aspect-square w-full overflow-hidden rounded-lg bg-gray-100">
        <img
          src={images[selectedImage]}
          alt={serviceName}
          className="h-full w-full object-cover"
        />
      </div>

      {/* Ảnh thu nhỏ */}
      <div className="flex space-x-2">
        {images.map((image, index) => (
          <button
            key={index}
            onClick={() => setSelectedImage(index)}
            className={`aspect-square w-20 overflow-hidden rounded-md border-2 ${
              selectedImage === index ? "border-orange-500" : "border-gray-200"
            }`}
          >
            <img
              src={image}
              alt={`${serviceName} ${index + 1}`}
              className="h-full w-full object-cover"
            />
          </button>
        ))}
      </div>
    </div>
  );
};

export default ServiceImages;

```

### ServiceDetail\components\ServiceInfo.tsx
```tsx
import React from "react";
import Badge from "../../../components/ui/Badge";
import type { Service } from "../../../types/service";

interface ServiceInfoProps {
  service: Service;
}

const ServiceInfo: React.FC<ServiceInfoProps> = ({ service }) => {
  return (
    <div className="space-y-4">
      {/* Tên và category */}
      <div className="flex items-center gap-3">
        <h1 className="text-2xl font-bold text-gray-900">{service.name}</h1>
        <Badge variant="secondary">{service.category}</Badge>
      </div>

      {/* Rating và thống kê */}
      <div className="flex items-center gap-4 text-sm text-gray-600">
        <div className="flex items-center gap-1">
          <div className="flex text-yellow-400">
            {[...Array(5)].map((_, i) => (
              <svg
                key={i}
                className={`h-4 w-4 ${
                  i < service.rating ? "fill-current" : "fill-gray-200"
                }`}
                viewBox="0 0 20 20"
              >
                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
              </svg>
            ))}
          </div>
          <span>{service.rating}</span>
        </div>
        <span>{service.reviewCount} đánh giá</span>
        <span>Lượt đặt {service.bookingCount}</span>
      </div>

      {/* Giá */}
      <div className="space-y-2">
        <p className="text-sm font-medium text-gray-600">Giá sốc</p>
        <div className="flex items-center gap-3">
          <span className="text-3xl font-bold text-gray-900">
            {service.currentPrice.toLocaleString("vi-VN")}đ
          </span>
          {service.discount && (
            <>
              <span className="text-lg text-gray-500 line-through">
                {service.originalPrice.toLocaleString("vi-VN")}đ
              </span>
              <Badge variant="destructive">-{service.discount}%</Badge>
            </>
          )}
        </div>
      </div>

      {/* Thông tin dịch vụ */}
      <div className="space-y-3">
        <div className="flex items-center gap-2">
          <span className="text-sm font-medium text-gray-700">Loại thú:</span>
          <div className="flex gap-2">
            {service.petTypes.map((type) => (
              <Badge key={type} variant="outline">
                {type}
              </Badge>
            ))}
          </div>
        </div>

        <div className="flex items-center gap-2">
          <span className="text-sm font-medium text-gray-700">
            Thời gian thực hiện:
          </span>
          <div className="flex items-center gap-1 rounded-full bg-gray-100 px-3 py-1">
            <svg
              className="h-4 w-4 text-gray-500"
              fill="currentColor"
              viewBox="0 0 20 20"
            >
              <path
                fillRule="evenodd"
                d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z"
                clipRule="evenodd"
              />
            </svg>
            <span className="text-sm text-gray-700">
              {service.duration} phút
            </span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ServiceInfo;

```

### Services\Service.tsx
```tsx
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import FilterBar from "@/components/common/FilterBar";

// Mock data service
const mockServices = Array.from({ length: 12 }).map((_, idx) => ({
  id: idx + 1,
  name: "Cắt tỉa lông",
  price: 200000,
  sold: 143,
  location: "Hồ Chí Minh",
}));

const ServicesPage: React.FC = () => {
  const [services, setServices] = useState(mockServices);
  const navigate = useNavigate();

  // Xử lý filter (hiện tại chỉ filter giả lập)
  const handleFilter = (filters: Record<string, string>) => {
    // TODO: Sau này fetch API với filters, hiện tại chỉ mock
    setServices(mockServices); // Giữ nguyên
  };

  // Khi click vào service
  const handleServiceClick = (id: number) => {
    navigate(`/service-detail/${id}`);
  };

  return (
    <div className="container mx-auto px-4 py-6">
      <FilterBar onFilter={handleFilter} />
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mt-4">
        {services.map((service) => (
          <div
            key={service.id}
            onClick={() => handleServiceClick(service.id)}
            className="cursor-pointer bg-white rounded-lg shadow p-4 flex flex-col items-center hover:shadow-lg transition"
          >
            <div className="w-full h-28 bg-gray-100 rounded mb-3"></div>
            <div className="text-center">
              <div className="font-medium text-gray-800">{service.name}</div>
              <div className="text-orange-600 font-semibold mt-1">
                {service.price.toLocaleString()} đ
              </div>
              <div className="text-xs text-gray-400 mt-1">
                Đã bán: {service.sold} &nbsp;|&nbsp; {service.location}
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default ServicesPage;

```

### Settings\index.tsx
```tsx

```

### SignUp\SignUp.tsx
```tsx
import { useState } from "react";
import { Link } from "react-router-dom";
import { ChevronLeftIcon, EyeCloseIcon, EyeIcon } from "@/components/icons";
import Label from "@/components/form/Label";
import Input from "@/components/form/input/InputField";
import Checkbox from "@/components/form/input/Checkbox";
import Button from "@/components/ui/Button";

export default function SignUpForm() {
  const [showPassword, setShowPassword] = useState(false);
  const [isChecked, setIsChecked] = useState(false);
  return (
    <div className="flex flex-col flex-1">
      <div className="w-full max-w-md pt-10 mx-auto">
        <Link
          to="/"
          className="inline-flex items-center text-sm text-gray-500 transition-colors hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
        >
          <ChevronLeftIcon className="size-5" />
          Back to dashboard
        </Link>
      </div>
      <div className="flex flex-col justify-center flex-1 w-full max-w-md mx-auto">
        <div>
          <div className="mb-5 sm:mb-8">
            <h1 className="mb-2 font-semibold text-gray-800 text-title-sm dark:text-white/90 sm:text-title-md">
              Sign In
            </h1>
            <p className="text-sm text-gray-500 dark:text-gray-400">
              Enter your email and password to sign in!
            </p>
          </div>
          <div>
            <div className="grid grid-cols-1 gap-3 sm:grid-cols-2 sm:gap-5">
              <button className="inline-flex items-center justify-center gap-3 py-3 text-sm font-normal text-gray-700 transition-colors bg-gray-100 rounded-lg px-7 hover:bg-gray-200 hover:text-gray-800 dark:bg-white/5 dark:text-white/90 dark:hover:bg-white/10">
                <svg
                  width="20"
                  height="20"
                  viewBox="0 0 20 20"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M18.7511 10.1944C18.7511 9.47495 18.6915 8.94995 18.5626 8.40552H10.1797V11.6527H15.1003C15.0011 12.4597 14.4654 13.675 13.2749 14.4916L13.2582 14.6003L15.9087 16.6126L16.0924 16.6305C17.7788 15.1041 18.7511 12.8583 18.7511 10.1944Z"
                    fill="#4285F4"
                  />
                  <path
                    d="M10.1788 18.75C12.5895 18.75 14.6133 17.9722 16.0915 16.6305L13.274 14.4916C12.5201 15.0068 11.5081 15.3666 10.1788 15.3666C7.81773 15.3666 5.81379 13.8402 5.09944 11.7305L4.99473 11.7392L2.23868 13.8295L2.20264 13.9277C3.67087 16.786 6.68674 18.75 10.1788 18.75Z"
                    fill="#34A853"
                  />
                  <path
                    d="M5.10014 11.7305C4.91165 11.186 4.80257 10.6027 4.80257 9.99992C4.80257 9.3971 4.91165 8.81379 5.09022 8.26935L5.08523 8.1534L2.29464 6.02954L2.20333 6.0721C1.5982 7.25823 1.25098 8.5902 1.25098 9.99992C1.25098 11.4096 1.5982 12.7415 2.20333 13.9277L5.10014 11.7305Z"
                    fill="#FBBC05"
                  />
                  <path
                    d="M10.1789 4.63331C11.8554 4.63331 12.9864 5.34303 13.6312 5.93612L16.1511 3.525C14.6035 2.11528 12.5895 1.25 10.1789 1.25C6.68676 1.25 3.67088 3.21387 2.20264 6.07218L5.08953 8.26943C5.81381 6.15972 7.81776 4.63331 10.1789 4.63331Z"
                    fill="#EB4335"
                  />
                </svg>
                Sign in with Google
              </button>
              <button className="inline-flex items-center justify-center gap-3 py-3 text-sm font-normal text-gray-700 transition-colors bg-gray-100 rounded-lg px-7 hover:bg-gray-200 hover:text-gray-800 dark:bg-white/5 dark:text-white/90 dark:hover:bg-white/10">
                <svg
                  width="21"
                  className="fill-current"
                  height="20"
                  viewBox="0 0 21 20"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path d="M15.6705 1.875H18.4272L12.4047 8.75833L19.4897 18.125H13.9422L9.59717 12.4442L4.62554 18.125H1.86721L8.30887 10.7625L1.51221 1.875H7.20054L11.128 7.0675L15.6705 1.875ZM14.703 16.475H16.2305L6.37054 3.43833H4.73137L14.703 16.475Z" />
                </svg>
                Sign in with X
              </button>
            </div>
            <div className="relative py-3 sm:py-5">
              <div className="absolute inset-0 flex items-center">
                <div className="w-full border-t border-gray-200 dark:border-gray-800"></div>
              </div>
              <div className="relative flex justify-center text-sm">
                <span className="p-2 text-gray-400 bg-white dark:bg-gray-900 sm:px-5 sm:py-2">
                  Or
                </span>
              </div>
            </div>
            <form>
              <div className="space-y-6">
                <div>
                  <Label>
                    Email <span className="text-error-500">*</span>{" "}
                  </Label>
                  <Input placeholder="info@gmail.com" />
                </div>
                <div>
                  <Label>
                    Password <span className="text-error-500">*</span>{" "}
                  </Label>
                  <div className="relative">
                    <Input
                      type={showPassword ? "text" : "password"}
                      placeholder="Enter your password"
                    />
                    <span
                      onClick={() => setShowPassword(!showPassword)}
                      className="absolute z-30 -translate-y-1/2 cursor-pointer right-4 top-1/2"
                    >
                      {showPassword ? (
                        <EyeIcon className="fill-gray-500 dark:fill-gray-400 size-5" />
                      ) : (
                        <EyeCloseIcon className="fill-gray-500 dark:fill-gray-400 size-5" />
                      )}
                    </span>
                  </div>
                </div>
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <Checkbox checked={isChecked} onChange={setIsChecked} />
                    <span className="block font-normal text-gray-700 text-theme-sm dark:text-gray-400">
                      Keep me logged in
                    </span>
                  </div>
                  <Link
                    to="/reset-password"
                    className="text-sm text-brand-500 hover:text-brand-600 dark:text-brand-400"
                  >
                    Forgot password?
                  </Link>
                </div>
                <div>
                  <Button className="w-full" size="sm">
                    Sign in
                  </Button>
                </div>
              </div>
            </form>

            <div className="mt-5">
              <p className="text-sm font-normal text-center text-gray-700 dark:text-gray-400 sm:text-start">
                Don&apos;t have an account? {""}
                <Link
                  to="/signup"
                  className="text-brand-500 hover:text-brand-600 dark:text-brand-400"
                >
                  Sign Up
                </Link>
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

```

### Tables\BasicTables.tsx
```tsx
import PageBreadcrumb from "../../components/common/PageBreadCrumb";
import ComponentCard from "../../components/common/ComponentCard";
import BasicTableOne from "../../pages/Tables/BasicTables";

export default function BasicTables() {
  return (
    <>
      <PageBreadcrumb pageTitle="Basic Tables" />
      <div className="space-y-6">
        <ComponentCard title="Basic Table 1">
          <BasicTableOne />
        </ComponentCard>
      </div>
    </>
  );
}

```

### UiElements\Alerts.tsx
```tsx
import PageBreadcrumb from "../../components/common/PageBreadCrumb";
import ComponentCard from "../../components/common/ComponentCard";
import Alert from "../../components/ui/Alert";

export default function Alerts() {
  return (
    <>
      <PageBreadcrumb pageTitle="Alerts" />
      <div className="space-y-5 sm:space-y-6">
        <ComponentCard title="Success Alert">
          <Alert
            variant="success"
            title="Success Message"
            message="Be cautious when performing this action."
            showLink={true}
            linkHref="/"
            linkText="Learn more"
          />
          <Alert
            variant="success"
            title="Success Message"
            message="Be cautious when performing this action."
            showLink={false}
          />
        </ComponentCard>
        <ComponentCard title="Warning Alert">
          <Alert
            variant="warning"
            title="Warning Message"
            message="Be cautious when performing this action."
            showLink={true}
            linkHref="/"
            linkText="Learn more"
          />
          <Alert
            variant="warning"
            title="Warning Message"
            message="Be cautious when performing this action."
            showLink={false}
          />
        </ComponentCard>{" "}
        <ComponentCard title="Error Alert">
          <Alert
            variant="error"
            title="Error Message"
            message="Be cautious when performing this action."
            showLink={true}
            linkHref="/"
            linkText="Learn more"
          />
          <Alert
            variant="error"
            title="Error Message"
            message="Be cautious when performing this action."
            showLink={false}
          />
        </ComponentCard>{" "}
        <ComponentCard title="Info Alert">
          <Alert
            variant="info"
            title="Info Message"
            message="Be cautious when performing this action."
            showLink={true}
            linkHref="/"
            linkText="Learn more"
          />
          <Alert
            variant="info"
            title="Info Message"
            message="Be cautious when performing this action."
            showLink={false}
          />
        </ComponentCard>
      </div>
    </>
  );
}

```

### UiElements\Avatars.tsx
```tsx
import PageBreadcrumb from "../../components/common/PageBreadCrumb";
import ComponentCard from "../../components/common/ComponentCard";
import Avatar from "../../components/ui/Avatar";

export default function Avatars() {
  return (
    <>
      <PageBreadcrumb pageTitle="Avatars" />
      <div className="space-y-5 sm:space-y-6">
        <ComponentCard title="Default Avatar">
          {/* Default Avatar (No Status) */}
          <div className="flex flex-col items-center justify-center gap-5 sm:flex-row">
            <Avatar src="/images/user/user-01.jpg" size="xsmall" />
            <Avatar src="/images/user/user-01.jpg" size="small" />
            <Avatar src="/images/user/user-01.jpg" size="medium" />
            <Avatar src="/images/user/user-01.jpg" size="large" />
            <Avatar src="/images/user/user-01.jpg" size="xlarge" />
            <Avatar src="/images/user/user-01.jpg" size="xxlarge" />
          </div>
        </ComponentCard>
        <ComponentCard title="Avatar with online indicator">
          <div className="flex flex-col items-center justify-center gap-5 sm:flex-row">
            <Avatar
              src="/images/user/user-01.jpg"
              size="xsmall"
              status="online"
            />
            <Avatar
              src="/images/user/user-01.jpg"
              size="small"
              status="online"
            />
            <Avatar
              src="/images/user/user-01.jpg"
              size="medium"
              status="online"
            />
            <Avatar
              src="/images/user/user-01.jpg"
              size="large"
              status="online"
            />
            <Avatar
              src="/images/user/user-01.jpg"
              size="xlarge"
              status="online"
            />
            <Avatar
              src="/images/user/user-01.jpg"
              size="xxlarge"
              status="online"
            />
          </div>
        </ComponentCard>
        <ComponentCard title="Avatar with Offline indicator">
          <div className="flex flex-col items-center justify-center gap-5 sm:flex-row">
            <Avatar
              src="/images/user/user-01.jpg"
              size="xsmall"
              status="offline"
            />
            <Avatar
              src="/images/user/user-01.jpg"
              size="small"
              status="offline"
            />
            <Avatar
              src="/images/user/user-01.jpg"
              size="medium"
              status="offline"
            />
            <Avatar
              src="/images/user/user-01.jpg"
              size="large"
              status="offline"
            />
            <Avatar
              src="/images/user/user-01.jpg"
              size="xlarge"
              status="offline"
            />
            <Avatar
              src="/images/user/user-01.jpg"
              size="xxlarge"
              status="offline"
            />
          </div>
        </ComponentCard>{" "}
        <ComponentCard title="Avatar with busy indicator">
          <div className="flex flex-col items-center justify-center gap-5 sm:flex-row">
            <Avatar
              src="/images/user/user-01.jpg"
              size="xsmall"
              status="busy"
            />
            <Avatar src="/images/user/user-01.jpg" size="small" status="busy" />
            <Avatar
              src="/images/user/user-01.jpg"
              size="medium"
              status="busy"
            />
            <Avatar src="/images/user/user-01.jpg" size="large" status="busy" />
            <Avatar
              src="/images/user/user-01.jpg"
              size="xlarge"
              status="busy"
            />
            <Avatar
              src="/images/user/user-01.jpg"
              size="xxlarge"
              status="busy"
            />
          </div>
        </ComponentCard>
      </div>
    </>
  );
}

```

### UiElements\Badges.tsx
```tsx
import PageBreadcrumb from "../../components/common/PageBreadCrumb";
import Badge from "../../components/ui/Badge";
import { PlusIcon } from "../../components/icons";
import ComponentCard from "../../components/common/ComponentCard";

export default function Badges() {
  return (
    <div>
      <PageBreadcrumb pageTitle="Badges" />
      <div className="space-y-5 sm:space-y-6">
        <ComponentCard title="With Light Background">
          <div className="flex flex-wrap gap-4 sm:items-center sm:justify-center">
            {/* Light Variant */}
            <Badge variant="light" color="primary">
              Primary
            </Badge>
            <Badge variant="light" color="success">
              Success
            </Badge>{" "}
            <Badge variant="light" color="error">
              Error
            </Badge>{" "}
            <Badge variant="light" color="warning">
              Warning
            </Badge>{" "}
            <Badge variant="light" color="info">
              Info
            </Badge>
            <Badge variant="light" color="light">
              Light
            </Badge>
            <Badge variant="light" color="dark">
              Dark
            </Badge>
          </div>
        </ComponentCard>
        <ComponentCard title="With Solid Background">
          <div className="flex flex-wrap gap-4 sm:items-center sm:justify-center">
            {/* Light Variant */}
            <Badge variant="solid" color="primary">
              Primary
            </Badge>
            <Badge variant="solid" color="success">
              Success
            </Badge>{" "}
            <Badge variant="solid" color="error">
              Error
            </Badge>{" "}
            <Badge variant="solid" color="warning">
              Warning
            </Badge>{" "}
            <Badge variant="solid" color="info">
              Info
            </Badge>
            <Badge variant="solid" color="light">
              Light
            </Badge>
            <Badge variant="solid" color="dark">
              Dark
            </Badge>
          </div>
        </ComponentCard>
        <ComponentCard title="Light Background with Left Icon">
          <div className="flex flex-wrap gap-4 sm:items-center sm:justify-center">
            <Badge variant="light" color="primary" startIcon={<PlusIcon />}>
              Primary
            </Badge>
            <Badge variant="light" color="success" startIcon={<PlusIcon />}>
              Success
            </Badge>{" "}
            <Badge variant="light" color="error" startIcon={<PlusIcon />}>
              Error
            </Badge>{" "}
            <Badge variant="light" color="warning" startIcon={<PlusIcon />}>
              Warning
            </Badge>{" "}
            <Badge variant="light" color="info" startIcon={<PlusIcon />}>
              Info
            </Badge>
            <Badge variant="light" color="light" startIcon={<PlusIcon />}>
              Light
            </Badge>
            <Badge variant="light" color="dark" startIcon={<PlusIcon />}>
              Dark
            </Badge>
          </div>
        </ComponentCard>
        <ComponentCard title="Solid Background with Left Icon">
          <div className="flex flex-wrap gap-4 sm:items-center sm:justify-center">
            <Badge variant="solid" color="primary" startIcon={<PlusIcon />}>
              Primary
            </Badge>
            <Badge variant="solid" color="success" startIcon={<PlusIcon />}>
              Success
            </Badge>{" "}
            <Badge variant="solid" color="error" startIcon={<PlusIcon />}>
              Error
            </Badge>{" "}
            <Badge variant="solid" color="warning" startIcon={<PlusIcon />}>
              Warning
            </Badge>{" "}
            <Badge variant="solid" color="info" startIcon={<PlusIcon />}>
              Info
            </Badge>
            <Badge variant="solid" color="light" startIcon={<PlusIcon />}>
              Light
            </Badge>
            <Badge variant="solid" color="dark" startIcon={<PlusIcon />}>
              Dark
            </Badge>
          </div>
        </ComponentCard>
        <ComponentCard title="Light Background with Right Icon">
          <div className="flex flex-wrap gap-4 sm:items-center sm:justify-center">
            <Badge variant="light" color="primary" endIcon={<PlusIcon />}>
              Primary
            </Badge>
            <Badge variant="light" color="success" endIcon={<PlusIcon />}>
              Success
            </Badge>{" "}
            <Badge variant="light" color="error" endIcon={<PlusIcon />}>
              Error
            </Badge>{" "}
            <Badge variant="light" color="warning" endIcon={<PlusIcon />}>
              Warning
            </Badge>{" "}
            <Badge variant="light" color="info" endIcon={<PlusIcon />}>
              Info
            </Badge>
            <Badge variant="light" color="light" endIcon={<PlusIcon />}>
              Light
            </Badge>
            <Badge variant="light" color="dark" endIcon={<PlusIcon />}>
              Dark
            </Badge>
          </div>
        </ComponentCard>
        <ComponentCard title="Solid Background with Right Icon">
          <div className="flex flex-wrap gap-4 sm:items-center sm:justify-center">
            <Badge variant="solid" color="primary" endIcon={<PlusIcon />}>
              Primary
            </Badge>
            <Badge variant="solid" color="success" endIcon={<PlusIcon />}>
              Success
            </Badge>{" "}
            <Badge variant="solid" color="error" endIcon={<PlusIcon />}>
              Error
            </Badge>{" "}
            <Badge variant="solid" color="warning" endIcon={<PlusIcon />}>
              Warning
            </Badge>{" "}
            <Badge variant="solid" color="info" endIcon={<PlusIcon />}>
              Info
            </Badge>
            <Badge variant="solid" color="light" endIcon={<PlusIcon />}>
              Light
            </Badge>
            <Badge variant="solid" color="dark" endIcon={<PlusIcon />}>
              Dark
            </Badge>
          </div>
        </ComponentCard>
      </div>
    </div>
  );
}

```

### UiElements\Buttons.tsx
```tsx
import ComponentCard from "../../components/common/ComponentCard";
import PageBreadcrumb from "../../components/common/PageBreadCrumb";
import Button from "../../components/ui/Button";
import { BoxIcon } from "../../components/icons";

export default function Buttons() {
  return (
    <div>
      <PageBreadcrumb pageTitle="Buttons" />
      <div className="space-y-5 sm:space-y-6">
        {/* Primary Button */}
        <ComponentCard title="Primary Button">
          <div className="flex items-center gap-5">
            <Button size="sm" variant="primary">
              Button Text
            </Button>
            <Button size="md" variant="primary">
              Button Text
            </Button>
          </div>
        </ComponentCard>
        {/* Primary Button with Start Icon */}
        <ComponentCard title="Primary Button with Left Icon">
          <div className="flex items-center gap-5">
            <Button
              size="sm"
              variant="primary"
              startIcon={<BoxIcon className="size-5" />}
            >
              Button Text
            </Button>
            <Button
              size="md"
              variant="primary"
              startIcon={<BoxIcon className="size-5" />}
            >
              Button Text
            </Button>
          </div>
        </ComponentCard>
        {/* Primary Button with Start Icon */}
        <ComponentCard title="Primary Button with Right Icon">
          <div className="flex items-center gap-5">
            <Button
              size="sm"
              variant="primary"
              endIcon={<BoxIcon className="size-5" />}
            >
              Button Text
            </Button>
            <Button
              size="md"
              variant="primary"
              endIcon={<BoxIcon className="size-5" />}
            >
              Button Text
            </Button>
          </div>
        </ComponentCard>
        {/* Outline Button */}
        <ComponentCard title="Secondary Button">
          <div className="flex items-center gap-5">
            {/* Outline Button */}
            <Button size="sm" variant="outline">
              Button Text
            </Button>
            <Button size="md" variant="outline">
              Button Text
            </Button>
          </div>
        </ComponentCard>
        {/* Outline Button with Start Icon */}
        <ComponentCard title="Outline Button with Left Icon">
          <div className="flex items-center gap-5">
            <Button
              size="sm"
              variant="outline"
              startIcon={<BoxIcon className="size-5" />}
            >
              Button Text
            </Button>
            <Button
              size="md"
              variant="outline"
              startIcon={<BoxIcon className="size-5" />}
            >
              Button Text
            </Button>
          </div>
        </ComponentCard>{" "}
        {/* Outline Button with Start Icon */}
        <ComponentCard title="Outline Button with Right Icon">
          <div className="flex items-center gap-5">
            <Button
              size="sm"
              variant="outline"
              endIcon={<BoxIcon className="size-5" />}
            >
              Button Text
            </Button>
            <Button
              size="md"
              variant="outline"
              endIcon={<BoxIcon className="size-5" />}
            >
              Button Text
            </Button>
          </div>
        </ComponentCard>
      </div>
    </div>
  );
}

```
